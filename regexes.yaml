update_url: 'https://raw.github.com/commenthol/ua-parser2/master/regexes.yaml'

# replacement pattern
pattern:
  __VERSION__: '(\d{1,10})(?:\.(\d{1,10})|)(?:\.([a-z\d]{1,20})|)'
  __VERSION_2_DIGITS__: '(\d{1,10})\.(\d{1,10})(?:\.(\d{1,10})|)'
  __VERSION_3_DIGITS__: '(\d{1,10})\.(\d{1,10})\.(\d{1,10})'
  __VERSION_DIGITS__: '(\d{1,10})(?:\.(\d{1,10})|)(?:\.(\d{1,10})|)'
  __VERSION_DIGITS_UNDERSCORE__: '(\d{1,10})(?:[._](\d{1,10})|)(?:[._](\d{1,10})|)'
  __VERSION_MOZILLA__: '(\d{1,10})(?:\.(\d{1,10})|)(?:\.?([a-z\d]+)|)'
  __VERSION_OS__: '(\d{1,10})(?:\.(\d{1,10})|)(?:\.(\d{1,10})|)(?:\.(\d{1,10})|)'
  __VERSION_OS_UNDERSCORE__: '(\d{1,10})(?:[._](\d{1,10})|)(?:[._](\d{1,10})|)'
  __BUILD__: '(?: Build|[;)])'
  __LOCALE__: '[A-Za-z]{2}[_\-][A-Za-z]{0,2}'

#### Browser ####
user_agent_parsers:
  ### iOS / OSX Applications
  - regex: '\b(CFNetwork|CaptiveNetworkSupport)'
    group:
    - regex: '^((?:(?! CFNetwork|/).)+)(?:/(\d{1,10})(?:\.([a-z\d]+)|)(?:\.([a-z\d]+)|)(?:.{1,300}|)|) CFNetwork/'
      type: 'app'
    - regex: '(CFNetwork)(?:/__VERSION__|.|$)'
      type: 'app'
    - regex: '(CaptiveNetworkSupport)-(\d{1,10})'
      type: 'app'

  #### Bots ####
  - regex: "(\
      ^FDM|\
      ^insomnia|\
      ^integrity|\
      @|\
      Acoon|\
      ai-agent|\
      adbeat|\
      AHC|\
      aggregator|\
      analyzer|\
      anonymous|\
      ApacheBench|\
      Arachmo|\
      archiver|\
      aws-|\
      [a-z]{3,30}\\.com|\
      Azureus|\
      BDFetch|\
      BingWeb|\
      BingPreview|\
      blog|\
      BlogBridge|\
      \\bNG\\b|\
      bot|\
      boost|\
      catalog|\
      insomnia|\
      Cerberian Drtrs|\
      charlotte|\
      check|\
      checker|\
      Clarsentia|\
      cloud|\
      crawl|\
      Datanyze|\
      diagnostic|\
      \\bdig\\b|\
      discovery|\
      Download Demon|\
      Evidon|\
      ExaleadCloudview|\
      explorer|\
      extract|\
      facebookexternalhit|\
      faviconGenieo|\
      FavOrg|\
      GigablastOpenSource|\
      gomezagent|\
      google|\
      GTmetrix|\
      HatenaScreenshot|\
      health|\
      history|\
      http[^:]{0,2}?://|\
      httpunit|\
      indexer|\
      inspect|\
      InternetSeer\\.com|\
      intraVnews|\
      ips-agent|\
      JetBrains|\
      JetS3t|\
      Jigsaw|\
      JNLP|\
      KHTE|\
      KTXN|\
      larbin|\
      link|\
      LinkAlarm|\
      lycos|\
      Mail\\.Ru|\
      marketing|\
      MetaURI API|\
      Microsoft URL Control|\
      monitor|\
      Moozilla|\
      MovableType|\
      netcraft|\
      Neustar WPM|\
      NING|\
      \\boBot|\
      PAN GlobalProtect|\
      PayPal|\
      Photon|\
      Pingdom|\
      Pinterest|\
      pompos|\
      Powermarks|\
      probe|\
      proxy|\
      PRTG|\
      PTST|\
      QQDownload|\
      Reaper|\
      NewRelicPinger|\
      Retreiver|\
      Rival IQ|\
      Robozilla|\
      s3fs|\
      scan|\
      Scooter|\
      scope|\
      scrap|\
      screenshot|\
      search|\
      seek|\
      Shelob|\
      site|\
      sitecon|\
      slurp|\
      snap|\
      Snoopy|\
      SpaceBison|\
      spider|\
      Squrl Java|\
      StackRambler|\
      StatusCake|\
      StumbleUpon|\
      survey|\
      synthetic|\
      teoma|\
      TLSProber|\
      Tumblr|\
      validator|\
      vortex|\
      voyager|\
      web-capture.net|\
      WebMon|\
      Webster Pro|\
      WhatsApp/|\
      WhatWeb|\
      WinHTTP|\
      WordPress|\
      www[.-]|\
      Xenu|\
      zyborg\
      )"
    regex_flag: 'i'
    group:
      # Pingdom
      - regex: '(Pingdom\.com_bot_version_)(\d{1,10})\.(\d{1,10})'
        family: 'PingdomBot'
        type: 'bot'
      # Google Plus
      - regex: 'Google.{0,300}/\+/web/snippet'
        family: 'GooglePlusBot'
        type: 'bot'
      # Pinterestbot
      - regex: '(Pinterest(?:bot|))\/(\d{1,10})(?:\.(\d{1,10})|[^\.]).{0,300}https?:\/\/'
        type: 'bot'
      # Add loadbalancer, monitoring, health-checks
      - regex: '(ELB-HealthChecker|SiteScope)(?:[/ ]__VERSION__|.|$)'
        regex_flag: 'i'
        type: 'bot::healthcheck'
      - regex: "(\
          PRTG Network Monitor|\
          PAN GlobalProtect|\
          PingdomTMS\
          )(?:[/ ]__VERSION__|.|$)"
        regex_flag: 'i'
        type: 'bot::monitor'

      # AWS S3 Clients
      - regex: '\b(Boto3?|JetS3t|aws-(?:cli|sdk-(?:cpp|go|java|nodejs|ruby2?|dotnet-(?:\d{1,2}|core)))|s3fs)/(?:__VERSION__|)'
        type: 'bot'

      - regex: '(PTST)[/ ]__VERSION__'
        family: 'SpeedCurve WebPage Test'
        type: 'bot'

      - regex: '(NAVER)\(inapp; search(?:; \d{1,10}|)(?:; __VERSION_DIGITS__|)[;)]'
        type: 'app'

      - regex: '^(PHP) '
        type: 'bot'
      - regex: 'aggregator:(\\w+)'
        type: 'bot'
      - regex: '/(Nutch)-__VERSION_2_DIGITS__'
        type: 'bot'

      # sort by length
      # BAD REGEX
      - regex: "(\
          Ask ?Jeeves/Teoma|\
          ^teoma|\
          (?:[a-z]{1,20}-|)Googlebot(?:-[a-z]{1,20}|)|\
          Microsoft Windows Network Diagnostics|\
          Microsoft [A-Za-z ]{6,50} Discovery|\
          BoardReader Favicon Fetcher\\s{0,5}|\
          BoardReader Blog Indexer|\
          baidu[a-z]{0,20}(?:spider|Mobaider)|\
          Netcraft (?:Web|SSL) Server Survey|\
          Sogou \\w{1,20} (?:Robot|Spider)|\
          AdsBot-Google(?:-[a-z]{1,20}|)|\
          Automattic Analytics Crawler|\
          Google Page Speed Insights|\
          SynapticSearch/AI Crawler|\
          msnbot(?:-media\\s{0,5}|)|\
          IlTrovatore(?:-Setaccio|)|\
          XaxisSemanticsClassifier|\
          www\\.WebSearch.com\\.au|\
          HubSpot Marketing Grader|\
          Google-Site-Verification|\
          \\bYeti(?:-[a-z]{0,20}|)|\
          Advanced Email Extractor|\
          Xenu(?:.s|) Link Sleuth|\
          Google-HTTP-Java-Client|\
          Daumoa(?:-feedfetcher|)|\
          collection@infegy\\.com|\
          Yahoo[a-z]{0,20}Seeker|\
          Slackbot-LinkExpanding|\
          NetShelter ContentScan|\
          Free ScreenShotService|\
          SEARCHALOT(?:\\.COM|)|\
          SafariBookmarkChecker|\
          Peeplo Screenshot Bot|\
          Microsoft URL Control|\
          Google Search Console|\
          FlipboardBrowserProxy|\
          Flamingo_SearchEngine|\
          \\b\\w*favicon\\w*\\b|\
          BrokenLinkCheck\\.com|\
          Y!J(?:-[A-Z]{1,30}|)|\
          Windows Phone Search|\
          websitepulse checker|\
          TrialPay URL checker|\
          Rackspace Monitoring|\
          Mediapartners-Google|\
          Google-SearchByImage|\
          archive.{0,30}\\.org_bot|\
          ZeBot_www\\.ze\\.bz|\
          Yahoo! SearchMonkey|\
          www\\.alertra\\.com|\
          RetrevoPageAnalyzer|\
          NetcraftSurveyAgent|\
          GigablastOpenSource|\
          facebookexternalhit|\
          Catchpoint(?: bot|)|\
          CloudEndure Scanner|\
          shrinktheweb\\.com|\
          Shoppimon Analyzer|\
          PlantyNet_WebRobot|\
          NetLyzer FastProbe|\
          mixed-content-scan|\
          Mail\\.RU(?:_Bot|)|\
          Innovazion Crawler|\
          ichiro(?:/mobile|)|\
          Google Web Preview|\
          Comodo SSL Checker|\
          1470\\.net crawler|\
          WEB\\.DE MailCheck|\
          Siteimprove\\.com|\
          seoscanners\\.net|\
          semanticdiscovery|\
          notifyninja\\.com|\
          Microsoft .{0,30} Bot|\
          IP2[a-z]{1,20}Bot|\
          CostaCider Search|\
          SeznamEmailProxy|\
          sureseeker\\.com|\
          Offline Explorer|\
          ^Nutch[^/]{0,30}|\
          Newneon BlogBorg|\
          InternetSeer.com|\
          HatenaScreenshot|\
          GoogleImageProxy|\
          ExaleadCloudview|\
          AppEngine-Google|\
          web-capture.net|\
          Thumbshots\\.ru|\
          SiteTruth\\.com|\
          searchuk.comBot|\
          panscient\\.com|\
          Minstrel-Browse|\
          JemmaTheTourist|\
          InternetArchive|\
          Google SketchUp|\
          Ghost Inspector|\
          Feed Seeker Bot|\
          fast-webcrawler|\
          Cerberian Drtrs|\
          agentslug\\.com|\
          Adsense-Snapshot-Google|\
          Accoona-AI-Agent|\
          Amazon CloudFront|\
          8bo Crawler Bot|\
          WorldWideWeb-X|\
          trendictionbot|\
          Slack-ImgProxy|\
          SearchIt\\.Bot|\
          RuxitSynthetic|\
          PaxleFramework|\
          PagesInventory|\
          NewsGator[^/]*|\
          FollowSite Bot|\
          FlipboardProxy|\
          Download Demon|\
          dataparksearch|\
          ConveraCrawler|\
          Buscaplus Robi|\
          NewRelicPinger|\
          WWW-Mechanize|\
          YottaaMonitor|\
          WDG_Validator|\
          voila(?:bot|)|\
          ThumbShotsBot|\
          socbot search|\
          ObjectsSearch|\
          http%20client|\
          GoogleToolbar|\
          Bot-TailTrend|\
          boitho.com-dc|\
          BlogPulseLive|\
          YFSJ crawler|\
          Yahoo! Slurp|\
          WeSEE:Search|\
          WASALive.Bot|\
          TheUsefulbot|\
          StackRambler|\
          search:robot|\
          Read%20Later|\
          masidani_bot|\
          Isara-Search|\
          HistoryHound|\
          BilgiBetaBot|\
          adbeat\\.com|\
          Webster Pro|\
          StumbleUpon|\
          Websearch4u|\
          Taringa UGC|\
          searchsight|\
          SearchByUsa|\
          robotgenius|\
          Neustar WPM|\
          netresearch|\
          MSIECrawler|\
          MovableType|\
          MnoGoSearch|\
          MetaURI API|\
          LinkedInBot|\
          Linkchecker|\
          Linguee Bot|\
          HttpMonitor|\
          BoardReader|\
          BingPreview|\
          ApacheBench|\
          Add Catalog|\
          LinkWalker|\
          Powermarks|\
          Yandex\\w+|\
          YahooYSMcm|\
          TwitterBot|\
          StatusCake|\
          Squrl Java|\
          SpaceBison|\
          QQDownload|\
          PayPal IPN|\
          PagePeeker|\
          KiwiStatus|\
          ^integrity|\
          intraVnews|\
          GuzzleHttp|\
          GomezAgent|\
          Discordbot|\
          Clarsentia|\
          Checklinks|\
          BlogBridge|\
          \\bKTXN\\b|\
          \\bKHTE\\b|\
          ^anonymous|\
          A6-Indexer|\
          WordPress|\
          Votay bot|\
          TLSProber|\
          Site-Shot|\
          Robozilla|\
          RMSnapKit|\
          Retreiver|\
          RedCarpet|\
          Popdexter|\
          NG-Search|\
          LinkAlarm|\
          LesnikBot|\
          JetBrains|\
          ^insomnia|\
          i?seekbot|\
          ips-agent|\
          findlinks|\
          DareBoost|\
          charlotte|\
          Butterfly|\
          BuiltWith|\
          Altresium|\
          altavista|\
          Datanyze|\
          WebThumb|\
          ^voyager|\
          ShopWiki|\
          ScoutJet|\
          Rival IQ|\
          Qwantify|\
          OSSProxy|\
          Netvibes|\
          NerdyBot|\
          MuckRack|\
          Moozilla|\
          mogimogi|\
          Lite Bot|\
          IQSearch|\
          InfuzApp|\
          IconSurf|\
          Icarus6j|\
          httpunit|\
          HooWWWer|\
          heritrix|\
          GTmetrix|\
          clumboot|\
          \\bNG\\b|\
          blitzbot|\
          archiver|\
          adidxbot|\
          AcoonBot|\
          ZooShot|\
          WinHTTP|\
          WhatWeb|\
          ^vortex|\
          URL2PNG|\
          Spinn3r|\
          SiteCon|\
          Semager|\
          scrubby|\
          scooter|\
          Riddler|\
          polybot|\
          Plukkie|\
          ^Photon|\
          Orbiter|\
          openbot|\
          NetSurf|\
          masscan|\
          Lsearch|\
          jbot\\b|\
          ^INGRID|\
          gigabot|\
          furlbot|\
          Filangy|\
          BotSeer|\
          \\boBot|\
          BingWeb|\
          bingbot|\
          BDFetch|\
          Azureus|\
          Arachmo|\
          50\\.nu|\
          ZyBorg|\
          zimeno|\
          Wotbox|\
          WebMon|\
          ^Tumblr|\
          speedy|\
          Snoopy|\
          snappy|\
          Shelob|\
          Scrapy|\
          Reaper|\
          pompos|\
          ^Oblio|\
          msrbot|\
          mozDex|\
          m65bot|\
          larbin|\
          Kurzor|\
          Kraken|\
          Jigsaw|\
          holmes|\
          GomezA|\
          Genieo|\
          FavOrg|\
          Evidon|\
          EasyDL|\
          \\b008|\
          Slurp|\
          Nutch|\
          ^NING|\
          lycos|\
          Llaut|\
          htdig|\
          Giant|\
          Evaal|\
          ^ECCP|\
          DeuSu|\
          Argus|\
          Acoon|\
          ^zao|\
          Yepi|\
          WIRE|\
          JNLP|\
          ^FDM|\
          ^AHC\
          )(?:[ /-]__VERSION__|)"
        regex_flag: 'i'
        type: 'bot'

      - regex: '^(bot)[^a-z](?:__VERSION__|)'
        regex_flag: 'i'
        type: 'bot'

      - regex: "(\
          (?:[a-z][a-z. _-]{0,30} ?|)\
          (?:\
          crawler|crawl|scraper|spider|indexer|webbot|analyzer|\
          WhatsApp|robot\\b|\
          (?:(?!cubot)[\\w-]{2})bot\\b|\
          [\\w.]+ bot\\b| bot(?=@)\\b\
          )\
          )(?:[ /-]__VERSION__|)"
        regex_flag: 'i'
        type: 'bot'

      - regex: "; (Daum)/__VERSION__"
        type: 'bot'

      - regex: 'MSIE \d{1,10}\..{0,100}?https?://((?:[\w\d-]+\.|)[\w\d-]+\.\w+)'
        type: 'bot'

  ### iOS / OSX Applications
  - regex: '\b(iPhone|iPad|iPod)'
    group:
      - regex: '^([^/]+)/__VERSION__ \((?:iPhone|iPad|iPod); iOS [0-9\.]+; Scale/[0-9\.]+\)'
        type: 'app'
      - regex: '^([^/]+)/__VERSION__ iOS/[0-9\.]+ model/(?:iPhone|iPad|iPod)'
        type: 'app'

  ### Mail
  - regex: "(\
      [Mm]ail|\
      Barca|\
      \\bBat|\
      DAV|\
      ownCloud|\
      Nextcloud|\
      Exchange|\
      Eudora|\
      Evolution|\
      Framabird|\
      Icedove|\
      Lightning|\
      Lotus-Notes|\
      MSOffice|\
      Microsoft Office|\
      Outlook|\
      Shredder|\
      Sparrow|\
      Spicebird|\
      Superhuman|\
      Thunderbird|\
      YahooMailProxy|\
      YahooMobileMail|\
      (?:Macintosh.{0,300} AppleWebKit|MailBar|Postbox|HipChat)\
      )"
    group:
      # Outlook 2007
      - regex: 'Microsoft Office Outlook 12\.\d{1,10}\.\d{1,10}|MSOffice 12'
        family: 'Outlook'
        v1: '2007'
        type: 'mail'
      # Outlook 2010
      - regex: 'Microsoft Outlook 14\.\d{1,10}\.\d{1,10}|MSOffice 14'
        family: 'Outlook'
        v1: '2010'
        type: 'mail'
      # Outlook 2013
      - regex: 'Microsoft Outlook 15\.\d{1,10}\.\d{1,10}'
        family: 'Outlook'
        v1: '2013'
        type: 'mail'
      # Outlook 2016
      - regex: 'Microsoft Outlook (?:Mail |)16\.\d{1,10}\.\d{1,10}|MSOffice 16'
        family: 'Outlook'
        v1: '2016'
        type: 'mail'
      # Windows Live Mail
      - regex: 'Outlook-Express\/7\.0.{0,300}'
        family: 'Windows Live Mail'
        type: 'mail'
      # Mail Agents with version
      - regex: "(\
          Evolution\
          )/__VERSION__"
        type: 'mail'
      # Other Mail Agents
      - regex: "(\
          Barca(?:Pro|)|\
          Eudora|\
          ExchangeServicesClient|\
          ExchangeWebServices|\
          Framabird|\
          FossaMail|\
          HipChat|\
          kmail2|\
          Lotus-Notes|\
          MacOutlook|\
          MailBar|\
          Mail Free|\
          Microsoft Outlook|\
          Outlook-Express|\
          Outlook-iOS-Android|\
          Pocomail|\
          Postbox|\
          Slack_SSB|\
          Sparrow|\
          Superhuman|\
          The Bat!(?: Voyager|)|\
          YahooMailProxy|\
          YahooMobileMail\
          )(?:[/ ]__VERSION__|)"
        type: 'mail'
      # Apple Air Mail
      - regex: '(Airmail) __VERSION__'
        type: 'mail'
      - regex: '(Shredder|Spicebird)/__VERSION__'
        type: 'mail'
      # Apple Mail
      - regex: '^Mozilla\/5\.0 \(.{0,300} Mac OS X.{0,300}\(KHTML, like Gecko\)(?: Mobile\/[\S]*|)$'
        family: 'Apple Mail'
        type: 'mail'
      # Lightning (for Thunderbird) http://www.mozilla.org/projects/calendar/lightning/
      - regex: 'Gecko/\d{1,10} (Lightning)/__VERSION_MOZILLA__'
        type: 'mail'
      # Thunderbird
      - regex: '(Thunderbird|Icedove)/__VERSION_MOZILLA__'
        family: 'Thunderbird'
        type: 'mail'
      - regex: '(mobmail) android __VERSION__'
        type: 'mail'
      # DAV
      - regex: '(mirall)/__VERSION__.{0,300}Nextcloud'
        family: 'Nextcloud'
        type: 'app::webdav'
      - regex: '(WEBDAV Client)'
        type: 'app::webdav'
      - regex: "\\b(\
          RCM CardDAV plugin|\
          DAVdroid|\
          ownCloud-android|\
          Microsoft-WebDAV-MiniRedir\
          )/__VERSION__"
        type: 'app::webdav'
      - regex: '(Microsoft Office) \(Word\) (2014)'
        family: 'Microsoft Office Word'
        type: 'app'

  # Feedreader
  - regex: "\\b(\
      AideRSS|\
      Akregator|\
      Apple-PubSub|\
      Bloglovin|\
      CITA RSS Aggregator|\
      Custom-Feed Reader|\
      Digg Feed Fetcher|\
      Feedbin |\
      FeedBlitz|\
      FeedDa?emon|\
      Feeddler|\
      FeedForAll|\
      Feedreader|\
      JetBrains Omea Reader|\
      Liferea|\
      NetNewsWire|\
      Mtps Feed Aggregation System|\
      newsbeuter|\
      newspaper|\
      NewsBlur|\
      Pulp|\
      ReadKit|\
      ReederForMac|\
      RssBar|\
      RSS Junkie|\
      RSS Menu|\
      RSSOwl|\
      (?:RSS|Rss)Bandit|\
      SimplePie|\
      SimpleRSS|\
      Stringer|\
      Tiny Tiny RSS|\
      UniversalFeedParser|\
      Windows-RSS-Platform|\
      Wizz RSS News Reader\
      )(?:[ /]__VERSION__|)"
    type: 'feedreader'

  # podcast
  - regex: "(AppleCoreMedia)/__VERSION__"
    type: 'app'
  - regex: "\\b(\
      AntennaPod|\
      BashPodder|\
      BeyondPod|\
      bPod|\
      DoggCatcher|\
      Doppler|\
      Downcast|\
      ESPN Radio|\
      Fancy Cloud Music|\
      FancyMusic|\
      gPodder|\
      GoldenPod|\
      iPodder|\
      jPodder|\
      Juice|\
      MediaGo|\
      Overcast|\
      Peapod|\
      philpodder|\
      Player FM|\
      PodCruncher|\
      PocketTunes|\
      Podcasts|\
      Podkicker(?: Classic| Pro|)|\
      podracer|\
      RSS_?Radio\
      )\\b(?:(?: v ?|[ /])__VERSION__|)"
    type: 'podcast'

  # mediaplayers
  - regex: "\\b(
      AlexaMediaPlayer|\
      Banshee|\
      Clementine|\
      ExoPlayerLib|\
      FlyCast|\
      foobar2000|\
      HTC Streaming Player|\
      Instacast|\
      iTunes(?:-iP\\w+(?:-\\w+|)|)|\
      Kodi|\
      LG Player|\
      MediaMonkey|\
      Nightingale|\
      NSPlayer|\
      RebelMouse|\
      Songbird|\
      spmc|\
      Spotify|\
      SubStream|\
      vlc|\
      VLC|\
      VOX Music Player|\
      Windows-Media-Player(?:-\\w+|)|\
      WMPlayer|\
      XBMC|\
      Zune\
      )\\b(?:[ /](\\d{1,10})(?:\\.(\\d{1,10})(?:\\.(\\d{1,10})|)(-[A-Z\\d]+|)|)|)"
    v3: '$4$5'
    type: 'mediaplayer'
  - regex: '(Lavf|Miro)/?__VERSION__'
    type: 'mediaplayer'
  - regex: '(QuickTime)(?:(?:(?:.{1,300}qtver=)|(?:(?: E-|)[\./]))__VERSION__|)'
    type: 'mediaplayer'

  # social networks
  - regex: 'Pinterest|\[FB'
    group:
      # Facebook
      - regex: '\[FB[^/]+?/(Groups|Messenger|FBPageAdmin)[^;]*?;FBAV/__VERSION__'
        regex_flag: 'i'
        family: 'Facebook $1'
        type: 'app'
      - regex: '\[FB.{0,300};(FB(?:AV|Version))/__VERSION__'
        family: 'Facebook'
        type: 'app'
      - regex: '\[FB.{0,300}/FB'
        family: 'Facebook'
        type: 'app'
      # Pinterest
      - regex: '\[(Pinterest)/[^\]]+\]'
        type: 'app'
      - regex: '(Pinterest)(?: for Android(?: Tablet|)|)/__VERSION__'
        type: 'app'

  # Apps
  - regex: '\b(MicroMessenger)/__VERSION__'
    family: 'WeChat'
    type: 'app'
  - regex: "\\b(\
      1Password|\
      AdobeAIR|\
      Alltop|\
      baiduboxapp|\
      BacaBerita App|\
      Box|\
      BoxNotes|\
      Box Sync|\
      Coursera-Mobile|\
      Crowsnest|\
      Cyberdog|\
      Cyberduck|\
      DDG-Android|\
      ^Dalvik|\
      Deezer|\
      Dreamweaver|\
      Instagram|\
      iWeb|\
      kioclient|\
      Kurio|\
      Line|\
      Microsoft Office|\
      Microsoft Office Excel|\
      Microsoft Office Mobile|\
      Microsoft Office OneNote|\
      Microsoft Office PowerPoint|\
      Microsoft Office SyncProc|\
      Microsoft Office Upload Center|\
      Microsoft Office Visio|\
      Microsoft Office Word|\
      Microsoft Office Word|\
      Mobicip|\
      MS ?FrontPage|\
      NewsArticle|\
      NewsFire|\
      OpenOffice|\
      PowerPoint|\
      Prince|\
      RedFlagDealsApp|\
      RobloxStudio|\
      Sandvox|\
      Snapchat|\
      SohuNews|\
      SoundCloud-Android|\
      WebClip|\
      Windows-Update-Agent|\
      WindowsPowerShell\
      )[ /-]__VERSION__"
    type: 'app'

  # Apps wo Version
  - regex: "\\b(\
      AndroidDownloadManager|\
      bingipadclient|\
      Coda|\
      David Client|\
      Evernote|\
      iBooks|\
      LibreOffice|\
      NewsFire|\
      Raptr|\
      Reddit|\
      Sandvox|\
      TubeTV|\
      wkhtmltoimage|\
      YJApp-ANDROID|\
      wkhtmltopdf\
      )\\b"
    type: 'app'

  # Weibo
  - regex: '_(weibo)_{1,2}__VERSION__'
    family: 'Weibo'
    type: 'app'

  #### SPECIAL CASES TOP ####

  # Gecko group
  - regex: 'Gecko|Treco|FxiOS|Cheshire'
    group:
      # Old Opera hides as Firefox
      - regex: '(Opera) __VERSION__'
      # Browsers using Gecko; must go before Firefox
      - regex: "Mozilla.{0,300}\\b(\
          Beonex|\
          Camino|\
          Cheshire|\
          Chimera|\
          CometBird|\
          Firebird(?: Browser|)|\
          Fireweb Navigator|\
          Flock|\
          IceDragon|\
          K-Ninja|\
          KMLite|\
          Light|\
          lolifox|\
          MultiZilla|\
          Navigator|\
          [Pp]rism|\
          SailfishBrowser|\
          SeaMonkey|\
          Vonkeror\
          )/__VERSION_MOZILLA__"

      - regex: '(MultiZilla) v__VERSION_MOZILLA__'

      # Firefox
      - regex: '(Fennec)/__VERSION_MOZILLA__'
        family: 'Firefox Mobile'
      - regex: '(?:Mobile[:;]|Tablet;).{0,300}(Firefox)/__VERSION_MOZILLA__'
        family: 'Firefox Mobile'
      - regex: '\b(BonEcho|GranParadiso|Lorentz|Minefield|Namoroka|Pale[Mm]oon|Shiretoko)/__VERSION_MOZILLA__'
      - regex: '(Firefox).{0,300}Tablet browser __VERSION_MOZILLA__'
        family: 'MicroB'
      - regex: '(MozillaDeveloperPreview)/__VERSION_MOZILLA__'
      - regex: '(FxiOS)/__VERSION_MOZILLA__'
        family: 'Firefox iOS'

      # Swiftfox
      - regex: '(Firefox)/__VERSION__ \(Swiftfox\)'
        family: 'Swiftfox'

      # Waterfox
      - regex: '(Waterfox)/__VERSION__'

      - regex: '(Firefox)/__VERSION_MOZILLA__ (Classilla)'
        family: '$5'

      - regex: '(Firefox)/__VERSION_MOZILLA__'

  - regex: '(MyIBrow)/__VERSION__'
    family: 'My Internet Browser'

  # UC Browser (needs to be checked before Opera Mini)
  - regex: '(UC? ?Browser|UCWEB|\bU3)[ /]?(\d{1,10})\.(\d{1,10})\.(\d{1,10})'
    family: 'UC Browser'

  # Opera group
  - regex: 'Opera|OPR|OPiOS|Coast| MMS/'
    group:
      # Opera will stop at 9.80 and hide the real version in the Version string.
      # see: http://dev.opera.com/articles/view/opera-ua-string-changes/
      - regex: '(Opera Tablet).{0,300}Version/__VERSION_DIGITS__'
      - regex: '(Opera Mini)(?:/att|)/__VERSION_DIGITS__'
      - regex: '(Opera Mini)'
      - regex: '(Opera)/.{1,100}Opera Mobi.{1,100}Version/__VERSION_DIGITS__'
        family: 'Opera Mobile'
      - regex: '(Opera)/__VERSION__.{1,100}Opera Mobi'
        family: 'Opera Mobile'
      - regex: 'Opera Mobi.{1,100}(Opera)(?:\/|\s{1,2})__VERSION_DIGITS__'
        family: 'Opera Mobile'
      - regex: 'Opera Mobi'
        family: 'Opera Mobile'
      - regex: '(Opera)/9\.80.{0,300}Version/__VERSION_DIGITS__'

      # Opera 14 for Android uses a WebKit render engine.
      - regex: '(?:Mobile Safari).{1,300}( OPR)/__VERSION__'
        family: 'Opera Mobile'
      - regex: '(?:Android).{1,300}( OPR)/__VERSION__'
        family: 'Opera Mobile'
      # Opera 15 for Desktop is similar to Chrome but includes an "OPR" Version string.
      - regex: '(?:Safari|Chrome).{1,300}( OPR)/__VERSION__'
        family: 'Opera'

      # Opera Neon
      - regex: 'Chrome/.{1,300}( MMS)/__VERSION__'
        family: 'Opera Neon'

      # Opera Coast
      - regex: '(Coast)/__VERSION__'
        family: 'Opera Coast'

      # Opera Mini for iOS (from version 8.0.0)
      - regex: '(OPiOS)/__VERSION__'
        family: 'Opera Mini'

  # Palm WebOS looks a lot like Safari.
  - regex: '(hpw|web)OS/__VERSION__'
    family: 'webOS Browser'

  # LuaKit has no version info.
  # ref: http://luakit.org/projects/luakit/
  - regex: '(luakit)'
    family: 'LuaKit'

  # Rekonq
  - regex: '(rekonq)(?:/__VERSION__ Safari|)'
    family: 'Rekonq'

  # Conkeror lowercase/uppercase
  # ref: http://conkeror.org/
  - regex: '([Cc]onkeror)/__VERSION__'
    family: 'Conkeror'

  # catches lower case konqueror
  - regex: '([Kk]onqueror)/__VERSION__'
    family: 'Konqueror'

  - regex: '(WeTab)-Browser'

  - regex: '(Comodo[ _]Dragon)/__VERSION__'
    family: 'Comodo Dragon'

  - regex: '(Symphony) (\d{1,10})\.(\d{1,10})'

  # Yandex Browser
  - regex: '(YaBrowser)/__VERSION__'
    family: 'Yandex Browser'

  - regex: '(2345Explorer|2345chrome)(?:[ /]| v)__VERSION__'
    family: 2345Explorer

  - regex: '(NetFront NX) __VERSION__'
    family: 'NetFront NX'
  - regex: '(Nintendo Switch.{1,300}? NF)(?:/__VERSION__|)'
    family: 'NetFront NF'
  # PlayStation Vita should go before Amazon Silk
  - regex: '(PLAYSTATION 3.{1,300}WebKit|Nintendo 3DS|PlayStation Vita|AppleWebKit.{1,300} NX)(?:/__VERSION__|)'
    family: 'NetFront NX'
  - regex: '(PlayStation 4) __VERSION__'
    family: 'PlayStation Browser'
  # Amazon Silk, should go before Chrome Mobile and Safari
  - regex: '(Silk)/(\d{1,10})\.(\d{1,10})(?:\.([0-9\-]+)|)'
    family: 'Amazon Silk'

  # Coc Coc browser, based on Chrome (used in Vietnam)
  - regex: '(coc_coc_browser|CoRom)/(\d{1,10})\.(\d{1,10})(?:\.(\d{1,10})|)'
    family: 'Coc Coc'

  # Edge Mobile
  - regex: 'Windows Phone .{0,200}(Edge)/(\d{1,10})\.(\d{1,10})'
    family: 'Edge Mobile'

  - regex: '\b(GSA|Listia|Flipboard)/__VERSION__'
    type: 'app'

  # HbbTV Group
  - regex: 'HbbTV'
    group:
      - regex: '(Web0S); Linux/SmartTV'
        family: 'LG Browser'
      - regex: '(Samsung;SmartTV)__VERSION__'
        family: 'Samsung SmartTV'
      - regex: '(Panasonic;VIERA )__VERSION__'
        family: 'SmartViera'
      - regex: 'Panasonic;(DIGA WebKit) M__VERSION__'
      - regex: '(Skykid)/__VERSION__'

  # QQ Browsers
  - regex: 'QQBrowser'
    group:
      - regex: '(MQQBrowser/Mini)(?:__VERSION__|)'
        family: 'QQ Browser Mini'
      - regex: '(MQQBrowser)(?:/__VERSION__|)'
        family: 'QQ Browser Mobile'
      - regex: '(QQBrowser)(?:/__VERSION__|)'
        family: 'QQ Browser'

  # Edge
  - regex: '\b(EdgA|EdgiOS)/__VERSION__'
    family: 'Edge'

  # Partly Chrome Based Browsers
  - regex: '\b(baidubrowser|BaiduHD|Focus|OculusBrowser|SamsungBrowser)/__VERSION__'
  - regex: '\bbd(browser_i18n|browserhd_i18n|browser_mini)/__VERSION__'
    family: 'baidu$1'
  - regex: '(MAXTHON|Maxthon|MxBrowser)[ /]__VERSION__'
    family: 'Maxthon'
  - regex: '(ACHEETAHI)[ /]__VERSION__'
    family: 'CM Browser'
  # Seznam.cz browser (based on WebKit)
  - regex: '(SznProhlizec)/__VERSION__'
    family: 'Seznam.cz'

  # Chrome Mobile - Chrome based
  - regex: 'CrMo|CriOS|Chrom|chromeframe'
    group:
      - regex: '\b(MiuiBrowser|Mint Browser)/__VERSION__'
      # Headless Chrome
      # https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md
      - regex: '(HeadlessChrome)(?:/(\d{1,10})\.(\d{1,10})\.?(\d{1,10}|)|)'
        type: 'headless'
      - regex: ' (Nichrome)/self/(\d{1,10})'
      # Chrome Based Browsers
      - regex: "\\b(\
          AlohaBrowser|\
          Beamrise|\
          BlueBrowser|\
          Chedot|\
          Chromium|\
          Crosswalk|\
          Diglo|\
          Maxthon|\
          Mb2345Browser|\
          MobileIron|\
          MxNitro|\
          OverwolfClient|\
          Polarity|\
          Puffin|\
          Qiyu|\
          SamsungBrowser/CrossApp|\
          SogouMobileBrowser|\
          Superbird|\
          SurfBrowser|\
          Tenta|\
          Whale|\
          WhiteHat Aviator\
          )/__VERSION__"
      # IE Mobile - strange MS ua contains Chrome
      - regex: '(IEMobile)/__VERSION__'
        family: 'IE Mobile'
      - regex: '(CrMo)/__VERSION__'
        family: 'Chrome Mobile'
      - regex: '(CriOS)/__VERSION__'
        family: 'Chrome Mobile iOS'
      - regex: '; wv\).{1,300}(Chrome)/__VERSION__.{1,300}\bMobile\b'
        family: 'Chrome Mobile Webview'
      - regex: '\b(Chrome)/__VERSION__.{1,300}\bMobile\b'
        family: 'Chrome Mobile'
      - regex: '\bMobile\b.{1,300}(Chrome)/__VERSION__'
        family: 'Chrome Mobile'

      # Chrome Frame must come before MSIE.
      - regex: '(chromeframe)/__VERSION__'
        family: 'Chrome Frame'

      # Mail.ru Amigo/Internet Browser (Chromium-based)
      - regex: '(Chrome)/__VERSION__.{0,100} MRCHROME'
        family: 'Mail.ru Chromium Browser'
      # Iron Browser ~since version 50
      - regex: '(Chrome)/__VERSION__[\d.]{0,100} Iron[^/]'
        family: 'Iron'
      # Chrome based
      - regex: '\b(Chrome)\/__VERSION__.{0,100}\b(JuziBrowser|Salam Browser)\b'
        family: '$5'
      - regex: '\b(Chedot)\b.{0,100}\bChrome\/__VERSION__'
        family: '$1'

  # Tizen Browser (second case included in browser/major.minor regex)
  - regex: '(Tizen|SLP) Browser/__VERSION__'
    family: 'Tizen Browser'

  # Sogou Explorer 2.X
  - regex: '(SE 2\.X) MetaSr __VERSION__'
    family: 'Sogou Explorer'

  # Baidu Browsers (desktop spoofs chrome & IE, explorer is mobile)
  - regex: '(FlyFlow)/__VERSION__'
    family: 'Baidu Explorer'

  # Baidu Spark
  - regex: '((?:BD|)Spark|BIDUBrowser)[ /]__VERSION__'
    family: 'Baidu Spark'

  # AOL Browser
  - regex: '(AOL)[/ ](\d{1,10})\.(\d{1,10});? AOL(?:Build|BUILD)[ /]\d{1,10}'
  - regex: '(ADM)/'
    family: 'AOL'

  # OmniWeb
  - regex: '(OmniWeb)/v?__VERSION__'

  # Netscape
  - regex: '\b(Navigator|Netscape6)/(\d{1,10})(?:\.(\d{1,10})(?:\.?([ab]?\d{1,10}[a-z]*)|)|)'
    family: 'Netscape'

  # Windows 10 IE version uses "Edge" and "Chrome"
  - regex: '\b(Edge)/(\d{1,10})(?:\.(\d{1,10})|)'
    family: 'Edge'

  # iOS Versions of Browsers
  - regex: '(Mercury|Puffin)/(\d{3,5})'

  # no version
  - regex: '\b(JuziBrowser)\b'

  # Browser/major_version.minor_version(.beta_version)

  # @note: Phoenix needs separate regex as conflicts with device "Fly Phoenix 2"
  - regex: '(Phoenix)/__VERSION__'

  # @note ArcGis
  - regex: 'ArcGIS|QGIS|JOSM|GeoEvent Server|FME'
    group:
      # ESRI Server products
      - regex: '(GeoEvent Server) (\d+)(?:\.(\d+)(?:\.(\d+)|)|)'
      # ESRI ArcGIS Desktop Products
      - regex: '(ArcGIS Pro)(?: (\d+)\.(\d+)\.([^ ]+)|)'
      - regex: 'ArcGIS Client Using WinInet'
        family: 'ArcMap'
      - regex: '(OperationsDashboard)-(?:Windows)-__VERSION_3_DIGITS__'
        family: 'Operations Dashboard for ArcGIS'
      - regex: '(arcgisearth)/__VERSION_2_DIGITS__'
        family: 'ArcGIS Earth'
      - regex: 'com.esri.(earth).phone/__VERSION_2_DIGITS__'
        family: 'ArcGIS Earth'
      # ESRI ArcGIS Mobile Products
      - regex: '(arcgis-explorer)/__VERSION_3_DIGITS__'
        family: 'Explorer for ArcGIS'
      - regex: 'arcgis-(collector|aurora)/__VERSION_3_DIGITS__'
        family: 'Collector for ArcGIS'
      - regex: '(arcgis-workforce)/__VERSION_3_DIGITS__'
        family: 'Workforce for ArcGIS'
      - regex: '(Collector|Explorer|Workforce)-(?:Android|iOS)-__VERSION_2_DIGITS__'
        family: '$1 for ArcGIS'
      # ESRI ArcGIS Runtimes
      - regex: 'ArcGISRuntime-(Android|iOS|NET|Qt)/__VERSION_2_DIGITS__'
        family: 'ArcGIS Runtime SDK for $1'
      - regex: 'ArcGIS\.?(iOS|Android|NET|Qt)(?:-|\.)__VERSION_2_DIGITS__'
        family: 'ArcGIS Runtime SDK for $1'
      - regex: 'ArcGIS\.Runtime\.(Qt)\.__VERSION_2_DIGITS__'
        family: 'ArcGIS Runtime SDK for $1'
      # SAFE FME
      - regex: '(FME)\/(\d+\.\d+)\.(\d+)\.(\d+)'
      # QGIS
      - regex: '(QGIS)\/(\d)\.?0?(\d{1,2})\.?0?(\d{1,2})'
      # JOSM
      - regex: '(JOSM)/(\d+)\.(\d+)'

  # Other browsers
  - regex: "(\
      115Browser|\
      1stBrowser|\
      7Star|\
      Abrowser|\
      amaya|\
      Amiga-AWeb|\
      AmigaVoyager|\
      ANTFresco|\
      ANTGalio|\
      Arora|\
      AviraScout|\
      BlackHawk|\
      Bolt|\
      BOLT|\
      brave|\
      Bunjalloo|\
      Cent|\
      Chedot|\
      ChromePlus|\
      Contiki|\
      CoolNovo|\
      Crazy Browser|\
      Demeter|\
      Dillo|\
      Dolfin|\
      Dolphin http client|\
      Dorado WAP-Browser|\
      Dragon|\
      Electron|\
      Epiphany|\
      Espial|\
      EspialTVBrowser|\
      Fennec|\
      FireWeb|\
      Fluid|\
      Fresco|\
      Galeon|\
      Google Earth(?: EC|)|\
      hdplusinteraktiv|\
      HotJava|\
      IBrowse|\
      iCab|\
      Iceape|\
      ICE Browser|\
      IceCat|\
      Ice[Ww]easel|\
      iRider|\
      Iris|\
      Iron|\
      Jasmine|\
      Kapiko|\
      Kazehakase|\
      Kindle|\
      Kinza|\
      K-Meleon|\
      Kuaiso|\
      LG Browser|\
      Lobo|\
      Lunascape|\
      Lynx|\
      MacAppStore|\
      Maemo Browser|\
      mDolphin|\
      Mercury|\
      Midori|\
      MiniBrowserMobile|\
      Minimo|\
      MiuiBrowser|\
      MobileIron|\
      mogimogi|\
      Net[Ff]ront|\
      NetFrontLifeBrowser|\
      NetPositive|\
      Netscape|\
      NetSurf|\
      NTENTBrowser|\
      OmniWeb|\
      OneBrowser|\
      Opera|\
      Opera Mini|\
      Orca|\
      Otter|\
      PaleMoon|\
      Planetweb|\
      Polaris|\
      Puffin|\
      PyAMF|\
      QtWebkit|\
      Qt|\
      QuickLook|\
      QupZilla|\
      qutebrowser|\
      Raven for Mac|\
      Roccat|\
      RockMelt|\
      SailfishBrowser|\
      SalesforceMobileSDK|\
      SeaMonkey|\
      SecondLife|\
      Seznam\\.cz|\
      Shiira|\
      Shrook|\
      SkipStone|\
      Skyfire|\
      Sleipnir|\
      Slimjet|\
      Snowshoe|\
      SogouMobileBrowser|\
      Space Bison|\
      SputnikBrowser|\
      Stainless|\
      Sunrise|\
      SunriseBrowser|\
      ThunderBrowse|\
      TinyBrowser|\
      TizenBrowser|\
      ToshibaTP|\
      TungstenBrowser|\
      UP\\.Browser|\
      Valve (?:Client|Steam \\w+)|\
      Vienna|\
      Viera|\
      Vivaldi|\
      WebPilot|\
      WebPirate|\
      WebPositive|\
      Whale|\
      YoloBrowser|\
      Xiino|\
      zdesktop\
      )[/ ]__VERSION_DIGITS__"

  # VmWare Airwatch
  - regex: '(AirWatch Browser) v__VERSION__'

  # Browser without version
  - regex: '(QIHU 360[SE]E|Sunrise|DiigoBrowser)'

  # Chrome needs to come after as it hides a lot of browsers from previous regex
  - regex: '(Chrome)[/ ]__VERSION__'

  - regex: '(Galeon|UP\.Browser)(?:[ /]__VERSION__|)'

  - regex: '(Openwave)(?:/__VERSION__|)'
    family: 'UP.Browser'

  # Dolphin Browser
  # @ref: http://www.dolphin.com
  - regex: '\b(Dolphin)(?: |/|HDCN/|/INT\-)__VERSION__'

  # @note: NexPlayer needs to come after "Dolfin" as part of Samsung Bada UAs
  - regex: '\b(stagefright)/__VERSION_DIGITS__'
    type: 'mediaplayer'
  - regex: '\b(NexPlayer)(?:[ /]?__VERSION__|)'
    type: 'mediaplayer'

  # IE Xbox
  # @ref: http://msdn.microsoft.com/en-us/library/ie/jj883727%28v=vs.85%29.aspx
  - regex: '(MSIE) __VERSION__.{0,100}Xbox[^\-]'
    family: 'IE Xbox'
  # IE Mobile
  - regex: '(IEMobile)[ /]__VERSION__'
    family: 'IE Mobile'
  # desktop mode
  # http://www.anandtech.com/show/3982/windows-phone-7-review
  - regex: '(MSIE) __VERSION__.{0,100}XBLWP7'
    family: 'IE Large Screen'

  #### END MAIN CASES ####

  #### SPECIAL CASES ####
  - regex: '(Obigo|OBIGO|Teleca)(?:InternetBrowser|\-?Browser|)(?:[^\d]*0*(\d{1,10})(?:.(\d{1,10})|)|)'
    family: 'Obigo'

  - regex: '(Maxthon|MyIE2|Uzbl|Shiira)'
    v1: '0'

  - regex: '(PLAYSTATION 3|PlayStation Portable)'
    family: 'NetFront'

  - regex: '(XBMC)/(\d{1,10})\.(\d{1,10})[-\w\s]+(r\d{1,10})'

  - regex: '(ABrowse) (\d{1,10})(?:\.(\d{1,10})|)'

  - regex: '(Acoo Browser)(?: __VERSION__|)'

  - regex: '(BrowseX) \(__VERSION__'

  - regex: '(NCSA[ _]Mosaic)(?:/(\d{1,10})[.-](\d{1,10})(?:[.-]?([a-z]?\d{1,10})|)|)'
    family: 'NCSA Mosaic'

  # Polaris/d.d is above
  - regex: '(POLARIS|Embider)/(\d{1,10})\.(\d{1,10})'
    family: 'Polaris'

  - regex: '(AvantGo) (\d{1,10})\.(\d{1,10})'

  - regex: '(Avant)'
    v1: '1'

  # This is the Tesla Model S (see similar entry in device parsers)
  - regex: '(QtCarBrowser)'
    v1: '1'

  - regex: 'ibrowse|iRAPP'
    regex_flag: 'i'
    group:
      - regex: '^(iBrowser/Mini)(\d{1,10})\.(\d{1,10})'
        family: 'iBrowser Mini'
      - regex: '^(iBrowser|iRAPP)/(\d{1,10})\.(\d{1,10})'
      - regex: '\b(IBrowse)(?:[ /](\d{1,10})\.(\d{1,10})|)'

  # nokia browsers
  # based on: http://www.developer.nokia.com/Community/Wiki/User-Agent_headers_for_Nokia_devices
  - regex: 'Series\d|Nokia|OviBrowser|BrowserNG'
    group:
      - regex: '(NokiaBrowser|BrowserNG)/(\d{1,10})\.__VERSION__'
        family: 'Nokia Browser'
      - regex: 'Symbian.{0,300}(Series60)/5\.0'
        family: 'Nokia Browser'
        v1: '7'
        v2: '0'
      - regex: '(S40OviBrowser)/__VERSION__(?:\.(\d{1,10})|)'
        family: 'Ovi Browser'
      - regex: '(Series60)/(\d{1,10})\.(\d{1,10}).{0,300}AppleWebKit'
        family: 'Nokia OSS Browser'
      - regex: '(Series60)/(\d{1,10})\.(\d{1,10})'
        family: 'Nokia Services (WAP) Browser'
      - regex: '^(Nokia)'
        family: 'Nokia Services (WAP) Browser'
      - regex: '(Series80|Series90)/(\d)\.(\d)'
        family: 'Nokia $1 Browser'

  # BlackBerry devices
  - regex: '(PlayBook).{1,300}RIM Tablet OS __VERSION__'
    family: 'BlackBerry WebKit'
  - regex: '(Black[bB]erry|BB10).{1,300}Version/__VERSION__'
    family: 'BlackBerry WebKit'
  - regex: '(Black[bB]erry)\s?(\d{1,10})'
    family: 'BlackBerry'

  # Palm
  - regex: 'Palm.{0,300}\b(Pre|Blazer|WebPro)\b(?:[ /](\d{1,10})(?:\.(\d{1,10})(?:\.(\d{1,10}[a-z]*)|)|)|)'
    family: 'Palm $1'

  # Links/ Elinks
  - regex: '\b(E?[Ll]inks)(?: \(|\/)__VERSION__'

  - regex: '(QtWeb) Internet Browser/(\d{1,10})\.(\d{1,10})'

  # Phantomjs, should go before Safari
  - regex: '(PhantomJS|CocoonJS)/__VERSION__'
    type: 'headless'

  # AppleWebKit / WebKit Nightly
  - regex: '(AppleWebKit)/(\d{1,10})\.?(\d{1,10}|)\+ .{0,100} Safari'
    family: 'AppleWebKit'

  - regex: '(Callpod Keeper) for Android __VERSION__'
    type: 'app'

  # Browser major_version.minor_version (space instead of slash)
  - regex: '(Android) __VERSION__'

  - regex: '(Odyssey Web Browser); rv:__VERSION__'

  # iOS
  - regex: '(iPod|iPhone|iPad|watchOS)'
    group:
      # @ref http://stackoverflow.com/questions/2143763/
      - regex: '\b(GSA)/__VERSION__'
        family: 'Google App'
      - regex: '\b(bline|DaumApps)/__VERSION__'
        family: '$1'
        type: 'app'
      - regex: '(?:iPod|iPhone|iPad).{1,200}Version/.{1,200}(MXiOS)/__VERSION__'
        family: 'Maxthon Mobile Safari'
      - regex: '(iPod|iPhone|iPad).{1,200}Version/__VERSION_2_DIGITS__.{0,200}[ +]Safari'
        family: 'Mobile Safari'
      - regex: '(?:iPod|iPhone|iPad).{1,200}?\b(AppleNews|News).{1,200}?Version/__VERSION_2_DIGITS__'
        family: 'AppleNews'
        type: 'app'
      - regex: '(?:iPod|iPhone|iPad).{1,200}?\b(Mobicip).{1,200}?Version/__VERSION_2_DIGITS__'
        family: 'AppleNews'
        type: 'app'
      - regex: '(iPod|iPhone|iPad).{1,200}Version/__VERSION_2_DIGITS__'
        family: 'Mobile Safari UI/WKWebView'
        type: 'app'
      - regex: '(iPod|iPhone|iPad);.{0,30}CPU.{0,30}OS[ +]__VERSION_DIGITS_UNDERSCORE__.{0,200}Mobile.{0,30}[ +]Safari'
        family: 'Mobile Safari'
      - regex: '(iPod|iPhone|iPad);.{0,30}CPU.{0,30}OS[ +]__VERSION_DIGITS_UNDERSCORE__.{0,200}Mobile'
        family: 'Mobile Safari UI/WKWebView'
        type: 'app'
      - regex: '(iPod|iPhone|iPad).{0,300}[ +]Safari'
        family: 'Mobile Safari'
      - regex: '(iPod|iPhone|iPad)'
        family: 'Mobile Safari UI/WKWebView'
        type: 'app'
      - regex: 'watchOS.{0,300}(Watch)(\d{1,10}),(\d{1,10})'
        family: 'Apple $1 App'
        type: 'app'

  # Safari
  - regex: '(Version)/__VERSION__.{0,100}Safari/'
    family: 'Safari'
  # Safari didn't provide "Version/d.d.d" prior to 3.0
  - regex: '(Safari)/\d{1,10}'

  - regex: '(OLPC)/Update(\d{1,10})\.(\d{1,10})'
  - regex: '(OLPC)/Update()\.(\d{1,10})'
    v1: '0'

  - regex: '(SEMC\-Browser)/(?:__VERSION__|)'

  - regex: 'Trident(.{0,300})rv:(\d{1,10})\.(\d{1,10})'
    family: 'IE'

  # AFTER THE EDGE CASES ABOVE!
  # AFTER IE11
  # BEFORE all other IE
  - regex: 'rv: ?(\d{1,10})\.(\d{1,10})\).{0,300}(Firefox)/[A-F0-9]{4}'
    family: '$3'
    v1: '$1'
    v2: '$2'
    v3: ''
  - regex: '(Firefox)/(\d{1,10})(?:\.(\d{1,10})(?:\.?(pre|[ab]?\d{1,10}[a-z]*)|)|)'

  # Internet Explorer
  - regex: '(TeomaBar) (\d{1,10})\.0?(\d{1,10})'
  - regex: '(?:MS|)(IE)[ /](\d{1,10})\.(\d{1,10})'

  # AppleWebKit / WebKit Nightly
  - regex: '(AppleWebKit)/__VERSION__'
    family: 'AppleWebKit'

  # ViaFree streaming app https://www.viafree.{dk|se|no}
  - regex: '^(ViaFree|Viafree)-(?:tvOS-|)[A-Z]{2}/__VERSION_DIGITS__'
    family: 'ViaFree'
    type: app

  - regex: '(OC)/__VERSION__\.\d{1,10} \(Skype for Business\)'
    family: 'Skype'

  # headless agents
  - regex: '(Phantom)/V(\d{1,10})\.(\d{1,10})'
    family: 'Phantom Browser'
    type: 'headless'
  - regex: '(?:^|^Mozilla/\d{1,10}\.\d{1,10} (?:\([^\)]+\) |))(Java)[ /]?__VERSION__'
    type: 'headless'
  - regex: "\\b(\
      akka-http|\
      axios|\
      aiohttp|\
      Apache-Http(?:Async|)Client|\
      BitTorrent|\
      curl|\
      fetch libfetch|\
      Ghost|\
      got|\
      Go-http-client|\
      HTMLParser|\
      HTTrack|\
      Jakarta Commons-HttpClient|\
      jupdate|\
      libcurl-agent|\
      libwww-perl|\
      lua-resty-http|\
      lwp-trivial|\
      Microsoft-CryptoAPI|\
      Microsoft SkyDriveSync|\
      node-superagent|\
      okhttp|\
      OpenBSD ftp|\
      PHP|\
      [Pp]ython-[^/]+|\
      PycURL|\
      restify|\
      SophosAgent|\
      SophosUpdateManager|\
      urlgrabber|\
      unirest-(?:java|python|ruby|nodejs|php|net)|\
      (?:\\w+) APT-HTTP|\
      Wget|\
      Zend_Http_Client\
      )\\b(?:[ /]__VERSION__|)"
    type: 'headless'

  # Storage Clients
  - regex: "\\b(\
      ibm-cos-sdk-(?:core|java|js|python)|\
      S3 Browser|\
      S3Gof3r|\
      rusoto|\
      rclone\
      )\\b(?:[ /]__VERSION__|)"
    type: 'storage'

  # Proxy
  - regex: '\b(Hatena-Mobile-Gateway|Privoxy)/__VERSION__'
    type: 'proxy'
  - regex: '\b(Synapse)'
    type: 'proxy'

  # generic catcher for bots
  - regex: '(binlar|lbot|visionutils|WebThumb)[_/]__VERSION__'
    type: 'bot'
  - regex: 'https?://((?:[\w\d-]+\.|)[\w\d-]+\.\w+)'
    type: 'bot'
  - regex: 'Mozilla/[45]\.0 \(compatible;?\)'
    family: compatible
    type: 'bot'

#### Engine ####
engine_parsers:

  # MSIE compatibility modes
  - regex: 'Trident'
    group:
      # MSIE 8 !== Trident/4
      - regex: 'MSIE ([^8])\.\d.{0,300} (Trident)[ /](4)\.(\d{1,10})(?:\.(\d{1,10})|)'
        family: '$2'
        v1: '$3'
        v2: '$4'
        v3: '$5'
        type: 'mode::MSIE $1'
      # MSIE 9 !== Trident/5
      - regex: 'MSIE ([^9])\.\d.{0,300} (Trident)[ /](5)\.(\d{1,10})(?:\.(\d{1,10})|)'
        family: '$2'
        v1: '$3'
        v2: '$4'
        v3: '$5'
        type: 'mode::MSIE $1'
      # MSIE 10 !== Trident/6
      - regex: 'MSIE ((?:(?!10)\d)+)\.\d.{0,300} (Trident)[ /](6)\.(\d{1,10})(?:\.(\d{1,10})|)'
        family: '$2'
        v1: '$3'
        v2: '$4'
        v3: '$5'
        type: 'mode::MSIE $1'
      # MSIE 11 !== Trident/7
      - regex: 'MSIE ((?:(?!11)\d)+)\.\d.{0,300} (Trident)[ /](7)\.(\d{1,10})(?:\.(\d{1,10})|)'
        family: '$2'
        v1: '$3'
        v2: '$4'
        v3: '$5'
        type: 'mode::MSIE $1'

  - regex: '(Trident|Presto)[ /]__VERSION__'

  - regex: 'Opera'
    family: 'Presto'

  # Windows 10 IE version uses "Edge" and "Chrome"
  - regex: '\b(Edge)/(\d{1,10})(?:\.(\d{1,10})|)'
    family: 'EdgeHTML'
  # Edge for Android / iOS
  - regex: '\b(EdgA|EdgiOS)/__VERSION__'
    family: 'EdgeHTML'

  - regex: 'QtWebEngine/__VERSION__'
    family: 'Blink'
    type: 'QtWebEngine'

  - regex: '(Chrome)[/](\d{1,10})\.__VERSION__.{0,300}OPR/\d{1,10}'
    family: 'Blink'
    type: 'Opera'

  - regex: 'SamsungBrowser[/].{0,300}(Chrome)[/]__VERSION__'
    family: 'Blink'
    type: 'Samsung'

  - regex: 'Silk[/].{0,300}(Chrome)[/]__VERSION__'
    family: 'Blink'
    type: 'Silk'

  # https://developer.chrome.com/multidevice/user-agent
  - regex: '(?:; wv\) |)AppleWeb[Kk]it/.{0,300}Version/.{0,300}(Chrome)[/]__VERSION__'
    family: 'Blink'
    type: 'WebView'

  - regex: '(Chrome)[/]__VERSION__'
    family: 'Blink'

  - regex: '(HeadlessChrome)'
    family: 'Blink'

  - regex: '(TDEHTML)/__VERSION__'
    family: 'TDEHTML'

  - regex: '(KHTML|Konqueror)/__VERSION__'
    family: 'KHTML'

  # http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
  - regex: '(Silk)/__VERSION__'
    family: 'Webkit'
    type: 'Silk'

  - regex: 'Web[Kk]it.{0,300}(NokiaBrowser|BrowserNG)/__VERSION__'
    family: 'Webkit'
    type: 'Nokia'

  - regex: '^Mozilla.{0,300}Android\b.{0,300}SAMSUNG.{0,300}(AppleWeb[Kk]it)/?__VERSION__'
    family: 'Webkit'
    type: 'Samsung'

  - regex: 'Android\b.{0,300}(AppleWeb[Kk]it)/?__VERSION__'
    family: 'Webkit'
    type: 'Android'

  - regex: 'DirectFB\b.{0,300}(AppleWeb[Kk]it)/?__VERSION__'
    family: 'Webkit'
    type: 'LG'
  - regex: '(AppleWeb[Kk]it)/?__VERSION__.{0,300}\b(NetCast|LG Browser)'
    family: 'Webkit'
    type: 'LG'

  - regex: 'Smart-?TV\b.{0,300}(AppleWeb[Kk]it)/?__VERSION__'
    family: 'Webkit'
    type: 'Samsung'

  - regex: '(Goanna)/.{0,300}PaleMoon/__VERSION__'

  - regex: '(rv:)(\d{1,10})\.(\d{1,10}[ab]?)\.?([ab]?\d{1,10}[a-z]*|)\.?(\d{1,10}[a-z]*|)[;\)].{0,300} Gecko(?:[ /]|$)'
    family: 'Gecko'

  - regex: '(Gecko)/20\d{6}'

  - regex: '(AppleWeb[Kk]it)(?:/__VERSION__|[ ,]|$)'
    family: 'Webkit'
    type: 'Apple'

  - regex: '(Web[Kk]it)(?:/__VERSION__|[ ,]|$)'
    family: 'Webkit'

  - regex: '(Net[Ff]ront)[ /]?__VERSION__'
    family: 'Netfront'

  - regex: '(UCBrowser)/__VERSION__'

#### OS ####
os_parsers:

  - regex: 'UCWEB|JUC'
    group:
      # UCWEB
      - regex: '^UCWEB.{0,300}; (Adr) (\d{1,10})\.(\d{1,10})(?:[.\-]([a-z0-9]+)|);'
        family: 'Android'
      - regex: '^UCWEB.{0,300}; (iPa?d|iPh) OS __VERSION_OS_UNDERSCORE__;'
        family: 'iOS'
      - regex: '^UCWEB.{0,300}; (wds) __VERSION__;'
        family: 'Windows Phone'
      # JUC
      - regex: '^(JUC).{0,300}; ?U; ?(?:Android|)(\d{1,10})\.(\d{1,10})(?:[\.\-]([a-z0-9]+)|)'
        family: 'Android'

  ##########
  # Chrome OS
  # if version 0.0.0, probably this stuff:
  # http://code.google.com/p/chromium-os/issues/detail?id=11573
  # http://code.google.com/p/chromium-os/issues/detail?id=13790
  ##########
  - regex: 'CrOS|CitrixChromeApp'
    group:
    - regex: '(CrOS) [a-z0-9_]+ __VERSION__'
      family: 'Chrome OS'
    # Citrix Chrome App on Chrome OS
    - regex: '(x86_64|aarch64) __VERSION_DIGITS__.{0,100}Chrome.{0,100}(?:CitrixChromeApp)$'
      family: 'Chrome OS'

  ##########
  # Windows
  # http://en.wikipedia.org/wiki/Windows_NT#Releases
  # possibility of false positive when different marketing names share same NT kernel
  # e.g. windows server 2003 and windows xp
  # lots of ua strings have Windows NT 4.1 !?!?!?!? !?!? !? !????!?! !!! ??? !?!?! ?
  # (very) roughly ordered in terms of frequency of occurence of regex (win xp currently most frequent, etc)
  ##########
  - regex: 'Win|CYGWIN'
    group:
      # @note: Xbox also spoofs NT 6.1/Windows Phone (see http://msdn.microsoft.com/en-us/library/ie/jj883728(v=vs.85).aspx)
      # @note: Xbox spoofs "Xbox LIVE/2.5.1704 CFNetwork/672.0.8 /14.0.0" iPhone App
      - regex: '\b(Xbox)\b(?:(?!Darwin).)*$'
      # ie mobile desktop mode
      # spoofs nt 6.1. must come before windows 7
      - regex: '(XBLWP7)'
        family: 'Windows Phone'

      # @note: These need to come before Windows NT 6.1
      - regex: '(Windows Phone) (?:OS[ /]|)(\d{1,10})\.(\d{1,10})'
      - regex: '(Windows ?Mobile)'
        family: 'Windows Mobile'

      - regex: '(Windows ?CE)'
        family: 'Windows CE'

      - regex: '(Windows NT 6\.4)'
        family: 'Windows 10'
      - regex: '(Windows NT 10\.0|Windows 10\.0)'
        family: 'Windows 10'

      - regex: '(Windows NT 6\.3; ARM;)'
        family: 'Windows RT 8.1'
      - regex: '(Windows NT 6\.3|CYGWIN_NT-6\.3|Windows 8\.1)'
        family: 'Windows 8.1'

      - regex: '(Windows NT 6\.2; ARM;)'
        family: 'Windows RT'
      - regex: '(Windows NT 6\.2|CYGWIN_NT-6\.2|Windows 8)'
        family: 'Windows 8'

      - regex: '(Windows NT 6\.1|CYGWIN_NT-6\.1|Windows 7)'
        family: 'Windows 7'

      - regex: '(Windows NT 6\.0|CYGWIN_NT-6\.0|Windows Vista)'
        family: 'Windows Vista'

      - regex: '(Windows NT 5\.2|CYGWIN_NT-5\.2|Windows Server 2003)'
        family: 'Windows Server 2003'

      - regex: '(Windows NT 5\.1|CYGWIN_NT-5\.1|Windows XP)'
        family: 'Windows XP'

      - regex: '(Windows NT 5\.0|CYGWIN_NT-5\.0|Win ?2000|Windows 2000)'
        family: 'Windows 2000'

      - regex: '(Windows NT 4\.0|CYGWIN_NT-4\.0|Win ?NT|Windows NT)'
        family: 'Windows NT'

      - regex: '(Win 9x 4\.90|CYGWIN_ME-4\.90|Win ?ME|Windows ME)'
        family: 'Windows ME'

      - regex: '(Win ?98|CYGWIN_98-4\.10|Windows 98)'
        family: 'Windows 98'

      - regex: '(Win32|Win ?95|CYGWIN_95-4\.0|Windows[ _]95)'
        family: 'Windows 95'

      - regex: '(Win16|Win ?3\.1|Windows 3\.1)'
        family: 'Windows 3.1'

      - regex: '(Windows) (10)'

      - regex: '(Windows)(?:(?!CFNetwork).)*$'

  - regex: '(?:Ali|)(YunOS|RemixOS)'
    regex_flag: 'i'
    group:
      # YunOS spoofs Android
      - regex: '(Android) __VERSION_OS__.{0,300}(?:Ali|)(YunOS)-'
        regex_flag: 'i'
        family: 'YunOS'
      - regex: '(?:Ali|)(YunOS)[ /\-]__VERSION_OS__'
        regex_flag: 'i'
        family: 'YunOS'
      - regex: '(RemixOS) __VERSION_OS__'

  - regex: Outlook-iOS-Android
    group:
      # Again a MS-special one
      - regex: '(CPU[ +]OS|[iI]Phone[ +]OS|CPU[ +]iPhone)[ +]+(\d{1,10})[_\.](\d{1,10})(?:[_\.](\d{1,10})|).{0,100}Outlook-iOS-Android'
        family: 'iOS'
      - regex: '^Outlook-iOS-Android'
        family: ''

  ##########
  # Android
  ##########
  - regex: '[Aa]ndroid|Build|Linux'
    group:
      - regex: '(Sailfish);'

      - regex: '(Android)[ \-/](\d{1,10})(?:\.(\d{1,10})|)(?:[.\-]([a-z0-9]+)|)'

      - regex: '\((Linux); U; (\d{1,10})\.(\d{1,10})(?:[\.-](\d{1,10}|update1)|);'
        family: 'Android'

      - regex: '(Android) Donut'
        v1: '1'
        v2: '6'
      - regex: '(Android) Eclair'
        v1: '2'
        v2: '1'
      - regex: '(Android) Froyo'
        v1: '2'
        v2: '2'
      - regex: '(Android) Gingerbread'
        v1: '2'
        v2: '3'
      - regex: '(Android) Honeycomb'
        v1: '3'

      # https://source.android.com/source/build-numbers.html
      - regex: 'Build/(LRX22G)'
        family: 'Android'
        v1: '5'
        v2: '0'
        v3: '2'
      - regex: 'Build/(LRX22C)'
        family: 'Android'
        v1: '5'
        v2: '0'
        v3: '1'
      - regex: 'Build/(LRX21)'
        family: 'Android'
        v1: '5'
        v2: '0'
        v3: '0'
      - regex: 'Build/(KTU84Q|KTU84P)'
        family: 'Android'
        v1: '4'
        v2: '4'
        v3: '4'
      - regex: 'Build/(KTU84)'
        family: 'Android'
        v1: '4'
        v2: '4'
        v3: '3'
      - regex: 'Build/(KVT49L|KOT49H)'
        family: 'Android'
        v1: '4'
        v2: '4'
        v3: '2'
      - regex: 'Build/(KOT49)'
        family: 'Android'
        v1: '4'
        v2: '4'
        v3: '1'
      - regex: 'Build/(KRT16)'
        family: 'Android'
        v1: '4'
        v2: '4'
      - regex: 'Build/(JLS36I)'
        family: 'Android'
        v1: '4'
        v2: '3'
        v3: '1'
      - regex: 'Build/(JLS36|JSS15|JSR78|JWR66)'
        family: 'Android'
        v1: '4'
        v2: '3'
      - regex: 'Build/(JDQ39)'
        family: 'Android'
        v1: '4'
        v2: '2'
        v3: '2'
      - regex: 'Build/(JOP40)'
        family: 'Android'
        v1: '4'
        v2: '2'
        v3: '1'
      - regex: 'Build/(JZO54)'
        family: 'Android'
        v1: '4'
        v2: '1'
        v3: '2'
      - regex: 'Build/(JRO03)'
        family: 'Android'
        v1: '4'
        v2: '1'
        v3: '1'
      - regex: 'Build/(IMM76)'
        family: 'Android'
        v1: '4'
        v2: '0'
        v3: '4'
      - regex: 'Build/(IML77|IML74)'
        family: 'Android'
        v1: '4'
        v2: '0'
        v3: '3'
      - regex: 'Build/(ICL53)'
        family: 'Android'
        v1: '4'
        v2: '0'
        v3: '2'
      - regex: 'Build/(ITL41)'
        family: 'Android'
        v1: '4'
        v2: '0'
        v3: '1'
      - regex: 'Build/(HTK55|HTK75)'
        family: 'Android'
        v1: '3'
        v2: '2'
        v3: '1'
      - regex: 'Build/(GWK74|GRWK74)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '7'
      - regex: 'Build/(GINGERBREAD|GRK39)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '6'
      - regex: 'Build/(GRJ90)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '5'
      - regex: 'Build/(GRJ22|GRJ06D)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '4'
      - regex: 'Build/(GRJ22|GRJ06D)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '3'
      - regex: 'Build/(GRI54|GRI40)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '2'
      - regex: 'Build/(GRH78C)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '1'
      - regex: 'Build/(GRH78)'
        family: 'Android'
        v1: '2'
        v2: '3'
        v3: '1'
      - regex: 'Build/(GRH55)'
        family: 'Android'
        v1: '2'
        v2: '3'
      - regex: 'Build/(FRK76C|FRK76)'
        family: 'Android'
        v1: '2'
        v2: '2'
        v3: '3'
      - regex: 'Build/(FRG83G)'
        family: 'Android'
        v1: '2'
        v2: '2'
        v3: '2'
      - regex: 'Build/(FRG83)'
        family: 'Android'
        v1: '2'
        v2: '2'
        v3: '1'
      - regex: 'Build/(FROYO|FRG22D|FRG01B|FRF91|FRF85B)'
        family: 'Android'
        v1: '2'
        v2: '2'
      - regex: 'Build/(ECLAIR|EPF|ESE|EPE|ERE|ERD|ESD)'
        family: 'Android'
        v1: '2'
        v2: '1'
      - regex: 'Build/(CUPCAKE)'
        family: 'Android'
        v1: '1'
        v2: '5'
      - regex: '(android)\s(?:mobile\/)(\d{1,10})(?:\.?(\d{1,10})|)(?:\.?(\d{1,10})|)'
        family: 'Android'

  # Raspbian
  - regex: '(Raspbian)[ \-/](\d{1,10})\.(\d{1,10})(?:[.-]([a-z0-9]+)|)'

  ##########
  # Kindle Android
  ##########
  - regex: '(Silk-Accelerated=[a-z]{4,5})'
    family: 'Android'

  # AmigaOS
  - regex: '(AmigaO[Ss]|AmigaVoyager|Amiga-AWeb)(?: ?__VERSION__|)'
    family: 'AmigaOS'

  ##########
  # Tizen OS from Samsung
  ##########
  - regex: '\b(Tizen)(?:[ /]__VERSION__|)'

  ##########
  # webOS
  # @note needs to come before Mac OS
  ##########
  - regex: 'hpwOS|webOS|Web0S'
    group:
      # web0s LG TV
      - regex: '(webOS\.TV)-2016'
        family: 'webOS TV'
        v1: '3'
      - regex: '(Web0S).{0,300}WEBOS__VERSION__|Web0S'
        family: 'webOS TV'
      # Palm webOS
      - regex: '(hpw|web)OS[ /]__VERSION__'
        family: 'webOS'
      - regex: '(webOS)'

  ##########
  # Mac OS
  # @ref: https://en.wikipedia.org/wiki/Mac_OS_X#Versions
  # @ref: https://en.wikipedia.org/wiki/MacOS_Sierra
  # @ref: https://en.wikipedia.org/wiki/Darwin_(operating_system)#Release_history
  # @ref: https://github.com/PureDarwin/PureDarwin/wiki/Versions
  # @ref: http://user-agents.me/cfnetwork-version-list
  ##########
  - regex: 'Mac|Darwin|CFNetwork'
    group:
      - regex: '((?:Mac[ +]?|; )OS[ +]X)[ /+](?:Version |)(?:__VERSION_OS_UNDERSCORE__|Mach-O)'
        family: 'Mac OS X'
      # macOS high Sierra https://en.wikipedia.org/wiki/MacOS_High_Sierra
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.4\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '13'
        v3: '3'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.3\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '13'
        v3: '2'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.2\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '13'
        v3: '1'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.\d.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '13'
      # macOS Sierra https://en.wikipedia.org/wiki/MacOS_Sierra
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.7\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '6'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.6\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '5'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.5\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '4'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.4\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '3'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.3\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '2'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.1\.\d{1,10}.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
        v3: '1'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.\d.{0,100}\(x86_64\)'
        family: 'macOS'
        v1: '10'
        v2: '12'
      # El Capitan
      - regex: 'CFNetwork/760\.\d.{0,100} Darwin/15\.(\d)'
        family: 'Mac OS X'
        v1: '10'
        v2: '11'
        v3: '$1'
      - regex: 'CFNetwork/760\.(\d)'
        family: 'Mac OS X'
        v1: '10'
        v2: '11'
        v3: '$1'
      - regex: ' Darwin/15\..{0,100}\(x86_64\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '11'
      # Yosemite
      - regex: 'CFNetwork/720\.(\d).{0,100} Darwin/14\.\d{1,10}'
        family: 'Mac OS X'
        v1: '10'
        v2: '10'
        v3: '$1'
      - regex: ' Darwin/14\.0\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '10'
      - regex: ' Darwin/14\.1\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '10'
        v3: '2'
      - regex: ' Darwin/14\.(\d)\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '10'
        v3: '$1'
      # Mavericks
      - regex: ' (Dar)(win)/(13)\.0\.2.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '9'
        v3: '1'
      - regex: ' (Dar)(win)/(13)\.1\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '9'
        v3: '2'
      - regex: ' (Dar)(win)/(13)\.2\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '9'
        v3: '3'
      - regex: ' (Dar)(win)/(13)\.3\.0.{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '9'
        v3: '4'
      - regex: ' (Dar)(win)/(13).(\d{1,10}).{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '9'
      # Mountain Lion
      - regex: 'CFNetwork/596\.(\d).{0,100} Darwin/12'
        family: 'Mac OS X'
        v1: '10'
        v2: '8'
        v3: '$1'
      - regex: ' (Dar)(win)/(12).(\d{1,10}).{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '8'
      # Lion
      - regex: 'CFNetwork/520\.(\d).{0,100} Darwin/11'
        family: 'Mac OS X'
        v1: '10'
        v2: '7'
        v3: '$1'
      - regex: ' (Dar)(win)/(11).(\d{1,10}).{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '7'
      # Snow Leopard
      - regex: ' (Dar)(win)/(10).(\d{1,10}).{0,100}\((?:i386|x86_64)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '6'
      # Leopard
      - regex: ' (Dar)(win)/(9).(\d{1,10}).{0,100}\((?:i386|x86_64|Power Macintosh)\)'
        family: 'Mac OS X'
        v1: '10'
        v2: '5'
      # builds before tiger don't seem to specify version?

      # ios devices spoof (mac os x), so including intel/ppc prefixes
      - regex: '(?:PPC|Intel) (Mac OS X)'

      # IE on Mac doesn't specify version number
      - regex: 'Mac_PowerPC'
        family: 'Mac OS'

      - regex: '(Macintosh|Mac_68K)'
        family: 'Mac OS'

  ##########
  # iOS
  # http://en.wikipedia.org/wiki/IOS_version_history
  ##########
  - regex: 'CPU OS|iPhone|iPad|iPod|iOS|Apple\s?TV|CFNetwork|tvOS|Darwin|watchOS'
    group:
      # Apple TV
      - regex: '(Apple\s?TV).{0,300} CPU OS (\d{1,10})[_\.](\d{1,10})(?:[_\.](\d{1,10})|)'
        family: 'ATV OS X'
      - regex: '(Apple\s?TV)[\d,]*(?:/__VERSION__|)'
        family: 'ATV OS X'

      # General iOS
      - regex: '(CPU[ +]OS|[iI]Phone[ +]OS|CPU[ +]iPhone)[ +]+(\d{1,10})[_\.](\d{1,10})(?:[_\.](\d{1,10})|)'
        family: 'iOS'

      # Special Cases - CPU iPhone OS 811
      - regex: '(CPU[ ]OS|[iI]Phone[ ]OS|CPU[ ]iPhone)[ ]+(\d)[\d](\d{1,10})'
        family: 'iOS'

      # remaining cases are mostly only opera uas, so catch opera as to not catch iphone spoofs
      - regex: '(iPhone|iPad|iPod); Opera'
        family: 'iOS'

      # few more stragglers
      - regex: '(iPhone|iPad|iPod).{0,100}Mac OS X.{0,100}Version/__VERSION__'
        family: 'iOS'
      # Apple Watch
      - regex: '(watchOS)/__VERSION_OS__'
        family: 'watchOS'
      ##########
      # CFNetwork/Darwin - The specific CFNetwork or Darwin version determines whether the os maps to Mac OS, or iOS, or just Darwin.
      # @ref: https://en.wikipedia.org/wiki/Darwin_(operating_system)#Release_history
      # @ref: http://user-agents.me/cfnetwork-version-list
      ##########
      - regex: 'CFNetwork/9.{0,100} Darwin/18\.0\.\d{1,10}'
        family: 'iOS'
        v1: '12'
        v2: '0'
      - regex: 'CFNetwork/9.{0,100} Darwin/(18)\.\d{1,10}'
        family: 'iOS'
        v1: '12'
      - regex: 'CFNetwork/9.{0,100} Darwin/17\.7\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '4'
        v3: '1'
      - regex: 'CFNetwork/9.{0,100} Darwin/17\.6\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '4'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.5\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '3'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.4\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '2'
        v3: '6'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.3\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '2'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.2\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '1'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.0\.\d{1,10}'
        family: 'iOS'
        v1: '11'
        v2: '0'
      - regex: 'CFNetwork/8.{0,100} Darwin/17\.(\d)'
        family: 'iOS'
        v1: '11'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.7\.\d{1,10}'
        family: 'iOS'
        v1: '10'
        v2: '3'
        v3: '3'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.6\.\d{1,10}'
        family: 'iOS'
        v1: '10'
        v2: '3'
        v3: '2'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.5\.\d{1,10}'
        family: 'iOS'
        v1: '10'
        v2: '3'
      - regex: 'CFNetwork/8.{0,100} Darwin/16\.'
        family: 'iOS'
        v1: '10'
        v2: '3'
      - regex: 'CFNetwork/808\.3 Darwin/16\.3\.\d{1,10}'
        family: 'iOS'
        v1: '10'
        v2: '2'
        v3: '1'
      - regex: 'CFNetwork/(?:790\.\d).{0,100} Darwin/16\.'
        family: 'iOS'
        v1: '10'
        v2: '0'
      - regex: 'CFNetwork/7.{0,100} Darwin/15\.6\.\d{1,10}'
        family: 'iOS'
        v1: '9'
        v2: '3'
        v3: '5'
      - regex: 'CFNetwork/7.{0,100} Darwin/15\.5\.\d{1,10}'
        family: 'iOS'
        v1: '9'
        v2: '3'
        v3: '2'
      - regex: 'CFNetwork/7.{0,100} Darwin/15\.4\.\d{1,10}'
        family: 'iOS'
        v1: '9'
        v2: '3'
        v3: '1'
      - regex: 'CFNetwork/758\.(\d)'
        family: 'iOS'
        v1: '9'
        v2: '$1'
      - regex: 'CFNetwork/711\.(\d).{0,100} Darwin/14\.'
        family: 'iOS'
        v1: '8'
        v2: '$1'
      - regex: '(CFNetwork)/709\.1'
        family: 'iOS'
        v1: '8'
        v2: '0.b5'
      - regex: '(CFNetwork)/6(7)2\.(0)\.(?:2|8)'
        family: 'iOS'
      - regex: '(CF)(Network)/6(7)(2)\.1\.15'
        family: 'iOS'
        v1: '7'
        v2: '1'
      - regex: '(CFNetwork)/6(7)2\.(1)\.(1)4'
        family: 'iOS'
      - regex: '(CFNetwork)/6(7)2\.(1)\.13'
        family: 'iOS'
      - regex: '(CFNetwork)/(6)09\.(1)\.4'
        family: 'iOS'
      - regex: '(CFNetwork)/(6)(0)9'
        family: 'iOS'
      - regex: '(CFNetwork)/(5)48\.(0)\.4'
        family: 'iOS'
        v3: '1'
      - regex: '(CFNetwork)/(5)48\.(\d)'
        family: 'iOS'
      - regex: '(CFNetwork)/(4)85\.1(3)\.9'
        family: 'iOS'

      - regex: 'CFNetwork/7.{0,100} Darwin/(15)\.\d{1,10}'
        family: 'iOS'
        vi: '9'
      - regex: 'CFNetwork/7.{0,100} Darwin/(14)\.\d{1,10}'
        family: 'iOS'
        v1: '8'
      - regex: 'CFNetwork/6.{0,100} Darwin/(14)\.\d{1,10}'
        family: 'iOS'
        v1: '7'
      - regex: 'CFNetwork/.{0,100} Darwin/(13)\.\d{1,10}'
        family: 'iOS'
        v1: '6'
      - regex: 'CFNetwork/.{0,100} Darwin/(11)\.\d{1,10}'
        family: 'iOS'
        v1: '5'
      - regex: 'CFNetwork/.{0,100} Darwin/(10)\.\d{1,10}'
        family: 'iOS'
        v1: '4'
      - regex: 'CFNetwork/.{0,100} Darwin/(9)\.\d{1,10}'
        family: 'iOS'
        v1: '1'

      # iOS Apps
      - regex: '\b(iOS[ /]|iOS; |iPhone(?:/| v|[ _]OS[/,]|; | OS : |\d,\d/|\d,\d; )|iPad/)(\d{1,2})[_\.](\d{1,2})(?:[_\.](\d{1,10})|)'
        family: 'iOS'

      - regex: '\((iPad|iPod|iPhone); '
        family: 'iOS'

      - regex: '\((iOS); '

      ##########
      # Apple TV
      ##########
      - regex: '(tvOS)[/ ]__VERSION__'
        family: 'tvOS'

      - regex: '(Darwin)/__VERSION__'

  - regex: '(Mac OS X)'

  - regex: '(CrKey)(?:[/]__VERSION__|)'
    family: 'Chromecast'

  ##########
  # Symbian + Symbian OS
  # http://en.wikipedia.org/wiki/History_of_Symbian
  ##########
  - regex: 'Symbian|Series|MeeGo|S60'
    group:
      - regex: '(Symbian[Oo][Ss])[/ ]__VERSION__'
        family: 'Symbian OS'
      - regex: '(Symbian/3).{1,300}NokiaBrowser/7\.3'
        family: 'Symbian^3 Anna'
      - regex: '(Symbian/3).{1,300}NokiaBrowser/7\.4'
        family: 'Symbian^3 Belle'
      - regex: '(Symbian/3)'
        family: 'Symbian^3'
      - regex: '\b(Series 60|Series60|SymbOS|S60Version|S60V\d|S60\b)'
        family: 'Symbian OS'
      - regex: '(MeeGo)'
      - regex: 'Symbian [Oo][Ss]'
        family: 'Symbian OS'
      - regex: 'Series40[;/]'
        family: 'Nokia Series 40'
      - regex: 'Series30Plus;'
        family: 'Nokia Series 30 Plus'

  ##########
  # BlackBerry devices
  ##########
  - regex: 'BB10|BlackBerry|Rim'
    regex_flag: 'i'
    group:
      - regex: '(BB10);.{1,300}Version/__VERSION__'
        family: 'BlackBerry OS'
      - regex: '(Black[Bb]erry)[0-9a-z]+/__VERSION_OS__'
        family: 'BlackBerry OS'
      - regex: 'Opera.{0,300}(Black[Bb]erry)'
        family: 'BlackBerry OS'
      - regex: '(Black[Bb]erry).{1,300}Version/__VERSION_OS__'
        family: 'BlackBerry OS'
      - regex: '(RIM Tablet OS) __VERSION__'
        family: 'BlackBerry Tablet OS'
      - regex: '(Play[Bb]ook)'
        family: 'BlackBerry Tablet OS'
      - regex: '(Black[Bb]erry|\(BB10;)'
        family: 'BlackBerry OS'

  ##########
  # Firefox OS/ KaiOS
  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Gecko_user_agent_string_reference
  ##########

  - regex: '(\((Mobile|Tablet);.{1,300}Firefox|KaiOS\/|Kai\/)'
    regex_flag: 'i'
    group:
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/18\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '1'
        v2: '0'
        v3: '1'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/18\.1 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '1'
        v2: '1'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/26\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '1'
        v2: '2'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/28\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '1'
        v2: '3'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/30\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '1'
        v2: '4'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/32\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '2'
        v2: '0'
      - regex: '\((?:Mobile|Tablet);.{1,200}Gecko/34\.0 Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'
        v1: '2'
        v2: '1'
      # KaiOS
      - regex: '(Kai|KaiOS|KAIOS)/__VERSION_2_DIGITS__'
        family: 'KaiOS'
      # general matcher
      - regex: '\((Mobile|Tablet);.{1,300}Firefox/\d{1,10}\.\d{1,10}'
        family: 'Firefox OS'

  ##########
  # BREW
  # yes, Brew is lower-cased for Brew MP
  ##########
  - regex: 'BREW|BMP|Brew'
    group:
      - regex: '\b(BREW|Brew)[ /]__VERSION__'
      - regex: '(BREW);'
      - regex: '(Brew MP|BMP)[ /]__VERSION__'
        family: 'Brew MP'
      - regex: 'BMP;'
        family: 'Brew MP'

  ##########
  # Google TV
  ##########
  - regex: '(GoogleTV)(?: __VERSION__|/[\da-z]+)'

  - regex: '(WebTV)/(\d{1,10})\.(\d{1,10})'

  ##########
  # Misc mobile
  ##########
  - regex: '(Palm ?OS)'
    family: 'PalmOS'
  - regex: 'Xiino(?:.{0,300}v\. (\d{1,10}[\.\d]+)|)'
    family: 'PalmOS'
  - regex: '(VRE);'

  ##########
  # HbbTV vendors
  ##########
  - regex: 'HbbTV'
    group:
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10} \( ;(LG)E ;NetCast 4\.0'
        v1: '2013'
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10} \( ;(LG)E ;NetCast 3\.0'
        v1: '2012'
      - regex: 'HbbTV/1\.1\.1 \(;;;;;\) Maple_2011'
        family: 'Samsung'
        v1: '2011'
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10} \(;(Samsung);SmartTV([0-9]{4});.{0,300}FXPDEUC'
        v2: 'UE40F7000'
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10} \(;(Samsung);SmartTV([0-9]{4});.{0,300}MST12DEUC'
        v2: 'UE32F4500'
      - regex: 'HbbTV/1\.1\.1 \(; (Philips);.{0,300}NETTV/4'
        v1: '2013'
      - regex: 'HbbTV/1\.1\.1 \(; (Philips);.{0,300}NETTV/3'
        v1: '2012'
      - regex: 'HbbTV/1\.1\.1 \(; (Philips);.{0,300}NETTV/2'
        v1: '2011'
      # the HbbTV emulator developers use HbbTV/1.1.1 (;;;;;) firetv-firefox-plugin 1.1.20
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10}.{0,100}(firetv)-firefox-plugin (\d{1,10})\.(\d{1,10})\.(\d{1,10})'
        family: 'FireHbbTV'
      # generic HbbTV, hoping to catch manufacturer name (always after 2nd comma) and the first string that looks like a 2011-2019 year
      - regex: 'HbbTV/\d{1,10}\.\d{1,10}\.\d{1,10} \(.{0,100}; ?([a-zA-Z]+) ?;.{0,100}(201[1-9]).{0,30}\)'
  # web0s LG TV
  - regex: '(webOS\.TV)-(\d{1,10})'
    family: 'webOS TV'
  - regex: '(Web0S)'
    family: 'webOS TV'
  # Other OS
  - regex: '\b(Sailfish|Haiku|BeOS)\b'

  # RISC OS
  - regex: '(RISC OS)(?:-NC|)(?:[ /]__VERSION__|)'

  # Gaming Console
  - regex: '(Nintendo Wii)'
  - regex: '(Xbox|KIN\.(?:One|Two))'
    name: 'Xbox'
    v1: '360'

  - regex: 'PlayStation (\d{1,10})'
    regex_flag: 'i'
    family: 'Playstation $1'
  # Mobile Gaming Console
  - regex: '(Nitro|Nintendo) ([3]?DS[i]?|Switch)'
    family: 'Nintendo Mobile'
  - regex: 'PlayStation (Portable|Vita)'
    family: 'PlayStation $1'

  ##########
  # Linux distros and others
  ##########
  - regex: '(Fedora|Ubuntu|Red Hat|(?:Free|Open|Net|\b)BSD|[KLX]?ubuntu|Arch ?Linux|Bada|CentOS|Debian|Fedora|Gentoo|HopenOS|Kindle|Knoppix|Mageia|Mandriva|Mint|openSUSE|PCLinuxOS|Puppy|Sabayon|Slackware|SUSE|BackTrack|SunOS|Solaris|AIX|HP-UX|DragonFly|Syllable|IRIX)\b(?:(?: Enterprise|) Linux|)(?:[ /\-]__VERSION_OS__|)'

  - regex: 'OSF1(?:[/ ]?v?__VERSION__|)'
    family: 'OSF1'

  # just os
  - regex: '(Windows|Android|WeTab|Maemo|\bOS/2\b|WinGogi|GOGI)'

  # Gentoo Linux + Kernel Version
  - regex: '(Linux)[ /]__VERSION__.{0,300}gentoo'
    family: 'Gentoo'

  # Linux + Kernel Version
  - regex: '(Linux)(?:[ /]__VERSION__|)'
  - regex: 'redhat-linux-gnu'
    family: 'Red Hat'
  - regex: '(X11;|linux-gnu)'
    family: 'Linux'

#### Device ####
device_parsers:

  ######################################################################
  # Android parsers
  #
  # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
  ######################################################################
  - regex: '[Aa]ndroid| Build| Adr |JUC|\bHTC|Linux|Archos'
    group:
      - regex: ' Safari'
        preset: true
        type: 'tablet'
      - regex: ' Mobile Safari'
        preset: true
        type: 'smartphone'

      #########
      # WebBrowser for SmartWatch
      # @ref: https://play.google.com/store/apps/details?id=se.vaggan.webbrowser&hl=en
      #########
      - regex: '\bSmartWatch {0,2}\( {0,2}([^;]+) {0,2}; {0,2}([^;]+) {0,2};'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
        type: 'watch'

      # Android Application
      - regex: 'Android Application'
        group:
          - regex: 'Android Application[^\-]+ - (Sony) ?(Ericsson|) (.{1,300}) \w+ - '
            device: '$1 $2'
            brand: '$1$2'
            model: '$3'
          - regex: 'Android Application[^\-]+ - (?:HTC|HUAWEI|LGE|LENOVO|MEDION|TCT) (HTC|HUAWEI|LG|LENOVO|MEDION|ALCATEL)[ _\-](.{1,300}) \w+ - '
            regex_flag: 'i'
            device: '$1 $2'
            brand: '$1'
            model: '$2'
          - regex: 'Android Application[^\-]+ - ([^ ]+) (.{1,300}) \w+ - '
            device: '$1 $2'
            brand: '$1'
            model: '$2'

      #########
      # Huawei
      # @ref: http://www.huaweidevice.com
      # @note: Needs to be before HTC due to Desire HD Build on U8815
      #########
      - regex: 'huawei|[uc]\d{4}|ideos|ascend|honor|m8\d{2}|s7|H60-L'
        regex_flag: 'i'
        group:
          - regex: '; {0,2}(HONOR |)([^;]{1,50}) Build/(Honor|HONOR)'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}(HUAWEI |Huawei-|)([UY][^;/]+) Build/(?:Huawei|HUAWEI)([UY][^\);]+)\)'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}([^;/]{1,50}) Build[/ ]Huawei(MT1-U06|[A-Z]{1,50}\d{1,10}[^\);]{1,50})[^\);]{0,50}\)'
            device: '$1'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}(S7|M860|H60-L\d{1,10}|Honor|Honor .{1,300}?) Build[ /]'
            device: '$1'
            brand: 'Huawei'
            model: '$1'
          - regex: '; {0,2}((?:HUAWEI|Huawei)[ \-]?)(MediaPad) Build'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}((?:HUAWEI[ _]?|Huawei[ _]|)Ascend[ _])([^;/]+) Build'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}((?:HUAWEI|Huawei)[ _\-]?)((?:G700-|MT-)[^;/]+) Build'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}((?:HUAWEI|Huawei)[ _\-]?)(.{1,300}?)(?: Build|[;)])'
            device: '$1$2'
            brand: 'Huawei'
            model: '$2'
          - regex: '; {0,2}(MediaPad[^;]+|SpringBoard) Build/Huawei'
            device: '$1'
            brand: 'Huawei'
            model: '$1'
          - regex: '; {0,2}([^;]+);? Build/(?:Huawei|HUAWEI)'
            device: '$1'
            brand: 'Huawei'
            model: '$1'
          - regex: '; {0,2}([Uu])([89]\d{3}) Build'
            device: '$1$2'
            brand: 'Huawei'
            model: 'U$2'
          - regex: '; {0,2}(Ideos|IDEOS|HONOR) ([^;/]+\s*|\s*)Build'
            device: 'Huawei $1 $2'
            brand: 'Huawei'
            model: '$1 $2'

      - regex: '; {0,2}(?:[^;]{1,50}) Build/(Orange[^\s\)]+)'
        device: 'Huawei $1'
        brand: 'Huawei'
        model: '$1'
      - regex: '; {0,2}(Orange Daytona|Pulse|Pulse Mini|Vodafone 858|C8500|C8600|C8650|C8660|MEDIA PAD|NEM-L51|Nexus 6P|CHC-U03|RBM2|H30-U10|P8)(?: Build|[;)])'
        device: 'Huawei $1'
        brand: 'Huawei'
        model: '$1'

      #########
      # Samsung Android Devices
      # @ref: http://www.samsung.com/us/mobile/cell-phones/all-products
      #########
      - regex: 'samsung|behold|ek-|galaxy|gt-|nexus|sch-|scl|sgh-|shv-|shw-|sm-|sph-|yp-'
        regex_flag: 'i'
        group:
          - regex: '; {0,2}(SAMSUNG |Samsung |)((?:Galaxy (?:Note II|S\d)|GT-I9082|GT-I9205|GT-N7\d{3}|SM-N9005)[^;/]*)\/?[^;/]* Build/'
            device: '$1$2'
            brand: 'Samsung'
            model: '$2'
          - regex: '; {0,2}(Google |)(Nexus [Ss](?: 4G|)) Build/'
            device: '$1$2'
            brand: 'Samsung'
            model: '$2'
          - regex: '; {0,2}(SAMSUNG |Samsung )([^\/]*)\/[^ ]* Build/'
            device: '$1$2'
            brand: 'Samsung'
            model: '$2'
          - regex: '; {0,2}(Galaxy(?: Ace| Nexus| ACE| S ?II+|Nexus S| with MCR 1\.2| Mini Plus 4G|)) Build/'
            device: '$1'
            brand: 'Samsung'
            model: '$1'
          - regex: '; {0,2}(?:SAMSUNG |)(?:SAMSUNG |)(?:SAMSUNG[ _\-]|)(SAMSUNG[ _\-])([^;/]+) Build'
            device: '$1$2'
            brand: 'Samsung'
            model: '$2'
          - regex: '; {0,2}(SAMSUNG-|)(GT\-[BINPS]\d{4}[^\/]*)(\/[^ ]*) Build'
            device: '$1$2$3'
            brand: 'Samsung'
            model: '$2'
          - regex: '(?:; {0,2}|^)((?:GT\-[BIiNPS]\d{4}|I9\d{2}0[A-Za-z\+]?\b)[^;/\)]*?)(?:Build|Linux|MIUI|[;/\)])'
            device: '$1'
            brand: 'Samsung'
            model: '$1'
          - regex: '; (SAMSUNG-)([A-Za-z0-9\-]+).{0,300} Build/'
            device: '$1$2'
            brand: 'Samsung'
            model: '$2'
          - regex: '; {0,2}((?:SCH|SGH|SHV|SHW|SPH|SC|SM)\-[A-Za-z0-9 ]+)(/?[^ ]*|) Build'
            device: '$1'
            brand: 'Samsung'
            model: '$1'
          - regex: ' ((?:SCH)\-[A-Za-z0-9 ]+)(/?[^ ]*|) Build'
            device: '$1'
            brand: 'Samsung'
            model: '$1'
          - regex: '; {0,2}(Behold ?(?:2|II)|YP\-G[^;/]+|SCL21|I9300) Build'
            device: 'Samsung $1'
            brand: 'Samsung'
            model: '$1'
          - regex: '; {0,2}(EK-GC\d{3}) Build'
            device: 'Samsung $1'
            brand: 'Samsung'
            model: '$1'
            type: 'camera'

      #########
      # 3Q
      # @ref: http://www.3q-int.com/
      # @models: xl65 , s-4
      #########
      - regex: '; {0,2}(AC07\d{2}[A-Z]|BC9710AM|EL72B|ER71B|LC(?:07|08|09|10)\d{2}[A-Z]?|MT(?:07|08|09|10|78)\d{2}[A-Z]?|OC1020A|QS(?:07|08|10|97)\d{2}[A-Z]|RC(?:07|08|10|13|78|97)\d{2}[A-Z]|TS(?:08|10)\d{2}[A-Z]|VM(?:07|10)\d{2}[A-Z]) +Build/'
        device: '3Q $1'
        brand: '3Q'
        model: '$1'
      - regex: '; {0,2}(?:3Q_)([^;/]+) +Build'
        device: '3Q $1'
        brand: '3Q'
        model: '$1'

      #########
      # 4Good
      # @ref: http://www.??
      #########
      - regex: '; {0,2}(Light_AT200|T700i_3G) +Build'
        device: '4Good $1'
        brand: '4Good'
        model: '$1'
        type: 'tablet'

      #########
      # Acer
      # @ref: http://us.acer.com/ac/en/US/content/group/tablets
      #########
      - regex: 'acer|[abesvwz]\d{2,3}|a1-|b1-|liquid|slider'
        regex_flag: 'i'
        group:
          - regex: 'Android [34].{0,300}; {0,2}(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700(?: Lite| 3G|)|A701|B1-A71|A1-\d{3}(?:F?HD|)|A3-A\d{2}(?:F?HD|)|[bB]1-\d{3}(?:F?HD|)) Build'
            device: '$1'
            brand: 'Acer'
            model: '$1'
            type: 'tablet'
          - regex: '; {0,2}([A-Z]\d{3}) Build.{0,300}Acer'
            device: '$1'
            brand: 'Acer'
            model: '$1'
          - regex: 'Android [34].{0,300}; {0,2}(V360|V370|W500|W500P|W501|W501P|W510|W511|W700|Slider SL101|DA22[^;/]+) Build'
            device: '$1'
            brand: 'Acer'
            model: '$1'
          - regex: '(Acer)(?:[ _-]|\/acer; |)([^;\)]+)(?: Build|;)'
            device: '$1 $2'
            brand: 'Acer'
            model: '$2'
          - regex: '; {0,2}Acer (Iconia Tab) ([^;/]+) Build'
            device: '$2'
            brand: 'Acer'
            model: '$2'
            type: 'tablet'
          - regex: '; {0,2}(DA241HL|Z1[123456]0|Z200|Z410|Z500|Z82[0-9]|E3[28]0[^;/]*?|E39|S5[012]0|S5[56]|Iconia A\d{1,10})__BUILD__'
            device: '$1'
            brand: 'Acer'
            model: '$1'
          - regex: '; {0,2}(Liquid[^;/]*?) Build/'
            device: '$1'
            brand: 'Acer'
            model: '$1'
          - regex: '; {0,2}(Acer |ACER )([^;/]+) Build'
            device: '$1$2'
            brand: 'Acer'
            model: '$2'

      #########
      # Accent
      # @ref
      #########
      - regex: '(TOUAREG8_3G)(?: Build|\))'
        device: '$1'
        brand: 'Accent'
        model: '$1'


      #########
      # Adspec
      # @ref
      #########
      - regex: '(AdTab 7 Lite)(?: Build|\))'
        device: '$1'
        brand: 'Adspec'
        model: '$1'

      #########
      # Advan
      # @ref: http://www.advandigital.com/
      #########
      - regex: '(ADVAN)[ _]([^\s\)_]+)'
        device: '$1$2'
        brand: 'Advan'
        model: '$2'
      - regex: '(T1X Plus)(?: Build|\))'
        device: '$1'
        brand: 'Advan'
        model: '$1'

      #########
      # Advent
      # @ref: https://en.wikipedia.org/wiki/Advent_Vega
      # @note: VegaBean and VegaComb (names derived from jellybean, honeycomb) are
      #   custom ROM builds for Vega
      #########
      - regex: '; {0,2}(Advent |)(Vega(?:Bean|Comb|)).{0,300} Build'
        device: '$1$2'
        brand: 'Advent'
        model: '$2'

      #########
      # Ainol
      # @ref: http://www.ainol.com/plugin.php?identifier=ainol&module=product
      #########
      - regex: '; {0,2}(Ainol |)((?:NOVO|[Nn]ovo)[^;/]+) Build'
        device: '$1$2'
        brand: 'Ainol'
        model: '$2'
      - regex: '(Numy[ _].{0,300}?|Aurora-II)(?: Build|\))'
        device: '$1'
        brand: 'Ainol'
        model: '$1'

      #########
      # Airis
      # @ref: http://airis.es/Tienda/Default.aspx?idG=001
      #########
      - regex: '; {0,2}AIRIS[ _\-]?([^/;\)]+) {0,2}(?:;|\)|Build)'
        regex_flag: 'i'
        device: '$1'
        brand: 'Airis'
        model: '$1'
      - regex: '; {0,2}(OnePAD[^;/]+) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Airis'
        model: '$1'

      #########
      # Airpad
      # @ref: ??
      #########
      - regex: '; {0,2}Airpad[ \-]([^;/]+) Build'
        device: 'Airpad $1'
        brand: 'Airpad'
        model: '$1'

      #########
      # Alcatel - TCT
      # @ref: http://www.alcatelonetouch.com/global-en/products/smartphones.html
      #########
      - regex: '; {0,2}(one ?touch) (EVO7|T10|T20) Build'
        device: 'Alcatel One Touch $2'
        brand: 'Alcatel'
        model: 'One Touch $2'
      - regex: '; {0,2}(?:USCC[_\-]ALCATEL[_\-]|alcatel[ _]|)(?:(?:one[ _\-]?touch[ _\-])|ot[ _\-])([^;/]+);?(?: Build|\))'
        regex_flag: 'i'
        device: 'Alcatel One Touch $1'
        brand: 'Alcatel'
        model: 'One Touch $1'
      - regex: '; {0,2}([456]\d{3}[A-Z]) Build'
        regex_flag: 'i'
        device: 'Alcatel One Touch $1'
        brand: 'Alcatel'
        model: 'One Touch $1'
      - regex: '; {0,2}(TCL|Alcatel)[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      # operator specific models
      - regex: '; {0,2}(Vodafone[ _]Smart[ _]II|Optimus_Madrid|Orange (?:Infinity 8008X|Hiro|Yomi)|Telenor[_ ](?:Smart|One_?Touch)([_ ].{0,300}?|)|move 2|BS471|I213|Mobile Sosh|MTC975|smart_a17|7040[NRT]|9005X|A621BL|A571VL) Build'
        device: 'Alcatel $1'
        brand: 'Alcatel'
        model: '$1'
      - regex: '; {0,2}BASE_Lutea_3 Build'
        device: 'Alcatel One Touch 998'
        brand: 'Alcatel'
        model: 'One Touch 998'
      - regex: '; {0,2}BASE_Varia Build'
        device: 'Alcatel One Touch 918D'
        brand: 'Alcatel'
        model: 'One Touch 918D'

      #########
      # Alcor
      # @ref
      #########
      - regex: '(Alcor )(.{0,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'Alcor'
        model: '$2'

      #########
      # Allfine
      # @ref: http://www.myallfine.com/Products.asp
      #########
      - regex: '; {0,2}((?:FINE|Fine)\d[^;/]+) Build'
        device: '$1'
        brand: 'Allfine'
        model: '$1'

      #########
      # Allview
      # @ref: http://www.allview.ro/produse/droseries/lista-tablete-pc/
      #########
      - regex: '; {0,2}(ALLVIEW[ _]?|Allview[ _]?)((?:Speed|SPEED).{0,300}) Build/'
        device: '$1$2'
        brand: 'Allview'
        model: '$2'
      - regex: '; {0,2}(ALLVIEW[ _]?|Allview[ _]?|)(A4DUO|A5_Quad|AX1_Shine|AX2_Frenzy|AX4Nano|X\d_Soul|X\d_mini_Soul|X2_Twin|V\d_Viper[^;/]|E2_Living|A5Smiley|P5|P5_Quad|P6_Quad|P6Life) Build'
        device: '$1$2'
        brand: 'Allview'
        model: '$2'
      - regex: '; {0,2}(ALLVIEW[ _]?|Allview[ _]?)([^;/]*) Build'
        device: '$1$2'
        brand: 'Allview'
        model: '$2'

      #########
      # Allwinner
      # @ref: http://www.allwinner.com/
      # @models: A31 (13.3"),A20,A10,
      #########
      - regex: '; {0,2}(A13-MID|Q8H) Build'
        device: '$1'
        brand: 'Allwinner'
        model: '$1'
      - regex: '; {0,2}(Allwinner)[ _\-]?([^;/]+) Build'
        device: '$1 $2'
        brand: 'Allwinner'
        model: '$1'

      #########
      # Alps
      # @ref:
      #########
      - regex: '; {0,2}(baoxue|worldphone 4|Xenoon|XLD)(?: Build/|\))'
        device: '$1'
        brand: 'Alps'
        model: '$1'

      #########
      # Amaway
      # @ref: http://www.amaway.cn/
      #########
      - regex: '; {0,2}(A651|A701B?|A702|A703|A705|A706|A707|A711|A712|A713|A717|A722|A785|A801|A802|A803|A901|A902|A1002|A1003|A1006|A1007|A9701|A9703|Q710|Q80) Build'
        device: '$1'
        brand: 'Amaway'
        model: '$1'

      #########
      # Amoi
      # @ref: http://www.amoi.com/en/prd/prd_index.jspx
      #########
      - regex: '; {0,2}(?:AMOI|Amoi)[ _]([^;/]+) Build'
        device: 'Amoi $1'
        brand: 'Amoi'
        model: '$1'
      - regex: '^(?:AMOI|Amoi)[ _]([^;/]+) Linux'
        device: 'Amoi $1'
        brand: 'Amoi'
        model: '$1'
      - regex: '; {0,2}(A\d{3}W) Build'
        device: 'Amoi $1'
        brand: 'Amoi'
        model: '$1'

      #########
      # Andoer
      # @ref
      #########
      - regex: '(gxt_dongle_3188)(?: Build|\))'
        device: '$1'
        brand: 'Andoer'
        model: '$1'

      #########
      # Anka
      # @ref
      #########
      - regex: '(ANKA-)(.{0,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'Anka'
        model: '$2'

      #########
      # Aoc
      # @ref: http://latin.aoc.com/media_tablet
      #########
      - regex: '; {0,2}((?:MW(?:0[789]|10).{1,300}?)|AOC U702|M601)(?: Build|\))'
        device: '$1'
        brand: 'Aoc'
        model: '$1'

      #########
      # Aoson
      # @ref: http://www.luckystar.com.cn/en/mid.aspx?page=1
      # @ref: http://www.luckystar.com.cn/en/mobiletel.aspx?page=1
      # @note: brand owned by luckystar
      #########
      - regex: '; {0,2}(G7|M1013|M1015G|M11[CG]?|M-?12[B]?|M15|M19[G]?|M30[ACQ]?|M31[GQ]|M32|M33[GQ]|M36|M37|M38|M701T|M710|M712B|M713|M715G|M716G|M71(?:G|GS|T|)|M72[T]?|M73[T]?|M75[GT]?|M77G|M79T|M7L|M7LN|M81|M810|M81T|M82|M92|M92KS|M92S|M717G|M721|M722G|M723|M725G|M739|M785|M791|M92SK|M93D)(?: Build|\))'
        device: 'Aoson $1'
        brand: 'Aoson'
        model: '$1'
      - regex: '; {0,2}Aoson ([^;/]+) Build'
        regex_flag: 'i'
        device: 'Aoson $1'
        brand: 'Aoson'
        model: '$1'

      #########
      # Apanda
      # @ref: http://www.apanda.com.cn/
      #########
      - regex: '; {0,2}[Aa]panda[ _\-]([^;/]+) Build'
        device: 'Apanda $1'
        brand: 'Apanda'
        model: '$1'

      #########
      # Archos
      # @ref: http://www.archos.com/de/products/tablets.html
      # @ref: http://www.archos.com/de/products/smartphones/index.html
      #########
      - regex: '; {0,2}(?:ARCHOS|Archos) ?(GAMEPAD.{0,300}?)(?: Build|[;/\(\)\-])'
        device: 'Archos $1'
        brand: 'Archos'
        model: '$1'
        type: 'console'
      - regex: 'ARCHOS; GOGI; ([^;]+);'
        device: 'Archos $1'
        brand: 'Archos'
        model: '$1'
      - regex: '(?:ARCHOS|Archos)[ _;]?(.{0,300}?)(?: Build|[;/\(\)\-]|$)'
        device: 'Archos $1'
        brand: 'Archos'
        model: '$1'
      - regex: '; {0,2}(A28|A32|A43|A70(?:BHT|CHT|HB|S|X)|A101(?:B|C|IT)|A7EB|A7EB-WK|101G9|80G9) Build'
        device: 'Archos $1'
        brand: 'Archos'
        model: '$1'

      #########
      # Artel
      # @ref:
      #########
      - regex: '; {0,2}(Adi)[ _](.{0,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'Artel'
        model: '$1 $2'

      #########
      # A-rival
      # @ref: http://www.a-rival.de/de/
      #########
      - regex: '; {0,2}(PAD-FMD[^;/]+) Build'
        device: '$1'
        brand: 'Arival'
        model: '$1'
      - regex: '; {0,2}(BioniQ) ?([^;/]+) Build'
        device: '$1 $2'
        brand: 'Arival'
        model: '$1 $2'

      #########
      # ARK
      # @ref
      #########
      - regex: '(ARK[ _])(.{1,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'ARK'
        model: '$2'

      #########
      # Arnova
      # @ref: http://arnovatech.com/
      #########
      - regex: '; {0,2}(AN(?:7|8|9|10|13)[A-Z0-9]{1,4}) Build'
        device: 'Arnova $1'
        brand: 'Arnova'
        model: '$1'
      - regex: '; {0,2}(AN\d[^;/]+|ARCHM\d{1,10}) Build'
        device: 'Arnova $1'
        brand: 'Arnova'
        model: '$1'
      - regex: '; {0,2}(?:ARNOVA|Arnova) ?([^;/]+) Build'
        device: 'Arnova $1'
        brand: 'Arnova'
        model: '$1'

      #########
      # Assistant
      # @ref: http://www.assistant.ua
      #########
      - regex: '; {0,2}(?:ASSISTANT |)(AP)-?([1789]\d{2}[A-Z]{0,2}|80104) Build'
        device: 'Assistant $1-$2'
        brand: 'Assistant'
        model: '$1-$2'

      #########
      # Asus
      # @ref: http://www.asus.com/uk/Tablets_Mobile/
      #########
      - regex: '; {0,2}(A500CG|AST21|ME(?:[13]\d{2})[^;/]+|K0[01][A-Z0-9]|Nexus 10|Nexus 7(?: 2013| LTE|)|Nexus HDX 7|PadFone[^;/]*|P01T_1|Transformer[^;/]*|TF\d{3}[^;/]*|TX201LA|eeepc|TouchPad|Nexus Player) Build'
        device: 'Asus $1'
        brand: 'Asus'
        model: '$1'
      - regex: '; {0,2}ASUS[ _]*([^;/]+) Build'
        device: 'Asus $1'
        brand: 'Asus'
        model: '$1'

      #########
      # Aveo
      # @ref
      #########
      - regex: '(AVEO[ ])(.{1,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'Aveo'
        model: '$2'

      #########
      # Avvio
      # @ref: http://www.avviomobile.com
      #########
      - regex: '(Avvio)[ _\-]?(pad[a-z0-9\-\.]*)'
        regex_flag: 'i'
        brand: 'Avvio'
        model: '$2'
        type: 'tablet'
      - regex: '(Avvio)[ _\-]?([a-z0-9\-\.]+)'
        regex_flag: 'i'
        brand: 'Avvio'
        model: '$2'
        type: 'smartphone'

      #########
      # Axgio
      # @ref:
      #########
      - regex: '; {0,2}(Neon-N1|WING-W2)(?: Build/|\))'
        device: '$1'
        brand: 'Axgio'
        model: '$1'

      #########
      # Garmin-Asus
      #########
      - regex: '; {0,2}Garmin-Asus ([^;/]+) Build'
        device: 'Garmin-Asus $1'
        brand: 'Garmin-Asus'
        model: '$1'
      - regex: '; {0,2}(Garminfone) Build'
        device: 'Garmin $1'
        brand: 'Garmin-Asus'
        model: '$1'

      #########
      # Attab
      # @ref: http://www.theattab.com/
      #########
      - regex: '; (@TAB-[^;/]+) Build'
        device: '$1'
        brand: 'Attab'
        model: '$1'

      #########
      # Audiosonic
      # @ref: ??
      # @note: Take care with Docomo T-01 Toshiba
      #########
      - regex: '; {0,2}(T-(?:07|[^0]\d)[^;/]+) Build'
        device: '$1'
        brand: 'Audiosonic'
        model: '$1'

      #########
      # Avus
      # @ref: http://www.avus.cc/
      #########
      - regex: '; AVUS ([^;/]+) Build'
        device: '$1'
        brand: 'Avus'
        model: '$1'

      #########
      # Axioo
      # @ref: http://www.axiooworld.com/ww/index.php
      #########
      - regex: ' (?:Axioo[ _\-]([^;/]+)|(pico(?:pad|phone))[ _\-]([^;/]+)) ?(?:Build|;|\))'
        regex_flag: 'i'
        device: 'Axioo $1$2 $3'
        brand: 'Axioo'
        model: '$1$2 $3'

      #########
      # Azend
      # @ref: http://azendcorp.com/index.php/products/portable-electronics
      #########
      - regex: '; {0,2}(V(?:100|700|800)[^;/]*) Build'
        device: '$1'
        brand: 'Azend'
        model: '$1'

      #########
      # Azumi
      # @ref: http://azumi-mobile.com/
      #########
      - regex: '; {0,2}(Azumi)[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Azumi'
        model: '$2'
      - regex: '; {0,2}(A35S) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Azumi'
        model: '$1'

      #########
      # Bak
      # @ref: http://www.bakinternational.com/produtos.php?cat=80
      #########
      - regex: '; {0,2}(IBAK\-[^;/]*) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Bak'
        model: '$1'

      #########
      # Bangho
      # @ref: http://www.bangho.com.ar
      #########
      - regex: '; (AERO J\d{1,10}|Aero1021)[\s/].{0,300}Build'
        brand: 'Bangho'
        model: '$1'

      #########
      # Bedove
      # @ref: http://www.bedove.com/product.html
      # @models: HY6501|HY5001|X12|X21|I5
      #########
      - regex: '; {0,2}(HY5001|HY6501|X12|X21|I5) Build'
        device: 'Bedove $1'
        brand: 'Bedove'
        model: '$1'

      #########
      # Benss
      # @ref: http://www.benss.net/
      #########
      - regex: '; {0,2}(JC-[^;/]*) Build'
        device: 'Benss $1'
        brand: 'Benss'
        model: '$1'

      #########
      # Bephone
      # @ref
      #########
      - regex: '(UN020)(?: Build|\))'
        device: '$1'
        brand: 'Bephone'
        model: '$1'

      #########
      # Blackberry
      # @ref: http://uk.blackberry.com/
      # @note: Android Apps seams to be used here
      #########
      - regex: '; {0,2}(BB) ([^;/]+) Build'
        device: '$1 $2'
        brand: 'Blackberry'
        model: '$2'
      - regex: '(STV100-1)(?: Build|\))'
        device: '$1'
        brand: 'Blackberry'
        model: '$1'

      #########
      # Blackbird
      # @ref: http://iblackbird.co.kr
      #########
      - regex: '; {0,2}(BlackBird)[ _](I8.{0,300}) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: '; {0,2}(BlackBird)[ _](.{0,300}) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # Blackview
      # @ref:
      #########
      - regex: '; {0,2}(Crown) Build'
        device: 'Blackview $1'
        brand: 'Blackview'
        model: '$1'

      #########
      # Blaupunkt
      # @ref: http://www.blaupunkt.com
      #########
      # Endeavour
      - regex: '; {0,2}([0-9]+BP[EM][^;/]*|Endeavour[^;/]+) Build'
        device: 'Blaupunkt $1'
        brand: 'Blaupunkt'
        model: '$1'

      #########
      # Bliss
      # @ref
      #########
      - regex: '(Bliss[ ])(.{1,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'Bliss'
        model: '$2'

      #########
      # Blu
      # @ref: http://bluproducts.com
      #########
      - regex: '; {0,2}((?:BLU|Blu)[ _\-])([^;/]+) Build'
        device: '$1$2'
        brand: 'Blu'
        model: '$2'
      # BMOBILE = operator branded device
      - regex: '; {0,2}(?:BMOBILE |)(Blu|(?:DASH|ADVANCE|VIVO|TANK) \d\.\d[^;/]*?) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Blu'
        model: '$1'
      - regex: '; {0,2}(STUDIO[^;/)]+|Studio [^;/)]+|LIFE PLAY|R1 HD|VIVO IV)(?: Build|\))'
        device: '$1'
        brand: 'Blu'
        model: '$1'

      #########
      # Blusens
      # @ref: http://www.blusens.com/es/?sg=1&sv=al&roc=1
      #########
      # tablet
      - regex: '; {0,2}(TOUCH\d[^;/]+) Build'
        device: '$1'
        brand: 'Blusens'
        model: '$1'

      #########
      # Bmobile
      # @ref: http://bmobile.eu.com/?categoria=smartphones-2
      # @note: Might collide with Maxx as AX is used also there.
      #########
      # smartphone
      - regex: '; {0,2}(?:Bmobile[ _]+|)(AX[56]\d{2}|AX[78][^0]\d) Build'
        device: 'Bmobile $1'
        brand: 'Bmobile'
        model: '$1'
        type: 'smartphone'

      #########
      # bq
      # @ref: http://bqreaders.com
      #########
      - regex: '; {0,2}([Bb]q|) ?(Aquaris[^;/]*);? Build'
        device: '$1 $2'
        brand: 'bq'
        model: '$2'
        type: 'smartphone'
      - regex: '; {0,2}([Bb]q) ([^;/]+);? Build'
        device: '$1 $2'
        brand: 'bq'
        model: '$2'
        type: 'tablet'
      - regex: '; {0,2}(BQ \d{1,10}[A-Z]?|BQS-\d{1,10}.{0,300}?)(?: Build|\))'
        device: '$1'
        brand: 'bq'
        model: '$1'
      - regex: '; {0,2}(Maxwell [^;/]+) Build'
        device: '$1'
        brand: 'bq'
        model: '$1'
        type: 'tablet'

      #########
      # Braun Phototechnik
      # @ref: http://www.braun-phototechnik.de/en/products/list/~pcat.250/Tablet-PC.html
      #########
      - regex: '; {0,2}((?:B-Tab|B-TAB) ?\d[^;/]+) Build'
        device: '$1'
        brand: 'Braun'
        model: '$1'

      #########
      # Bravis
      # @ref
      #########
      - regex: '(BRAVIS[ ])(.{1,300}?)(?: Build|\))'
        device: '$1$2'
        brand: 'Bravis'
        model: '$2'

      #########
      # Broncho
      # @ref: http://www.broncho.cn/
      #########
      - regex: '; {0,2}(Broncho) ([^;/]+) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # Brondi
      # @ref: https://www.brondi.it/smartphone.html
      #########
      - regex: '; {0,2}(Caesar|CENTURION(?:[ -]\d|)|CENTVRION2|GLADIATOR(?:[ -]\d|)|GLORY(?:[ -]\d|)|LUXURY(?:[ -]\d|)|SENSUELLE|VICTORY) Build'
        regex_flag: 'i'
        device: 'Brondi $1'
        brand: 'Brondi'
        model: '$1'

      #########
      # Cambridge Sciences
      # @ref
      #########
      - regex: '; {0,2}(Starpad)(?: Build|\))'
        device: '$1'
        brand: 'Cambridge Sciences'
        model: '$1'

      #########
      # Captiva
      # @ref: http://www.captiva-power.de
      #########
      - regex: '; {0,2}CAPTIVA ([^;/]+) Build'
        device: 'Captiva $1'
        brand: 'Captiva'
        model: '$1'

      #########
      # Casio
      # @ref: http://www.casiogzone.com/
      #########
      - regex: '; {0,2}(C771|CAL21|IS11CA) Build'
        device: '$1'
        brand: 'Casio'
        model: '$1'

      #########
      # Cat
      # @ref: http://www.cat-sound.com
      #########
      - regex: '; {0,2}(?:Cat|CAT) ([^;/]+) Build'
        device: 'Cat $1'
        brand: 'Cat'
        model: '$1'
      - regex: '; {0,2}(B15Q?) Build'
        device: 'Cat $1'
        brand: 'Cat'
        model: '$1'
      - regex: '; {0,2}(?:Cat)(Nova.{0,300}) Build'
        device: 'Cat $1'
        brand: 'Cat'
        model: '$1'
      - regex: '; {0,2}(INM8002KP|ADM8000KP_[AB]) Build'
        device: '$1'
        brand: 'Cat'
        model: 'Tablet PHOENIX 8.1J0'

      #########
      # Celkon
      # @ref: http://www.celkonmobiles.com/?_a=products
      # @models: A10, A19Q, A101, A105, A107, A107\+, A112, A118, A119, A119Q, A15, A19, A20, A200, A220, A225, A22 Race, A27, A58, A59, A60, A62, A63, A64, A66, A67, A69, A75, A77, A79, A8\+, A83, A85, A86, A87, A89 Ultima, A9\+, A90, A900, A95, A97i, A98, AR 40, AR 45, AR 50, ML5
      #########
      - regex: '; {0,2}(?:[Cc]elkon[ _\*]|CELKON[ _\*])([^;/\)]+) ?(?:Build|;|\))'
        device: '$1'
        brand: 'Celkon'
        model: '$1'
      - regex: 'Build/(?:[Cc]elkon)+_?([^;/_\)]+)'
        device: '$1'
        brand: 'Celkon'
        model: '$1'
      - regex: '; {0,2}(CT)-?(\d{1,10}) Build'
        device: '$1$2'
        brand: 'Celkon'
        model: '$1$2'
      # smartphones
      - regex: '; {0,2}(A19|A19Q|A105|A107[^;/\)]*|A354C|A400) ?(?:Build|;|\))'
        device: '$1'
        brand: 'Celkon'
        model: '$1'

      #########
      # Cello
      # @ref
      #########
      - regex: '; {0,2}(T1144)(?: Build|\))'
        device: '$1'
        brand: 'Cello'
        model: '$1'

      #########
      # ChangJia
      # @ref: http://www.cjshowroom.com/eproducts.aspx?classcode=004001001
      # @brief: China manufacturer makes tablets for different small brands
      #         (eg. http://www.zeepad.net/index.html)
      #########
      - regex: '; {0,2}(TPC[0-9]{4,5}) Build'
        device: '$1'
        brand: 'ChangJia'
        model: '$1'

      #########
      # China Phone
      # @ref
      #########
      - regex: '; {0,2}(L925\(L1020\))(?: Build|\))'
        device: '$1'
        brand: 'China Phone'
        model: '$1'

      #########
      # Cloudfone
      # @ref: http://www.cloudfonemobile.com/
      #########
      - regex: '; {0,2}(Cloudfone)[ _](Excite)([^ ][^;/]+) Build'
        device: '$1 $2 $3'
        brand: 'Cloudfone'
        model: '$1 $2 $3'
      - regex: '; {0,2}(Excite|ICE)[ _](\d{1,10}[^;/]+) Build'
        device: 'Cloudfone $1 $2'
        brand: 'Cloudfone'
        model: 'Cloudfone $1 $2'
      - regex: '; {0,2}(Cloudfone|CloudPad)[ _]([^;/]+) Build'
        device: '$1 $2'
        brand: 'Cloudfone'
        model: '$1 $2'

      #########
      # Cmx
      # @ref: http://cmx.at/de/
      #########
      - regex: '; {0,2}((?:Aquila|Clanga|Rapax)[^;/]+) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Cmx'
        model: '$1'

      #########
      # CobyKyros
      # @ref: http://cobykyros.com
      # @note: Be careful with MID\d{3} from MpMan or Manta
      #########
      - regex: '; {0,2}(?:CFW-|Kyros |)(MID[0-9]{4}(?:[ABC]|SR|TV|))(\(3G\)-4G| GB 8K| 3G| 8K| GB|) {0,2}(?:Build|[;\)])'
        device: 'CobyKyros $1$2'
        brand: 'CobyKyros'
        model: '$1$2'

      #########
      # Condor
      # @ref
      #########
      - regex: '; {0,2}(TRA-901G|CTAB785R16-3G)(?: Build|\))'
        device: '$1'
        brand: 'Condor'
        model: '$1'

      #########
      # Coolpad
      # @ref: ??
      #########
      - regex: '; {0,2}([^;/]*)Coolpad[ _]?([^;/]+) Build'
        device: '$1$2'
        brand: 'Coolpad'
        model: '$1$2'
      - regex: '; {0,2}(801E[MS]?|CP8676_I02|CP8298_I00) Build'
        device: '$1'
        brand: 'Coolpad'
        model: '$1'

      #########
      # Cube
      # @ref: http://www.cube-tablet.com/buy-products.html
      #########
      - regex: '; {0,2}(CUBE[ _]|)([KU][0-9]+ ?GT.{0,300}|A5300|Mytab-U55GT) Build'
        regex_flag: 'i'
        device: '$1$2'
        brand: 'Cube'
        model: '$2'
        type: 'tablet'

      #########
      # Cubot
      # @ref: http://www.cubotmall.com/
      #########
      - regex: '; {0,2}CUBOT[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Cubot'
        model: '$1'
      - regex: '; {0,2}(BOBBY|GT[89]\d|P6|P7|P9|P10|S108|S168|S200|S208|S222|S308|s350|T9|X6|X9)(?: Build|\))'
        regex_flag: 'i'
        device: '$1'
        brand: 'Cubot'
        model: '$1'

      #########
      # Danew
      # @ref: http://www.danew.com/produits-tablette.php
      #########
      - regex: '; {0,2}(Dslide ?[^;/]+) Build'
        device: '$1'
        brand: 'Danew'
        model: '$1'
        type: 'tablet'

      #########
      # Dell
      # @ref: http://www.dell.com
      # @ref: http://www.softbank.jp/mobile/support/product/101dl/
      # @ref: http://www.softbank.jp/mobile/support/product/001dl/
      # @ref: http://developer.emnet.ne.jp/android.html
      # @ref: http://www.dell.com/in/p/mobile-xcd28/pd
      # @ref: http://www.dell.com/in/p/mobile-xcd35/pd
      #########
      - regex: '; {0,2}(XCD)[ _]?(28|35) Build'
        device: 'Dell $1$2'
        brand: 'Dell'
        model: '$1$2'
      - regex: '; {0,2}(Venue.{0,300}?) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'
      - regex: '; {0,2}(001DL) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: 'Streak'
      - regex: '; {0,2}(?:Dell|DELL) (Streak) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: 'Streak'
      - regex: '; {0,2}(101DL|GS01|Streak Pro[^;/]*) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: 'Streak Pro'
      - regex: '; {0,2}([Ss]treak ?7) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: 'Streak 7'
      - regex: '; {0,2}(Mini-3iX) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'
      - regex: '; {0,2}(?:Dell|DELL)[ _](Aero|Venue|Thunder|Mini.{0,300}|Streak[ _]Pro) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'
      - regex: '; {0,2}Dell[ _]([^;/]+) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'
      - regex: '; {0,2}Dell ([^;/]+) Build'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'

      #########
      # Denver
      # @ref: http://www.denver-electronics.com/tablets1/
      #########
      - regex: '; {0,2}(?:PO#\d{4} |)(TA[CDQ]-\d{1,10}[^;/]*) Build'
        device: '$1'
        brand: 'Denver'
        model: '$1'
        type: 'tablet'

      #########
      # Dex
      # @ref: http://dex.ua/
      #########
      - regex: '; {0,2}(iP[789]\d{2}(?:-3G|)|IP10\d{2}(?:-8GB|)) Build'
        device: '$1'
        brand: 'Dex'
        model: '$1'

      #########
      # DEXP
      # @ref
      #########
      - regex: '; {0,2}(DEXP[ ])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'DEXP'
        model: '$2'

      #########
      # Dialog
      # @ref:
      #########
      - regex: '; {0,2}(Tab_2)(?: Build|[;)])'
        device: '$1'
        brand: 'Dialog'
        model: '$1'

      #########
      # Digma
      # @ref:
      #########
      - regex: '; {0,2}(?:Digma |DIGMA |)(Optima .{0,300}?|Plane .{0,300}?|HIT .{0,300}?|iD[jnsx]D\d{1,10}.{0,300}?|TT7022MG.{0,300}?|LINX 6\.0 PS604M)(?: Build|[;)])'
        device: '$1'
        brand: 'Digma'
        model: '$1'

      #########
      # DNS AirTab
      # @ref: http://www.dns-shop.ru/
      #########
      - regex: '; {0,2}(?:DNS |)(AirTab)[ _\-]([^;/]+)(?: Build|[;)])'
        device: '$1 $2'
        brand: 'DNS'
        model: '$1 $2'
      - regex: '; DNS[ _](.{4,6})(?: Build|[;)])'
        device: '$1$2'
        brand: 'DNS'
        model: '$1$2'
      - regex: '; {0,2}(S400\d|[sS]450\d|S470\d)([A-Z]?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'DNS'
        model: '$1$2'
      - regex: '; (ES9701|MB40II1)(?: Build|[;)])'
        device: '$1'
        brand: 'DNS'

      #########
      # Docomo (Operator Branded Device)
      # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
      #########
      - regex: '; {0,2}(F\-\d[^;/]+) Build'
        device: '$1'
        brand: 'Fujitsu'
        model: '$1'
      - regex: '; {0,2}(HT-03A) Build'
        device: '$1'
        brand: 'HTC'
        model: 'Magic'
      - regex: '; {0,2}(HT\-\d[^;/]+) Build'
        device: '$1'
        brand: 'HTC'
        model: '$1'
      - regex: '; {0,2}(L\-\d[^;/]+) Build'
        device: '$1'
        brand: 'LG'
        model: '$1'
      - regex: '; {0,2}(N\-\d[^;/]+) Build'
        device: '$1'
        brand: 'Nec'
        model: '$1'
      - regex: '; {0,2}(P\-\d[^;/]+) Build'
        device: '$1'
        brand: 'Panasonic'
        model: '$1'
      - regex: '; {0,2}(SC\-\d[^;/]+) Build'
        device: '$1'
        brand: 'Samsung'
        model: '$1'
      - regex: '; {0,2}(SH\-\d[^;/]+) Build'
        device: '$1'
        brand: 'Sharp'
        model: '$1'
      - regex: '; {0,2}(SO\-\d[^;/]+) Build'
        device: '$1'
        brand: 'SonyEricsson'
        model: '$1'
      - regex: '; {0,2}(T\-0[12][^;/]+) Build'
        device: '$1'
        brand: 'Toshiba'
        model: '$1'

      #########
      # Doogee
      # @ref: http://www.doogeemobile.com/
      #########
      - regex: '; {0,2}(?:DOOGEE[ -]([^;/]+)|([^;/]+[ -]DG\d{3,4}[A-Z]?)|(DG800));? +Build'
        device: '$1$2$3'
        brand: 'Doogee'
        model: '$1$2$3'

      #########
      # Doro
      # @ref: http://doro.com
      #########
      - regex: '; {0,2}Doro (.{0,300}?) Build'
        device: '$1'
        brand: 'Doro'
        model: '$1'

      #########
      # DOOV
      # @ref: http://www.doov.com.cn/
      #########
      - regex: '; {0,2}(DOOV)[ _]([^;/]+) Build'
        device: '$1 $2'
        brand: 'DOOV'
        model: '$2'

      #########
      # eFOX
      # @ref
      #########
      - regex: '; {0,2}(SMART-E5)(?: Build|[;)])'
        device: '$1'
        brand: 'eFOX'
        model: '$1'

      #########
      # Elephone
      # @ref: http://www.elephone.hk/
      #########
      - regex: '; {0,2}(Elephone)[ -]?([^;/]+) Build'
        device: '$1'
        brand: 'Elephone'
        model: '$2$3'
      - regex: '; {0,2}(P3000)(?: Build|[;)])'
        device: '$1'
        brand: 'Elephone'
        model: '$1'

      #########
      # Enot
      # @ref: http://www.enot.ua/
      #########
      - regex: '; {0,2}(Enot|ENOT)[ -]?([^;/]+) Build'
        device: '$1 $2'
        brand: 'Enot'
        model: '$2'

      #########
      # Etuline
      # @ref
      #########
      - regex: '; {0,2}(T880G)(?: Build|[;)])'
        device: '$1'
        brand: 'Etuline'
        model: '$1'

      #########
      # Evercoss
      # @ref: http://evercoss.com/android/
      #########
      - regex: '; {0,2}[^;/]+ Build/(?:CROSS|Cross)+[ _\-]([^\)]+)'
        device: 'CROSS $1'
        brand: 'Evercoss'
        model: 'Cross $1'
      - regex: '; {0,2}(CROSS|Cross)[ _\-]([^;/]+) Build'
        device: '$1 $2'
        brand: 'Evercoss'
        model: 'Cross $2'
      - regex: '; {0,2}(A7[STV].?|A10Q|A26[BC]|A28[BMS]|A33A|A5C|A5[ST]|A65A|A66[AB]|A7E|A80A|AT1[ACG]\*?) Build'
        device: '$1'
        brand: 'Evercoss'
        model: '$1'

      #########
      # Explay
      # @ref: http://explay.ru/
      #########
      - regex: '; {0,2}Explay[_ ](.{1,300}?)(?:[\)]| Build)'
        device: '$1'
        brand: 'Explay'
        model: '$1'
      - regex: '; {0,2}(Art 3G|CinemaTV[ _]3G|Infinityll|informer 921|M1_Plus|sQuad 7\.82 3G|Surfer 8\.31 3G|X-tremer)__BUILD__'
        device: '$1'
        brand: 'Explay'
        model: '$1'

      #########
      # Fairphone
      # @ref: https://www.fairphone.com/
      #########
      - regex: '; {0,2}(FP1|FP1U) Build'
        device: '$1'
        brand: 'Fairphone'
        model: '$1'

      #########
      # FiGO
      # @ref
      #########
      - regex: '; {0,2}(EPIC F50G)(?: Build|[;)])'
        device: '$1'
        brand: 'FiGO'
        model: '$1'

      #########
      # Fly
      # @ref: http://www.fly-phone.com/
      #########
      - regex: '; {0,2}(IQ.{0,300}?|Flylife Connect.{0,300}?|Phoenix 2)(?: Build|[;)])'
        device: '$1'
        brand: 'Fly'
        model: '$1'
      - regex: '; {0,2}(Fly|FLY)[ _](IQ[^;]+|F[34]\d{1,10}[^;]*|Phoenix 2);? Build'
        device: '$1 $2'
        brand: 'Fly'
        model: '$2'

      #########
      # Flying
      # @ref:
      #########
      - regex: '; {0,2}(F600)(?: Build|[;)])'
        device: '$1'
        brand: 'Flying'
        model: '$1'


      #########
      # Fujitsu
      # @ref: http://www.fujitsu.com/global/
      #########
      - regex: '; {0,2}(M532|Q572|FJL21) Build/'
        device: '$1'
        brand: 'Fujitsu'
        model: '$1'

      #########
      # Galapad
      # @ref: http://www.galapad.net/product.html
      #########
      - regex: '; {0,2}(G1) Build'
        device: '$1'
        brand: 'Galapad'
        model: '$1'

      #########
      # Geeksphone
      # @ref: http://www.geeksphone.com/
      #########
      - regex: '; {0,2}(Geeksphone) ([^;/]+) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # General Mobile
      # @ref:
      #########
      - regex: '; {0,2}(General Mobile[ ])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'General Mobile'
        model: '$2'

      #########
      # Gfive
      # @ref: http://www.gfivemobile.com/en
      #########
      #- regex: '; {0,2}(G\'?FIVE) ([^;/]+) Build' # there is a problem with python yaml parser here
      - regex: '; {0,2}(G[^F]?FIVE) ([^;/]+) Build'
        device: '$1 $2'
        brand: 'Gfive'
        model: '$2'
      - regex: '; {0,2}(A5\(GOL\)) Build'
        device: '$1'
        brand: 'Gfive'
        model: '$1'

      #########
      # Gionee
      # @ref: http://www.gionee.com/
      #########
      - regex: '; {0,2}(Gionee)[ _\-]([^;/]+)(?:/[^;/]+|) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Gionee'
        model: '$2'
      - regex: '\sGIONEE[-\s_](\w*)'
        regex_flag: 'i'
        device: 'Gionee $1'
        brand: 'Gionee'
        model: '$1'
      - regex: '; {0,2}(GN\d{1,10}[A-Z]?|INFINITY_PASSION|Ctrl_V1|Pioneer_P[123]S?|P4S?|S5\.[15]|F103 Pro)(?: Build|[;)])'
        device: 'Gionee $1'
        brand: 'Gionee'
        model: '$1'
      - regex: '; {0,2}(E3|E7) Build/J'
        device: 'Gionee $1'
        brand: 'Gionee'
        model: '$1'

      #########
      # Globex
      # @ref:
      #########
      - regex: '; {0,2}(GU730C)(?: Build|[;)])'
        device: '$1'
        brand: 'Globex'
        model: '$1'

      #########
      # GoClever
      # @ref: http://www.goclever.com
      #########
      - regex: '; {0,2}((?:FONE|QUANTUM|INSIGNIA|ARIES)[ _]\d{1,10}.{0,300}?|PLAYTAB|TQ700|ORION7o)(?: Build|[;)])'
        device: 'GoClever $1 $2'
        brand: 'GoClever'
        model: '$1 $2'
      - regex: '; {0,2}GOCLEVER ([^;/]+) Build'
        device: 'GoClever $1'
        brand: 'GoClever'
        model: '$1'

      #########
      # Google
      # @ref: http://www.google.de/glass/start/
      #########
      - regex: '; {0,2}(Glass \d{1,10}) Build'
        device: '$1'
        brand: 'Google'
        model: '$1'
        type: 'glasses'
      - regex: '; {0,2}(Pixel C)__BUILD__'
        device: '$1'
        brand: 'Google'
        model: '$1'
        type: 'tablet'
      - regex: '; {0,2}(Pixel|Pixel XL|Pixel 2|Pixel 2 XL)__BUILD__'
        device: '$1'
        brand: 'Google'
        model: '$1'

      #########
      # Gigabyte
      # @ref: http://gsmart.gigabytecm.com/en/
      #########
      - regex: '; {0,2}(GSmart)[ -_](.{1,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'Gigabyte'
        model: '$1 $2'
      - regex: '; {0,2}(Rio R1)(?: Build|[;)])'
        device: '$1'
        brand: 'Gigabyte'
        model: '$1'

      #########
      # Gigaset
      # @ref: http://www.gigaset.com/
      #########
      - regex: '; {0,2}(Gigaset)[ ]([^/]+) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: '; {0,2}(SL930[^/]*) Build'
        device: 'Gigaset $1'
        brand: 'Gigaset'
        model: '$1'

      #########
      # G-Tide
      # @ref: http://www.g-tidemobile.com
      #########
      - regex: '; {0,2}(G-TiDE)[ ]([^/]+) Build'
        regex_flag: i
        device: 'G-Tide $2'
        brand: 'G-Tide'
        model: '$2'

      #########
      # Freescale development boards
      # @ref: http://www.freescale.com/webapp/sps/site/prod_summary.jsp?code=IMX53QSB
      #########
      - regex: '; {0,2}(imx5[13]_[^/]+) Build'
        device: 'Freescale $1'
        brand: 'Freescale'
        model: '$1'

      #########
      # Haier
      # @ref: http://www.haier.com/
      # @ref: http://www.haier.com/de/produkte/tablet/
      #########
      - regex: '; {0,2}Haier[ _\-]([^/]+) Build'
        device: 'Haier $1'
        brand: 'Haier'
        model: '$1'
      - regex: '; {0,2}(HW-.{1,300}?|W867)(?: Build|[;)])'
        device: 'Haier $1'
        brand: 'Haier'
        model: '$1'
        type: 'smartphone'
      - regex: '; {0,2}(PAD1016)(?: Build|[;)])'
        device: 'Haier $1'
        brand: 'Haier'
        model: '$1'
        type: 'tablet'

      #########
      # Haipad
      # @ref: http://www.haipad.net/
      # @models: V7P|M7SM7S|M9XM9X|M7XM7X|M9|M8|M7-M|M1002|M7|M701
      #########
      - regex: '; {0,2}(M701|M7|M8|M9) Build'
        device: 'Haipad $1'
        brand: 'Haipad'
        model: '$1'

      #########
      # Haipai
      # @ref:
      #########
      - regex: '; {0,2}(Haipai_Noble_I9220|i9377)(?: Build|[;)])'
        device: '$1'
        brand: 'Haipai'
        model: '$1'

      #########
      # Hannspree
      # @ref: http://www.hannspree.eu/
      #########
      - regex: '; {0,2}(SN\d{1,10}T[^;\)/]*|HSG12\d{1,10})(?: Build|[;\)])'
        device: 'Hannspree $1'
        brand: 'Hannspree'
        model: '$1'

      #########
      # HCLme
      # @ref: http://www.hclmetablet.com/india/
      #########
      - regex: 'Build/HCL ME Tablet ([^;\)]+)[\);]'
        device: 'HCLme $1'
        brand: 'HCLme'
        model: '$1'
      - regex: '; {0,2}([^;\/]+) Build/HCL'
        device: 'HCLme $1'
        brand: 'HCLme'
        model: '$1'

      #########
      # Hena
      # @ref: http://www.henadigital.com/en/product/index.asp?id=6
      #########
      - regex: '; {0,2}(MID-?\d{4}C[EM]) Build'
        device: 'Hena $1'
        brand: 'Hena'
        model: '$1'

      #########
      # Highscreen
      # @ref:
      #########
      - regex: '; {0,2}(Alpha GTR?|Boost IIse|Explosion|Ice2|Prime S|Prime Mini SE|Zera[ _]F)(?: Build|\))'
        device: '$1'
        brand: 'Highscreen'
        model: '$1'

      #########
      # Hisense
      # @ref: http://www.hisense.com/
      #########
      - regex: '; {0,2}(EG\d{2,}|HS-.{1,300}?|MIRA.{1,300}?|AD683G)(?: Build|[;)])'
        device: 'Hisense $1'
        brand: 'Hisense'
        model: '$1'
      - regex: '; {0,2}(andromax.{1,300}?|Smartfren Andromax.{0,300}?)(?: Build|[;)])'
        regex_flag: 'i'
        device: 'Hisense $1'
        brand: 'Hisense'
        model: '$1'

      #########
      # hitech
      # @ref: http://www.hitech-mobiles.com/
      #########
      - regex: '; {0,2}(?:AMAZE[ _](S\d{1,10})|(S\d{1,10})[ _]AMAZE) Build'
        device: 'AMAZE $1$2'
        brand: 'hitech'
        model: 'AMAZE $1$2'

      #########
      # Honlin
      # @ref:
      #########
      - regex: '; {0,2}(HL-PC\d{3,4})(?: Build|[;)])'
        device: '$1'
        brand: 'Honlin'
        model: '$1'

      #########
      # HOTWAV
      # @ref:
      #########
      - regex: '; {0,2}(IP7) Build'
        device: 'HOTWAV $1'
        brand: 'HOTWAV'
        model: '$1'

      #########
      # HP
      # @ref: http://www.hp.com/
      #########
      - regex: '; {0,2}(PlayBook|Slate \d{1,10}(?: Pro|)) Build'
        device: 'HP $1'
        brand: 'HP'
        model: '$1'
      - regex: '; {0,2}HP ([^/]+) Build'
        device: 'HP $1'
        brand: 'HP'
        model: '$1'
      - regex: '; {0,2}([^/]+_tenderloin|Touchpad)(?: Build|[;)])'
        device: 'HP TouchPad'
        brand: 'HP'
        model: 'TouchPad'

      #########
      # HTC
      # @ref: http://www.htc.com/www/products/
      # @ref: http://en.wikipedia.org/wiki/List_of_HTC_phones
      #########
      - regex: 'USCCHTC(\d{1,10})'
        brand: 'HTC'
        model: '$1'
      - regex: 'USCC(ADR\d{1,10})'
        brand: 'HTC'
        model: '$1'
      # Android HTC with Version Number matcher
      # ; HTC_0P3Z11/1.12.161.3 Build
      # ;HTC_A3335 V2.38.841.1 Build
      - regex: '; {0,2}(?:HTC)(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI).){1,30}))(?:[ _/]((?:(?![ _/;\(\)]|HTC|Build|MIUI).){1,30})|)(?:[ _/]((?:(?![ _/;\(\)]|Build|MIUI).){1,30})|)(?:[ _/]((?:(?![/;\)]|Build|MIUI).){1,30})|)(?:[/\\]1\.0 | V|/| +)\d{1,10}\.\d[\d\.]+'
        device: 'HTC $1 $2 $3 $4'
        brand: 'HTC'
        model: '$1 $2 $3 $4'
      # Android HTC without Version Number matcher
      - regex: '; {0,2}(?:HTC[ ;]|)(?:HTC(?:_blocked)*)(?:(?:[ _/]|; {0,2})((?:(?![ _/;\(\)\\]|USCCHTC|HTC|Build|MIUI).){1,30}))(?:[ _/]((?:(?![ _/;\(\)\\]|Build|MIUI|1\.0).){1,30})|)(?:[ _/]((?:(?![ _/;\(\)\\]|Build|MIUI|1\.0).){1,30})|)(?:[ _/]((?:(?![/;\)]|Build|MIUI|1\.0).){1,30})|)'
        regex_flag: 'i'
        device: 'HTC $1 $2 $3 $4'
        brand: 'HTC'
        model: '$1 $2 $3 $4'
      # HTC Streaming Player
      - regex: 'HTC Streaming Player [^\/]*/[^\/]*/ htc_([^/]+) /'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
      # general matcher for anything else
      - regex: '(?:[;,] {0,2}|^)(?:htccn_chs-|)HTC[ _-]?([^;]+?)(?: {0,2}Build|clay|Android|-?Mozilla| Opera| Profile| UNTRUSTED|[;/\(\)]|$)'
        regex_flag: 'i'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
      # Android matchers without HTC
      - regex: '; {0,2}(0PAJ5|0PCV1|0PJA2|0PM92|2PQ93|2PS64|2PYB2|831C|pcdadr6350|A320a|Z520m|HTL22|801a|A6277|ADR6200|ADR63[03]0[A-Z]*|ADR6350|ADR64[01]0[A-Z]*|ADR6425[A-Z]*|APX515CKT|Desire[^_ ]*|Dream|EndeavorU|Eris|Evo|Flyer|HD2|Hero|HERO200|Hero CDMA|HTL21|Incredible|Inspire[A-Z0-9]*|Legend|Liberty|Nexus ?(?:One|HD2)|Nexus 9|One|One S C2|One[ _]?(?:M|S|V|X\+?)\w*|PC36100|PG06100|PG86100|PJ83100|PM63100|S31HT|Sensation|Wildfire)(?: Build|[/;()])'
        regex_flag: 'i'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
      - regex: '; {0,2}(ADR6200|ADR6400L|ADR64(?:10|25|)LVW|Amaze|DesireS?|EndeavorU|Eris|EVO|Evo\d[A-Z]+|HD2|IncredibleS?|Inspire[A-Z0-9]*|Inspire[A-Z0-9]*|Sensation[A-Z0-9]*|Wildfire)[ _-](.{1,300}?)(?:[/;\)]|Build|MIUI|1\.0)'
        regex_flag: 'i'
        device: 'HTC $1 $2 $3 $4'
        brand: 'HTC'
        model: '$1 $2 $3 $4'

      #########
      # Hummer
      # @ref:
      #########
      - regex: '; {0,2}(H1\+)(?: Build|[;)])'
        device: '$1'
        brand: 'Hummer'
        model: '$1'

      #########
      # Hyundai
      # @ref: http://www.hyundaitechnologies.com
      #########
      - regex: '; {0,2}HYUNDAI (T\d[^/]*) Build'
        device: 'Hyundai $1'
        brand: 'Hyundai'
        model: '$1'
      - regex: '; {0,2}HYUNDAI ([^;/]+) Build'
        device: 'Hyundai $1'
        brand: 'Hyundai'
        model: '$1'
      # X900? http://www.amazon.com/Hyundai-X900-Retina-Android-Bluetooth/dp/B00AO07H3O
      - regex: '; {0,2}(X700|Hold X|MB-6900) Build'
        device: 'Hyundai $1'
        brand: 'Hyundai'
        model: '$1'

      #########
      # iBall
      # @ref: http://www.iball.co.in/Category/Mobiles/22
      #########
      - regex: '; {0,2}(?:iBall[ _\-]|)(Andi)[ _]?([^;/]*|Uddaan)__BUILD__'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'iBall'
        model: '$1 $2'
      - regex: '; {0,2}(IBall)(?:[ _]([^;/]+)|) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'iBall'
        model: '$2'
      - regex: '; {0,2} (3G 7271-HD70) Build'
        device: '$1'
        brand: 'iBall'
        model: '$1'

      #########
      # IconBIT
      # @ref: http://www.iconbit.com/catalog/tablets/
      #########
      - regex: '; {0,2}(NT-\d{1,10}[^ ;/]*|Net[Tt]AB [^;/]+|Mercury [A-Z]+|iconBIT)(?: S/N:[^;/]+|) Build'
        device: '$1'
        brand: 'IconBIT'
        model: '$1'

      #########
      # IMO
      # @ref: http://www.ponselimo.com/
      #########
      - regex: '; {0,2}(IMO)[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'IMO'
        model: '$2'

      #########
      # i-mobile
      # @ref: http://www.i-mobilephone.com/
      #########
      - regex: '; {0,2}i-?mobile[ _](.{1,300}?)(?: Build|[;()])'
        regex_flag: 'i'
        device: 'i-mobile $1'
        brand: 'imobile'
        model: '$1'
      - regex: '; {0,2}(i-(?:style|note)[^/]*) Build/'
        regex_flag: 'i'
        device: 'i-mobile $1'
        brand: 'imobile'
        model: '$1'

      #########
      # Impression
      # @ref: http://impression.ua/planshetnye-kompyutery
      #########
      - regex: '; {0,2}(ImPAD|ImSmart) ?(\d{1,10}(?:.)*) Build'
        device: '$1 $2'
        brand: 'Impression'
        model: '$1 $2'

      #########
      # iNew
      # @ref: http://www.infinixmobility.com/index.html
      #########
      - regex: '; {0,2}(i4000S|V3)(?: Build|\))'
        device: '$1'
        brand: 'iNew'
        model: '$1'

      #########
      # Infinix
      # @ref: http://www.infinixmobility.com/index.html
      #########
      - regex: '; {0,2}(Infinix)[ _](.{0,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'Infinix'
        model: '$2'

      #########
      # InFocus
      # @ref:
      #########
      - regex: '; {0,2}(InFocus)[ _](.{0,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'InFocus'
        model: '$2'

      #########
      # Informer
      # @ref: ??
      #########
      - regex: '; {0,2}(Informer)[ \-]([^;/]+) Build'
        device: '$1 $2'
        brand: 'Informer'
        model: '$2'

      #########
      # Innos
      # @ref:
      #########
      - regex: '; {0,2}(innos[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Innos'
        model: '$2'

      #########
      # Intenso
      # @ref: http://www.intenso.de
      # @models: 7":TAB 714,TAB 724;8":TAB 814,TAB 824;10":TAB 1004
      #########
      - regex: '; {0,2}(TAB) ?([78][12]4) Build'
        device: 'Intenso $1'
        brand: 'Intenso'
        model: '$1 $2'

      #########
      # Intex
      # @ref: http://intexmobile.in/index.aspx
      # @note: Zync also offers a "Cloud Z5" device
      #########
      # smartphones
      - regex: '; {0,2}(?:Intex[ _]|)(AQUA|Aqua)([ _\.\-])([^;/]+) {0,2}(?:Build|;)'
        device: '$1$2$3'
        brand: 'Intex'
        model: '$1 $3'
      - regex: '; {0,2}(Auqa Xtreme) {0,2}(?: Build|;)'
        device: '$1$2$3'
        brand: 'Intex'
        model: '$1 $3'

      # matches "INTEX CLOUD X1"
      - regex: '; {0,2}(?:INTEX|Intex)(?:[_ ]([^\ _;/]+))(?:[_ ]([^\ _;/]+)|) {0,2}(?:Build|;)'
        device: '$1 $2'
        brand: 'Intex'
        model: '$1 $2'
      # tablets
      - regex: '; {0,2}([iI]Buddy)[ _]?(Connect)(?:_|\?_| |)([^;/]*) {0,2}(?:Build|;)'
        device: '$1 $2 $3'
        brand: 'Intex'
        model: 'iBuddy $2 $3'
      - regex: '; {0,2}(I-Buddy)[ _]([^;/]+) {0,2}(?:Build|;)'
        device: '$1 $2'
        brand: 'Intex'
        model: 'iBuddy $2'

      #########
      # iOCEAN
      # @ref: http://www.iocean.cc/
      #########
      - regex: '; {0,2}(iOCEAN) ([^/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'iOCEAN'
        model: '$2'

      #########
      # i.onik
      # @ref: http://www.i-onik.de/
      #########
      - regex: '; {0,2}(TP\d{1,10}(?:\.\d{1,10}|)\-\d[^;/]+|TU-\d{4}A) Build'
        device: 'ionik $1'
        brand: 'ionik'
        model: '$1'
        type: 'tablet'

      #########
      # Irbis
      # @ref:
      #########
      - regex: '; {0,2}(TG97|TX08|TX17|TX18|TX22|TX68|TX97|TZ43|TZ709|TZ857)(?: Build|[;)])'
        device: '$1'
        brand: 'Irbis'
        model: '$1'

      #########
      # IRU.ru
      # @ref: http://www.iru.ru/catalog/soho/planetable/
      #########
      - regex: '; {0,2}(M702pro|M5301|M5302|M1003G)(?: Build|[;)])'
        device: '$1'
        brand: 'Iru'
        model: '$1'

      #########
      # iRULU
      # @ref:
      #########
      - regex: '; {0,2}([Ii]RULU[ ])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'iRULU'
        model: '$2'

      #########
      # Itel
      # @ref:
      #########
      - regex: '; {0,2}(itel[ _])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'Itel'
        model: '$2'

      #########
      # Ivio
      # @ref: http://www.ivio.com/mobile.php
      # @models: DG80,DG20,DE38,DE88,MD70
      #########
      - regex: '; {0,2}(DE88Plus|MD70) Build'
        device: '$1'
        brand: 'Ivio'
        model: '$1'
      - regex: '; {0,2}IVIO[_\-]([^;/]+) Build'
        device: '$1'
        brand: 'Ivio'
        model: '$1'

      #########
      # Jaytech
      # @ref: http://www.jay-tech.de/jaytech/servlet/frontend/
      #########
      - regex: '; {0,2}(TPC[-_](?:PA|PX|)[\d\.]+[A-Z]?|JAY-TECH) Build'
        device: '$1'
        brand: 'Jaytech'
        model: '$1'

      #########
      # Jiake
      # @ref:
      #########
      - regex: '; {0,2}(JK11)(?: Build|[;)])'
        device: '$1'
        brand: 'Jiake'
        model: '$1'

      #########
      # Jiayu
      # @ref: http://www.ejiayu.com/en/Product.html
      #########
      - regex: '; {0,2}(JY-.{1,300}?|JIAYU-.{1,300}?|G[234]S?)(?: Build|[;)])'
        device: '$1'
        brand: 'JiaYu'
        model: '$1'

      #########
      # Jinga
      # @ref: http://www.ejiayu.com/en/Product.html
      #########
      - regex: '; {0,2}(JINGA[ _])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2'
        brand: 'Jinga'
        model: '$2'

      #########
      # JXD
      # @ref: http://www.jxd.hk/
      #########
      - regex: '; {0,2}(JXD)[ _\-](.{1,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'JXD'
        model: '$2'
      - regex: '; {0,2}(P200S)__BUILD__'
        device: '$1'
        brand: 'JXD'
        model: '$1'

      #########
      # Karbonn
      # @ref: http://www.karbonnmobiles.com/products_tablet.php
      #########
      - regex: '; {0,2}Karbonn[ _]?([^;/]+) {0,2}(?:Build|;)'
        regex_flag: 'i'
        device: '$1'
        brand: 'Karbonn'
        model: '$1'
      - regex: '; {0,2}([^;]{1,50}) Build/Karbonn'
        device: '$1'
        brand: 'Karbonn'
        model: '$1'
      - regex: '; {0,2}(A\d{1,2}(?:\+| Plus)|A[13679]|A1\d|A5 Turbo|A6 Turbo|A7\*|A34|A37|A39|A99[\*i]|S20|ST8|ST10|ST7|Smart Tab3|Smart Tab2|Sparkle V|Titanium S\d{1,10}[^;/]*|Titanium Octane[^;/]*) +Build(?:(?!QMobile).)*$'
        device: '$1'
        brand: 'Karbonn'
        model: '$1'

      #########
      # Kazam
      # @ref: https://www.kazam.mobi/
      #########
      - regex: '; {0,2}Kazam ([^;/]+) {0,2}(?:Build|;)'
        regex_flag: 'i'
        device: '$1'
        brand: 'Kazam'
        model: '$1'
      - regex: '; {0,2}(Tornado|Tornado \d{1,10}|Trooper[^;/]+) {0,2}(?:Build|;)'
        regex_flag: 'i'
        device: '$1'
        brand: 'Kazam'
        model: '$1'

      #########
      # Keneksi
      # @ref:
      #########
      - regex: '; {0,2}(Keneksi|KENEKSI)([-_])(.{1,300}?)(?: Build|[;)])'
        device: '$1$2$3'
        brand: 'Keneksi'
        model: '$3'

      #########
      # KDDI (Operator Branded Device)
      # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
      #########
      - regex: 'ISW?\d|INFOBAR'
        group:
          - regex: '; {0,2}(IS01|IS03|IS05|IS\d{2}SH) Build'
            device: '$1'
            brand: 'Sharp'
            model: '$1'
          - regex: '; {0,2}(IS04) Build'
            device: '$1'
            brand: 'Regza'
            model: '$1'
          - regex: '; {0,2}(IS06|IS\d{2}PT) Build'
            device: '$1'
            brand: 'Pantech'
            model: '$1'
          - regex: '; {0,2}(IS11S) Build'
            device: '$1'
            brand: 'SonyEricsson'
            model: 'Xperia Acro'
          - regex: '; {0,2}(IS11CA) Build'
            device: '$1'
            brand: 'Casio'
            model: 'GzOne $1'
          - regex: '; {0,2}(IS11LG) Build'
            device: '$1'
            brand: 'LG'
            model: 'Optimus X'
          - regex: '; {0,2}(IS11N) Build'
            device: '$1'
            brand: 'Medias'
            model: '$1'
          - regex: '; {0,2}(IS11PT) Build'
            device: '$1'
            brand: 'Pantech'
            model: 'MIRACH'
          - regex: '; {0,2}(IS12F) Build'
            device: '$1'
            brand: 'Fujitsu'
            model: 'Arrows ES'
          # @ref: https://ja.wikipedia.org/wiki/IS12M
          - regex: '; {0,2}(IS12M) Build'
            device: '$1'
            brand: 'Motorola'
            model: 'XT909'
          - regex: '; {0,2}(IS12S) Build'
            device: '$1'
            brand: 'SonyEricsson'
            model: 'Xperia Acro HD'
          - regex: '; {0,2}(ISW11F) Build'
            device: '$1'
            brand: 'Fujitsu'
            model: 'Arrowz Z'
          - regex: '; {0,2}(ISW11HT) Build'
            device: '$1'
            brand: 'HTC'
            model: 'EVO'
          - regex: '; {0,2}(ISW11K) Build'
            device: '$1'
            brand: 'Kyocera'
            model: 'DIGNO'
          - regex: '; {0,2}(ISW11M) Build'
            device: '$1'
            brand: 'Motorola'
            model: 'Photon'
          - regex: '; {0,2}(ISW11SC) Build'
            device: '$1'
            brand: 'Samsung'
            model: 'GALAXY S II WiMAX'
          - regex: '; {0,2}(ISW12HT) Build'
            device: '$1'
            brand: 'HTC'
            model: 'EVO 3D'
          - regex: '; {0,2}(ISW13HT) Build'
            device: '$1'
            brand: 'HTC'
            model: 'J'
          - regex: '; {0,2}(ISW?[0-9]{2}[A-Z]{0,2}) Build'
            device: '$1'
            brand: 'KDDI'
            model: '$1'
          - regex: '; {0,2}(INFOBAR [^;/]+) Build'
            device: '$1'
            brand: 'KDDI'
            model: '$1'

      #########
      # Kiano
      # @ref: http://elegance.kiano.pl/en/
      #########
      - regex: '; {0,2}Kiano ?([^;/]+) Build/'
        regex_flag: 'i'
        device: '$1'
        brand: 'Kiano'
        model: '$1'

      #########
      # Kingcom
      # @ref: http://www.e-kingcom.com
      #########
      - regex: '; {0,2}(JOYPAD|Joypad)[ _]([^;/]+) Build/'
        device: '$1 $2'
        brand: 'Kingcom'
        model: '$1 $2'

      #########
      # KingTop
      # @ref:
      #########
      - regex: '; {0,2}(KT07)__BUILD__'
        device: '$1'
        brand: 'KingTop'
        model: '$1'

      #########
      # Kobo
      # @ref: https://en.wikipedia.org/wiki/Kobo_Inc.
      # @ref: http://www.kobo.com/devices#tablets
      #########
      - regex: '; {0,2}(Vox|VOX|Arc|arc 7|K080) Build/'
        regex_flag: 'i'
        device: '$1'
        brand: 'Kobo'
        model: '$1'
      - regex: '\b(Kobo Touch)\b'
        device: '$1'
        brand: 'Kobo'
        model: '$1'

      #########
      # Kurio
      # @ref: http://www.kurioworld.com/
      #########
      - regex: '; {0,2}(Kurio.{0,300}?) Build/'
        device: '$1'
        brand: 'Kurio'
        model: '$1'

      #########
      # K-Touch
      # @ref: ??
      #########
      - regex: '; {0,2}(K-Touch)[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Ktouch'
        model: '$2'

      #########
      # KT Tech
      # @ref: http://www.kttech.co.kr
      #########
      - regex: '; {0,2}((?:EV|KM)-S\d{1,10}[A-Z]?) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'KTtech'
        model: '$1'

      #########
      # Kyocera
      # @ref: http://www.android.com/devices/?country=all&m=kyocera
      #########
      - regex: '; {0,2}(Zio|Hydro|Torque|Event|EVENT|Echo|Milano|Rise|URBANO PROGRESSO|WX04K|WX06K|WX10K|KYL21|[12]0[12]K|302KC|C5[12]\d{2}|C6730|C6743|E6782|DM015K|C6740N)__BUILD__'
        device: '$1'
        brand: 'Kyocera'
        model: '$1'
      - regex: '; {0,2}KYOCERA-([^ ]+) Build/'
        device: '$1'
        brand: 'Kyocera'
        model: '$1'

      #########
      # Lafone
      # @ref:
      #########
      - regex: '; {0,2}(Lafone[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Lafone'
        model: '$2'

      #########
      # Landvo
      # @ref: http://www.kimovil.com/en/landvo-smartphones-prices
      #########
      - regex: '; {0,2}(L\d{3}[A-Z]?) {0,2}(?:;|\)|Build)'
        device: '$1'
        brand: 'Landvo'
        model: '$1'

      #########
      # Lanix
      # @ref:
      #########
      - regex: '; {0,2}(Lanix[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Lanix'
        model: '$2'

      #########
      # Lava
      # @ref: http://www.lavamobiles.com/
      #########
      - regex: '; {0,2}(?:LAVA[ _]|)IRIS[ _\-]?([^/;\)]+) {0,2}(?:;|\)|Build)'
        regex_flag: 'i'
        device: 'Iris $1'
        brand: 'Lava'
        model: 'Iris $1'
      - regex: '; {0,2}LAVA[ _]([^;/]+) Build'
        device: '$1'
        brand: 'Lava'
        model: '$1'
      - regex: '; {0,2}(X604|504Q\+|E-TAB IVORY|Pixel V2\+)__BUILD__'
        device: '$1'
        brand: 'Lava'
        model: '$1'

      #########
      # Leagoo
      # @ref: http://www.leagoo.cc/cs-mobile.html
      #########
      - regex: '; {0,2}(Lead .{1,300}?|shark1)__BUILD__'
        regex_flag: 'i'
        device: 'Leagoo $1'
        brand: 'Leagoo'
        model: '$1'

      #########
      # Lemon
      # @ref: http://www.lemonmobiles.com/products.php?type=1
      #########
      - regex: '; {0,2}(?:(Aspire A1)|(?:LEMON|Lemon)[ _]([^;/]+))_? Build'
        device: 'Lemon $1$2'
        brand: 'Lemon'
        model: '$1$2'

      #########
      # Lenco
      # @ref: http://www.lenco.com/c/tablets/
      #########
      - regex: '; {0,2}(TAB-1012) Build/'
        device: 'Lenco $1'
        brand: 'Lenco'
        model: '$1'
      - regex: '; Lenco ([^;/]+) Build/'
        device: 'Lenco $1'
        brand: 'Lenco'
        model: '$1'

      #########
      # Lenovo
      # @ref: http://support.lenovo.com/en_GB/downloads/default.page?#
      #########
      - regex: '; {0,2}(A1_07|A2107A-H|S2005A-H|S1-37AH0) Build'
        device: '$1'
        brand: 'Lenovo'
        model: '$1'
      - regex: '; {0,2}(Idea(?:Tab|[Pp]ad)|YOGA)[ _]?([^;/]+)[;]? Build'
        device: 'Lenovo $1 $2'
        brand: 'Lenovo'
        model: '$1 $2'
        type: 'tablet'
      - regex: '; {0,2}(ThinkPad) ?(Tablet) Build/'
        device: 'Lenovo $1 $2'
        brand: 'Lenovo'
        model: '$1 $2'
        type: 'tablet'
      - regex: '; {0,2}(?:LNV-|)(?:Lenovo Lenovo |=?[Ll]enovo[ _\-]?|LENOVO[ _])(.{1,300}?)(?:Build|[;/\)])'
        device: 'Lenovo $1'
        brand: 'Lenovo'
        model: '$1'
      - regex: '[;,] (?:Vodafone |)(SmartTab) ?(II) ?(\d{1,10}) Build/'
        device: 'Lenovo $1 $2 $3'
        brand: 'Lenovo'
        model: '$1 $2 $3'
        type: 'tablet'
      - regex: '; {0,2}(3GC101|3GW10[01]|A390|A3000|A680|A808|A850|A880|AT1010-T|K1|S6000D)__BUILD__'
        device: '$1'
        brand: 'Lenovo'
        model: '$1'
      - regex: '\b(?:Lenovo|LENOVO)+[ _\-]?([^,;:/ ]+)'
        device: 'Lenovo $1'
        brand: 'Lenovo'
        model: '$1'

      #########
      # Lexibook
      # @ref: http://www.lexibook.com/fr
      #########
      - regex: '; {0,2}(MFC\d{1,10})[A-Z]{2}([^;,/]*),? Build'
        device: '$1$2'
        brand: 'Lexibook'
        model: '$1$2'

      #########
      # LG
      # @ref: http://www.lg.com/uk/mobile
      #########
      - regex: '; {0,2}(Ally|AS\d{3}(?: 4G|)|E[34][0-9]{2}|GS-500|LS[6-8][0-9]{2}|VK810 4G|VS[6-9][0-9]+[^;/]+|VS425PP|Nexus [45]|Nexus 5X|GT540f?|TI320-DU|Optimus (?:2X|G|4X HD)|OptimusX4HD) {0,2}(?:Build|;)'
        device: '$1'
        brand: 'LG'
        model: '$1'
      - regex: '[;:] {0,2}(L-\d{1,10}[A-Z]|LGL\d{1,10}[A-Z]?)(?:/V\d{1,10}|) {0,2}(?:Build|[;\)])'
        device: '$1'
        brand: 'LG'
        model: '$1'
      - regex: '; {0,2}(LG-)([A-Z]{1,2}\d{2,}[^,;/\)\(]*?)(?:Build| V\d{1,10}|[,;/\)\(]|$)'
        device: '$1$2'
        brand: 'LG'
        model: '$2'
      - regex: '; {0,2}(LG[ \-]|LG)([^;/]+)[;/]? Build'
        device: '$1$2'
        brand: 'LG'
        model: '$2'
      - regex: '^(LG)-([^;/]+)/ Mozilla/.{0,300}; Android'
        device: '$1 $2'
        brand: 'LG'
        model: '$2'

      #########
      # Lovme
      # @ref:
      #########
      - regex: '; {0,2}(Lovme[-])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Lovme'
        model: '$2'

      #########
      # Lyf
      # @ref:
      #########
      - regex: '; {0,2}(LS-4005|LS-4503|LS-4505)__BUILD__'
        device: '$1'
        brand: 'Lyf'
        model: '$1'

      #########
      # M-way
      # @ref:
      #########
      - regex: '; {0,2}(MD948G)__BUILD__'
        device: '$1'
        brand: 'M-way'
        model: '$1'

      #########
      # Magic
      # @ref:
      #########
      - regex: '; {0,2}(Magic[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Magic'
        model: '$2'

      #########
      # Malata
      # @ref: http://www.malata.com/en/products.aspx?classid=680
      #########
      - regex: '; {0,2}((?:SMB|smb)[^;/]+) Build/'
        device: '$1'
        brand: 'Malata'
        model: '$1'
      - regex: '; {0,2}(?:Malata|MALATA) ([^;/]+) Build/'
        device: '$1'
        brand: 'Malata'
        model: '$1'

      #########
      # Manta
      # @ref: http://www.manta.com.pl/en
      #########
      - regex: '; {0,2}(MS[45][0-9]{3}|MID0[568][NS]?|MID[1-9]|MID[78]0[1-9]|MID970[1-9]|MID100[1-9]) Build/'
        device: '$1'
        brand: 'Manta'
        model: '$1'

      #########
      # Marshal
      # @ref:
      #########
      - regex: '; {0,2}(ME-701)__BUILD__'
        device: '$1'
        brand: 'Marshal'
        model: '$1'

      #########
      # Match
      # @ref: http://www.match.net.cn/products.asp
      #########
      - regex: '; {0,2}(M1052|M806|M9000|M9100|M9701|MID100|MID120|MID125|MID130|MID135|MID140|MID701|MID710|MID713|MID727|MID728|MID731|MID732|MID733|MID735|MID736|MID737|MID760|MID800|MID810|MID820|MID830|MID833|MID835|MID860|MID900|MID930|MID933|MID960|MID980) Build/'
        device: '$1'
        brand: 'Match'
        model: '$1'

      #########
      # Maxx
      # @ref: http://www.maxxmobile.in/
      # @models: Maxx MSD7-Play, Maxx MX245+ Trance, Maxx AX8 Race, Maxx MSD7 3G- AX50, Maxx Genx Droid 7 - AX40, Maxx AX5 Duo,
      #   Maxx AX3 Duo, Maxx AX3, Maxx AX8 Note II (Note 2), Maxx AX8 Note I, Maxx AX8, Maxx AX5 Plus, Maxx MSD7 Smarty,
      #   Maxx AX9Z Race,
      #   Maxx MT150, Maxx MQ601, Maxx M2020, Maxx Sleek MX463neo, Maxx MX525, Maxx MX192-Tune, Maxx Genx Droid 7 AX353,
      # @note: Need more User-Agents!!!
      #########
      - regex: '; {0,2}(GenxDroid7|MSD7.{0,300}|AX\d{1,2}(?:[A-Z][A-z]*|)|Tab 701|Tab 722) Build/'
        device: 'Maxx $1'
        brand: 'Maxx'
        model: '$1'

      #########
      # Mediacom
      # @ref: http://www.mediacomeurope.it/
      #########
      - regex: '; {0,2}(M-PP[^;/]+|PhonePad ?\d{2,}[^;/]+) Build'
        device: 'Mediacom $1'
        brand: 'Mediacom'
        model: '$1'
      - regex: '; {0,2}(M-MP[^;/]+|SmartPad ?\d{2,}[^;/]+) Build'
        device: 'Mediacom $1'
        brand: 'Mediacom'
        model: '$1'

      #########
      # Medion
      # @ref: http://www.medion.com/en/
      #########
      - regex: '; {0,2}(?:MD_|)LIFETAB[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: 'Medion Lifetab $1'
        brand: 'Medion'
        model: 'Lifetab $1'
      - regex: '; {0,2}MEDION ([^;/]+) Build'
        device: 'Medion $1'
        brand: 'Medion'
        model: '$1'
      - regex: '; {0,2}(E4001|E4004|P4501)__BUILD__'
        device: 'Medion $1'
        brand: 'Medion'
        model: '$1'

      #########
      # MegaFon
      # @ref:
      #########
      - regex: '; {0,2}(?:(MegaFon[ _])(.{1,300}?)|(MS3A))__BUILD__'
        device: '$1$2$3'
        brand: 'MegaFon'
        model: '$2$3'

      #########
      # Meizu
      # @ref: http://www.meizu.com
      #########
      - regex: '; {0,2}(M030|M031|M035|M040|M065|m9|M3s|MZ-MX5)__BUILD__'
        device: 'Meizu $1'
        brand: 'Meizu'
        model: '$1'
      - regex: '; {0,2}(?:meizu_|MEIZU )(.{1,300}?) {0,2}(?:Build|[;\)])'
        device: 'Meizu $1'
        brand: 'Meizu'
        model: '$1'

      #########
      # Micromax
      # @ref: http://www.micromaxinfo.com
      #########
      - regex: '\b(?:Micromax[ _\-]?)(P[A-Za-z0-9]+)'
        regex_flag: 'i'
        device: 'Micromax $1'
        brand: 'Micromax'
        model: '$1'
      - regex: '\b(?:Micromax[ _\-])+([A-Za-z0-9]+)'
        regex_flag: 'i'
        device: 'Micromax $1'
        brand: 'Micromax'
        model: '$1'
      # be carefull here with Acer e.g. A500
      - regex: '; {0,2}(A[02-9]\d|A[12]\d{2}|A90S|A110Q|X505|A068|A47)__BUILD__(?:(?!QMobile).)*$'
        regex_flag: 'i'
        device: 'Micromax $1'
        brand: 'Micromax'
        model: '$1'
      - regex: '; {0,2}(P\d{3}|P\d{3})(?:\(Funbook\)|) Build'
        regex_flag: 'i'
        device: 'Micromax $1'
        brand: 'Micromax'
        model: '$1'

      #########
      # Mito
      # @ref: http://new.mitomobile.com/
      #########
      - regex: '; {0,2}(MITO)[ _\-]?([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Mito'
        model: '$2'

      #########
      # Mobistel
      # @ref: http://www.mobistel.com/
      #########
      - regex: '; {0,2}(Cynus)[ _](F5|T\d|.{1,300}?) {0,2}(?:Build|[;/\)])'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Mobistel'
        model: '$1 $2'

      #########
      # Mobiwire
      # @ref: http://mobiwire.com/
      #########
      - regex: '; {0,2}(Ahiga|Auriga[^;]*|Pegasus) {0,2}(?:Build|[;/\)])'
        device: '$1'
        brand: 'Mobiwire'
        model: '$1'

      #########
      # Modecom
      # @ref: http://www.modecom.eu/tablets/portal/
      #########
      - regex: '; {0,2}(MODECOM |)(FreeTab) ?([^;/]+) Build'
        regex_flag: 'i'
        device: '$1$2 $3'
        brand: 'Modecom'
        model: '$2 $3'
      - regex: '; {0,2}(MODECOM )([^;/]+) Build'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Modecom'
        model: '$2'

      #########
      # Motorola
      # @ref: http://www.motorola.com/us/shop-all-mobile-phones/
      #########
      - regex: '; {0,2}(MZ\d{3}\+?|MZ\d{3} 4G|Xoom[^;/]*|XOOM[^;/]*|RAZR HD) Build'
        device: 'Motorola $1'
        brand: 'Motorola'
        model: '$1'
      - regex: '; {0,2}(Milestone )(XT[^;/]*) Build'
        device: 'Motorola $1$2'
        brand: 'Motorola'
        model: '$2'
      - regex: '; {0,2}(Motoroi ?x|Droid X|DROIDX) Build'
        regex_flag: 'i'
        device: 'Motorola $1'
        brand: 'Motorola'
        model: 'DROID X'
      - regex: '; {0,2}(Droid[^;/]*|DROID[^;/]*|Milestone[^;/]*|Photon|Triumph|Devour|Titanium) Build'
        device: 'Motorola $1'
        brand: 'Motorola'
        model: '$1'
      - regex: '; {0,2}(A555|A85[34].{0,300}?|A95[356]|ME[58]\d{2}\+?|ME600|ME632|ME722|MB\d{3}\+?|MT680|MT710|MT870|MT887|MT917|WX435|WX453|WX44[25]|XT\d{3,4}[A-Z\+]*|XT\d{3,4}-\d{2}|CL[iI]Q|CL[iI]Q XT|Nexus 6)(?: Build|\))'
        device: 'Motorola $1'
        brand: 'Motorola'
        model: '$1'
      - regex: '; {0,2}(Motorola MOT-|Motorola[ _\-]|MOT\-?)([^;/]+) Build'
        device: 'Motorola $1$2'
        brand: 'Motorola'
        model: '$2'
      - regex: '; {0,2}(Moto[_ ]?|MOT\-)([^;/]+) Build'
        device: 'Motorola $1$2'
        brand: 'Motorola'
        model: '$2'

      #########
      # MpMan
      # @ref: http://www.mpmaneurope.com
      #########
      - regex: '; {0,2}((?:MP[DQ]C|MPG\d{1,4}|MP\d{3,4}|MID(?:(?:10[234]|114|43|7[247]|8[24]|7)C|8[01]1))[^;/]*) Build'
        device: '$1'
        brand: 'Mpman'
        model: '$1'

      #########
      # MSI
      # @ref: http://www.msi.com/product/windpad/
      #########
      - regex: '; {0,2}(?:MSI[ _]|)(Primo\d{1,10}|Enjoy[ _\-][^;/]+) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'Msi'
        model: '$1'

      #########
      # MTC
      # @ref:
      #########
      - regex: '; {0,2}(MTC[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'MTC'
        model: '$2'

      #########
      # Multilaser
      # http://www.multilaser.com.br/listagem_produtos.php?cat=5
      #########
      - regex: '; {0,2}Multilaser[ _]([^;/]+) Build'
        device: '$1'
        brand: 'Multilaser'
        model: '$1'

      #########
      # MyPhone
      # @ref: http://myphone.com.ph/
      #########
      - regex: '; {0,2}(My)[_]?(Pad)[ _]([^;/]+) Build'
        device: '$1$2 $3'
        brand: 'MyPhone'
        model: '$1$2 $3'
      - regex: '; {0,2}My\|?Phone[ _]([^;/]+)(?: {0,2}Build|;)'
        regex_flag: 'i'
        device: 'MyPhone $1'
        brand: 'MyPhone'
        model: '$1'
      - regex: '; {0,2}(?:(A\d{1,10}|A818i)[ _](Duo)|(A919i?)) Build'
        regex_flag: 'i'
        device: '$1 $2$3'
        brand: 'MyPhone'
        model: '$1 $2$3'

      #########
      # Mytab
      # @ref: http://www.mytab.eu/en/category/mytab-products/
      #########
      - regex: '; {0,2}(my(?:Tab|TAB)[^;/]*) Build'
        device: '$1'
        brand: 'Mytab'
        model: '$1'

      #########
      # Mysaga
      # @ref: http://www.sagaphones.com
      #########
      - regex: '; {0,2}(?:MY ?SAGA|MySAGA)[ -]([^;/]+) Build'
        device: 'Mysaga $1'
        brand: 'Mysaga'
        model: '$1'

      #########
      # Mystery
      # @ref:
      #########
      - regex: '; {0,2}(MID-721)__BUILD__'
        device: '$1'
        brand: 'Mystery'
        model: '$1'

      #########
      # Nabi
      # @ref: https://www.nabitablet.com
      #########
      - regex: '; {0,2}(NABI2?-)([^;/]+) Build/'
        device: '$1$2'
        brand: 'Nabi'
        model: '$2'

      #########
      # Nec Medias
      # @ref: http://www.n-keitai.com/
      #########
      - regex: '; {0,2}(N-\d{1,10}[CDE]|101N) Build/'
        device: '$1'
        brand: 'Nec'
        model: '$1'
      - regex: '; ?(NEC-)(.{0,300}) Build/'
        device: '$1$2'
        brand: 'Nec'
        model: '$2'
      - regex: '; {0,2}(LT-NA7) Build/'
        device: '$1'
        brand: 'Nec'
        model: 'Lifetouch Note'

      #########
      # NEO
      # @ref:
      #########
      - regex: '; {0,2}(1080P-N003|N003)__BUILD__'
        device: '$1'
        brand: 'NEO'
        model: '$1'

      #########
      # Nextbook
      # @ref: http://nextbookusa.com
      #########
      - regex: '; {0,2}(NXM\d{1,10}[A-z0-9_]*|Next\d[A-z0-9_ \-]*|NEXT\d[A-z0-9_ \-]*|Nextbook [A-z0-9_ ]*|DATAM803HC|M805)(?: Build|[\);])'
        device: '$1'
        brand: 'Nextbook'
        model: '$1'

      #########
      # Nextway
      # @ref:
      #########
      - regex: '; {0,2}(F10X)__BUILD__'
        device: '$1'
        brand: 'Nextway'
        model: '$1'

      #########
      # Neken
      # @ref: http://www.neken.cn/
      #########
      - regex: '; {0,2}neken ([^;/]*) Build/'
        device: 'Neken $1'
        brand: 'Neken'

      #########
      # Newman
      # @ref: ?
      #########
      - regex: '; {0,2}Newman ?([^;/]*) Build/'
        regex_flag: 'i'
        device: 'Newman $1'
        brand: 'Newman'
        model: '$1'

      #########
      # NGM Mobile
      # @ref: http://www.ngm-mobile.com/
      #########
      - regex: '; {0,2}(Dynamic_(?:Fun|Maxi|Milo)|Enspert_Miracle|Forward_(?:Art|Escape|Prime|Run|Young)|Stylo) Build/'
        device: 'NGM $1'
        brand: 'NGM'
        model: '$1'
      - regex: '; {0,2}NGM[ _](Dynamic Star|Miracle|P0laris|Wilco) Build/'
        device: 'NGM $1'
        brand: 'NGM'
        model: '$1'

      #########
      # Nikon
      # @ref: http://imaging.nikon.com/lineup/coolpix/s/s800c/
      #########
      - regex: '; {0,2}(COOLPIX S800c) Build/'
        device: '$1'
        brand: 'Nikon'
        type: 'camera'

      #########
      # Nokia
      # @ref: http://www.nokia.com
      #########
      - regex: '; {0,2}(Nokia)([ _\-]*)([^;/]*) Build'
        regex_flag: 'i'
        device: '$1$2$3'
        brand: 'Nokia'
        model: '$3'
      - regex: '; {0,5}(genm14|TA-10\d{2})__BUILD__'
        device: '$1'
        brand: 'Nokia'
        model: '$1'

      #########
      # Nomi
      # @ref:
      #########
      - regex: '; {0,2}(C07000)__BUILD__'
        device: '$1'
        brand: 'Nomi'
        model: '$1'

      #########
      # Nook
      # @ref:
      # TODO nook browser/1.0
      #########
      - regex: '; {0,2}(Nook ?|Barnes & Noble Nook |BN )([^;/]+) Build'
        device: '$1$2'
        brand: 'Nook'
        model: '$2'
      - regex: '; {0,2}(NOOK |)(BN[TR]V\d{1,10}A?|LogicPD Zoom2) Build'
        device: '$1$2'
        brand: 'Nook'
        model: '$2'
      - regex: '; Build/(Nook)'
        device: '$1'
        brand: 'Nook'
        model: 'Tablet'

      #########
      # NTT System
      # @ref:
      #########
      - regex: '; {0,2}(NTT[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'NTT System'
        model: '$2'

      #########
      # Nuqleo
      # @ref:
      #########
      - regex: '; {0,2}(Nuqleo;[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Nuqleo'
        model: '$2'

      #########
      # NYX
      # @ref: http://www.nyxmobilemexico.com/
      #########
      - regex: '; {0,2}(NYX)_([^;/_]+)(?:_([^;/_]+)|) Build'
        device: '$1 $2 $3'
        brand: 'NYX'
        model: '$2 $3'

      #########
      # oblio
      # @ref:
      #########
      - regex: '; {0,2}(TE_7512)__BUILD__'
        device: '$1'
        brand: 'oblio'
        model: '$1'

      #########
      # Olivetti
      # @ref: http://www.olivetti.de/EN/Page/t02/view_html?idp=348
      #########
      - regex: '; {0,2}(OP110|OliPad[^;/]+) Build'
        device: 'Olivetti $1'
        brand: 'Olivetti'
        model: '$1'

      #########
      # Omega
      # @ref: http://omega-technology.eu/en/produkty/346/tablets
      # @note: MID tablets might get matched by CobyKyros first
      # @models: (T107|MID(?:700[2-5]|7031|7108|7132|750[02]|8001|8500|9001|971[12])
      #########
      - regex: '; {0,2}OMEGA[ _\-](MID[^;/]+) Build'
        device: 'Omega $1'
        brand: 'Omega'
        model: '$1'
      - regex: '^(MID7500|MID\d{1,10}) Mozilla/5\.0 \(iPad;'
        device: 'Omega $1'
        brand: 'Omega'
        model: '$1'

      #########
      # Oneplus
      # @ref: https://oneplus.net/de
      #########
      - regex: '; {0,2}(?:(?:One |)A0001|ONEPLUS One) Build'
        device: 'Oneplus One'
        brand: 'Oneplus'
        model: 'One'

      #########
      # ONDA
      # @ref:
      #########
      - regex: '; {0,2}(ONDA[ ])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'ONDA'
        model: '$2'

      #########
      # OpenPeak
      # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
      #########
      - regex: '; {0,2}((?:CIUS|cius)[^;/]*) Build'
        device: 'Openpeak $1'
        brand: 'Openpeak'
        model: '$1'

      #########
      # Oppo
      # @ref: http://en.oppo.com/products/
      #########
      - regex: '; {0,2}(Find ?(?:5|7a)|R8[012]\d{1,2}|T703\d{0,1}|U70\d{1,2}T?|X90\d{1,2}|A1601|1107|R831|x909)__BUILD__'
        device: 'Oppo $1'
        brand: 'Oppo'
        model: '$1'
      - regex: '; {0,5}OPPO ?([^;/]+) Build/'
        device: 'Oppo $1'
        brand: 'Oppo'
        model: '$1'

      #########
      # Overmax
      # @ref:
      #########
      - regex: '; {0,2}(OV-)(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Overmax'
        model: '$2'

      #########
      # Odys
      # @ref: http://odys.de
      #########
      - regex: '; {0,2}(?:Odys\-|ODYS\-|ODYS )([^;/]+) Build'
        device: 'Odys $1'
        brand: 'Odys'
        model: '$1'
      - regex: '; {0,2}(SELECT) ?(7) Build'
        device: 'Odys $1 $2'
        brand: 'Odys'
        model: '$1 $2'
      - regex: '; {0,2}(PEDI)_(PLUS)_(W) Build'
        device: 'Odys $1 $2 $3'
        brand: 'Odys'
        model: '$1 $2 $3'
      # Weltbild - Tablet PC 4 = Cat Phoenix = Odys Tablet PC 4?
      - regex: '; {0,2}(AEON|ARIA|AVIATOR|BRAVIO|CONNECT7PRO|CONNECT8PLUS|EOS10|FUSION|FUSION2IN1|Genio|GATE|IEOS.{0,300}?|IRON|INTELLITAB7|JUNIORTAB|Loox|LOOX|LOOX Plus|MIRON|Motion|NEO_QUAD10|NERON|NOON|NOON970|NOON_PRO|NEXT|OPOS|PEDI.{0,300}?|PRIME.{0,300}?|PRO_Q8|SKYPLUS3G|STUDYTAB|TABLO|Tablet-PC-4|UNO_X8|UNO_X10|VISIO|XELIO.{0,300}?|Xelio ?\d{1,10} ?[Pp]ro|XelioPT2Pro|XENO10|XPRESS PRO)__BUILD__'
        device: 'Odys $1'
        brand: 'Odys'
        model: '$1'

      #########
      # OnePlus
      # @ref https://oneplus.net/
      #########
      - regex: '; (ONE [a-zA-Z]\d{1,10}) Build/'
        device: 'OnePlus $1'
        brand: 'OnePlus'
        model: '$1'
      - regex: '; (ONEPLUS [a-zA-Z]\d{1,10}) Build/'
        device: 'OnePlus $1'
        brand: 'OnePlus'
        model: '$1'

      #########
      # Orion
      # @ref: http://www.orion.ua/en/products/computer-products/tablet-pcs.html
      #########
      - regex: '; {0,2}(TP-\d{1,10}) Build/'
        device: 'Orion $1'
        brand: 'Orion'
        model: '$1'

      #########
      # Oysters
      # @ref:
      #########
      - regex: '; {0,2}(Oysters|OYSTERS)[ _](.{0,300}?)__BUILD__'
        device: '$1 $2'
        brand: 'Oysters'
        model: '$2'
      - regex: '; {0,2}(T\d{1,2}[A-Z]{1,2}_?3G|PacificVS)__BUILD__'
        device: '$1'
        brand: 'Oysters'
        model: '$1'

      #########
      # PackardBell
      # @ref: http://www.packardbell.com/pb/en/AE/content/productgroup/tablets
      #########
      - regex: '; {0,2}(G100W?) Build/'
        device: 'PackardBell $1'
        brand: 'PackardBell'
        model: '$1'

      #########
      # Panasonic
      # @ref: http://panasonic.jp/mobile/
      # @models: T11, T21, T31, P11, P51, Eluga Power, Eluga DL1
      # @models: (tab) Toughpad FZ-A1, Toughpad JT-B1
      #########
      - regex: '; {0,2}(Panasonic)[_ ]([^;/]+) Build'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      # Toughpad
      - regex: '; {0,2}(FZ-A1B|JT-B1|Eluga_Arc_2)__BUILD__'
        device: 'Panasonic $1'
        brand: 'Panasonic'
        model: '$1'
      # Eluga Power
      - regex: '; {0,2}(dL1|DL1) Build'
        device: 'Panasonic $1'
        brand: 'Panasonic'
        model: '$1'

      #########
      # Pantech
      # @href: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=PANTECH
      # @href: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=VEGA
      # @models: ADR8995, ADR910L, ADR930VW, C790, CDM8992, CDM8999, IS06, IS11PT, P2000, P2020, P2030, P4100, P5000, P6010, P6020, P6030, P7000, P7040, P8000, P8010, P9020, P9050, P9060, P9070, P9090, PT001, PT002, PT003, TXT8040, TXT8045, VEGA PTL21
      #########
      - regex: '; {0,2}(SKY[ _]|)(IM\-[AT]\d{3}[^;/]+).{0,300} Build/'
        device: 'Pantech $1$2'
        brand: 'Pantech'
        model: '$1$2'
      - regex: '; {0,2}((?:ADR8995|ADR910L|ADR930L|ADR930VW|PTL21|P8000)(?: 4G|)) Build/'
        device: '$1'
        brand: 'Pantech'
        model: '$1'
      - regex: '; {0,2}Pantech([^;/]+).{0,300} Build/'
        device: 'Pantech $1'
        brand: 'Pantech'
        model: '$1'

      #########
      # Papayre
      # @ref: http://grammata.es/
      #########
      - regex: '; {0,2}(papyre)[ _\-]([^;/]+) Build/'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Papyre'
        model: '$2'

      #########
      # Pearl
      # @ref: http://www.pearl.de/c-1540.shtml
      #########
      - regex: '; {0,2}(?:Touchlet |)(X10\.[^;/]+) Build/'
        device: 'Pearl $1'
        brand: 'Pearl'
        model: '$1'

      #########
      # Pegatron
      # @ref:
      #########
      - regex: '; {0,2}(chagall)__BUILD__'
        device: '$1'
        brand: 'Pegatron'
        model: '$1'

      #########
      # Pentagram
      # @ref:
      #########
      - regex: '; {0,2}(Pentagram)(.{1,300}?)__BUILD__'
        device: '$1'
        brand: 'Pentagram'
        model: '$1'

      #########
      # Perfeo
      # @ref:
      #########
      - regex: '; {0,2}(PATG7506HD|9103W)__BUILD__'
        device: '$1'
        brand: 'Perfeo'
        model: '$1'

      #########
      # Phicomm
      # @ref: http://www.phicomm.com.cn/
      # @ref: http://www.phicommasia.com/
      #########
      - regex: '; PHICOMM (i800) Build/'
        device: 'Phicomm $1'
        brand: 'Phicomm'
        model: '$1'
      - regex: '; PHICOMM ([^;/]+) Build/'
        device: 'Phicomm $1'
        brand: 'Phicomm'
        model: '$1'
      - regex: '; {0,2}(FWS\d{3}[^;/]+|i600|i813w) Build/'
        device: 'Phicomm $1'
        brand: 'Phicomm'
        model: '$1'

      #########
      # Philips
      # @ref: http://www.support.philips.com/support/catalog/products.jsp?_dyncharset=UTF-8&country=&categoryid=MOBILE_PHONES_SMART_SU_CN_CARE&userLanguage=en&navCount=2&groupId=PC_PRODUCTS_AND_PHONES_GR_CN_CARE&catalogType=&navAction=push&userCountry=cn&title=Smartphones&cateId=MOBILE_PHONES_CA_CN_CARE
      # @TODO: Philips Tablets User-Agents missing!
      # @ref: http://www.support.philips.com/support/catalog/products.jsp?_dyncharset=UTF-8&country=&categoryid=ENTERTAINMENT_TABLETS_SU_CN_CARE&userLanguage=en&navCount=0&groupId=&catalogType=&navAction=push&userCountry=cn&title=Entertainment+Tablets&cateId=TABLETS_CA_CN_CARE
      #########
      # @note: this a best guess according to available philips models. Need more User-Agents
      - regex: '; {0,2}(D633|D822|D833|T539|PI3210G|T939|V726|W335|W336|W337|W3568|W536|W5510|W626|W632|W6350|W6360|W6500|W732|W736|W737|W7376|W820|W832|W8355|W8500|W8510|W930)__BUILD__'
        device: '$1'
        brand: 'Philips'
        model: '$1'
      - regex: '; {0,2}(?:Philips|PHILIPS)[ _-](.{1,300}?)__BUILD__'
        device: 'Philips $1'
        brand: 'Philips'
        model: '$1'

      #########
      # Pipo
      # @ref: http://www.pipo.cn/En/
      #########
      - regex: 'Android 4\..{0,300}; {0,2}(M[12356789]|U[12368]|S[123])\ ?(pro|) Build'
        device: 'Pipo $1$2'
        brand: 'Pipo'
        model: '$1$2'
      - regex: '; {0,2}(M7T|P93G|i75|M83g)__BUILD__'
        device: '$1'
        brand: 'Pipo'
        model: '$1'

      #########
      # PMedia
      # @ref:
      #########
      - regex: '; {0,2}(PMSmart450)__BUILD__'
        device: '$1'
        brand: 'PMedia'
        model: '$1'

      #########
      # Ployer
      # @ref: http://en.ployer.cn/
      #########
      - regex: '; {0,2}(MOMO[^;/]+) Build'
        device: '$1'
        brand: 'Ployer'
        model: '$1'

      #########
      # Polaroid/ Acho
      # @ref: http://polaroidstore.com/store/start.asp?category_id=382&category_id2=0&order=title&filter1=&filter2=&filter3=&view=all
      #########
      - regex: '; {0,2}(?:Polaroid[ _]|)((?:MIDC\d{3,}|PMID\d{2,}|PTAB\d{3,})[^;/]*)(\/[^;/]*|) Build/'
        device: '$1'
        brand: 'Polaroid'
        model: '$1'
      - regex: '; {0,2}(?:Polaroid )(Tablet) Build/'
        device: '$1'
        brand: 'Polaroid'
        model: '$1'

      #########
      # Pomp
      # @ref: http://pompmobileshop.com/
      #########
      - regex: '; {0,2}(POMP)[ _\-](.{1,300}?) {0,2}(?:Build|[;/\)])'
        device: '$1 $2'
        brand: 'Pomp'
        model: '$2'

      #########
      # Positivo
      # @ref: http://www.positivoinformatica.com.br/www/pessoal/tablet-ypy/
      #########
      - regex: '; {0,2}(TB07STA|TB10STA|TB07FTA|TB10FTA) Build/'
        device: '$1'
        brand: 'Positivo'
        model: '$1'
      - regex: '; {0,2}(?:Positivo |)((?:YPY|Ypy)[^;/]+) Build/'
        device: '$1'
        brand: 'Positivo'
        model: '$1'

      #########
      # POV
      # @ref: http://www.pointofview-online.com/default2.php
      # @TODO: Smartphone Models MOB-3515, MOB-5045-B missing
      #########
      - regex: '; {0,2}(MOB-[^;/]+) Build/'
        device: '$1'
        brand: 'POV'
        model: '$1'
      - regex: '; {0,2}POV[ _\-]([^;/]+) Build/'
        device: 'POV $1'
        brand: 'POV'
        model: '$1'
      - regex: '; {0,2}((?:TAB-PLAYTAB|TAB-PROTAB|PROTAB|PlayTabPro|Mobii[ _\-]|TAB-P)[^;/]*) Build/'
        device: 'POV $1'
        brand: 'POV'
        model: '$1'

      #########
      # Prestigio
      # @ref: http://www.prestigio.com/catalogue/MultiPhones
      # @ref: http://www.prestigio.com/catalogue/MultiPads
      #########
      - regex: '; {0,2}(?:Prestigio |)((?:PAP|PSP|PMP|PMT)\d.{0,300}?)__BUILD__'
        device: 'Prestigio $1'
        brand: 'Prestigio'
        model: '$1'

      #########
      # Proscan
      # @ref: http://www.proscanvideo.com/products-search.asp?itemClass=TABLET&itemnmbr=
      #########
      - regex: '; {0,2}(PLT[0-9]{4}.{0,300}) Build/'
        device: '$1'
        brand: 'Proscan'
        model: '$1'

      #########
      # QMobile
      # @ref: http://www.qmobile.com.pk/
      #########
      - regex: '; {0,2}(A2|A5|A8i?|A900i?|A950)_?(Classic|) Build'
        device: '$1 $2'
        brand: 'Qmobile'
        model: '$1 $2'
      - regex: '; {0,2}(A\d{1,10}) Build.{0,300}QMobile'
        device: '$1'
        brand: 'Qmobile'
        model: '$1 $2'
      - regex: '; {0,2}(Q[Mm]obile)_([^_]+)_([^_;/\)]+)(?: Build|\)|;)'
        device: 'Qmobile $2 $3'
        brand: 'Qmobile'
        model: '$2 $3'
      - regex: '; {0,2}(Q[Mm]obile)[_ ]([^;/\)]+)(?: Build|\)|;)'
        device: 'Qmobile $2'
        brand: 'Qmobile'
        model: '$2'

      #########
      # Qmobilevn
      # @ref: http://qmobile.vn/san-pham.html
      #########
      - regex: '; {0,2}(Q\-Smart)[ _]([^;/]+) Build/'
        device: '$1 $2'
        brand: 'Qmobilevn'
        model: '$2'
      - regex: '; {0,2}(Q\-?[Mm]obile)[ _\-](S[^;/]+) Build/'
        device: '$1 $2'
        brand: 'Qmobilevn'
        model: '$2'

      #########
      # Quanta
      # @ref: ?
      #########
      - regex: '; {0,2}(TA1013|QMV7A|QTAQZ3) Build'
        device: '$1'
        brand: 'Quanta'
        model: '$1'

      #########
      # Ramos
      # @ref: http://www.ramos-tablet.com/
      #########
      - regex: '; {0,2}Ramos ?([^;/]+) Build/'
        device: 'Ramos $1'
        brand: 'Ramos'
        model: '$1'
        type: 'tablet'

      #########
      # RCA
      # @ref: http://rcamobilephone.com/
      #########
      - regex: '; (RCT\w+) Build/'
        device: '$1'
        brand: 'RCA'
        model: '$1'

      #########
      # Ritmix
      # @ref:
      #########
      - regex: '; (RMD-\d{1,10})(?: Build|[;)])'
        device: '$1'
        brand: 'Ritmix'
        model: '$1'

      #########
      # Rockchip
      # @ref: http://www.rock-chips.com/a/cn/product/index.html
      # @note: manufacturer sells chipsets - I assume that these UAs are dev-boards
      #########
      - regex: '; {0,2}(RK\d{1,10}),? Build/'
        device: '$1'
        brand: 'Rockchip'
        model: '$1'
      - regex: ' Build/(RK\d{1,10})'
        device: '$1'
        brand: 'Rockchip'
        model: '$1'

      #########
      # Runbo
      # @ref: http://www.runbodirect.co.uk/
      #########
      - regex: '; {0,2}Runbo([^;/]+) Build/'
        device: 'Runbo $1'
        brand: 'Runbo'
        model: '$1'

      #########
      # Sharp
      # @ref: http://www.sharp-phone.com/en/index.html
      # @ref: http://www.android.com/devices/?country=all&m=sharp
      #########
      - regex: '; {0,2}(SH\-?\d\d[^;/]+|SBM\d[^;/]+|SH[LTV]\d{2}|[34]0\dSH) Build'
        device: 'Sharp $1'
        brand: 'Sharp'
        model: '$1'
      - regex: '; {0,2}(SHARP[ -])([^;/]+) Build'
        device: '$1$2'
        brand: 'Sharp'
        model: '$2'

      #########
      # Simvalley
      # @ref: http://www.simvalley-mobile.de/
      #########
      - regex: '; {0,2}(SPX[_\-]\d[^;/]*) Build/'
        device: '$1'
        brand: 'Simvalley'
        model: '$1'
      - regex: '; {0,2}(SX7\-PEARL\.GmbH) Build/'
        device: '$1'
        brand: 'Simvalley'
        model: '$1'
      - regex: '; {0,2}(SP[T]?\-\d{2}[^;/]*) Build/'
        device: '$1'
        brand: 'Simvalley'
        model: '$1'

      #########
      # Shenzhen Kingzone
      # @ref:
      #########
      - regex: '; {0,2}(K1 turbo)__BUILD__'
        device: '$1'
        brand: 'Shenzhen Kingzone'
        model: '$1'

      #########
      # SK Telesys
      # @ref: http://www.sk-w.com/phone/phone_list.jsp
      # @ref: http://www.android.com/devices/?country=all&m=sk-telesys
      #########
      - regex: '; {0,2}(SK\-.{0,300}) Build/'
        device: '$1'
        brand: 'SKtelesys'
        model: '$1'

      #########
      # Skytex
      # @ref: http://skytex.com/android
      #########
      - regex: '; {0,2}(?:SKYTEX|SX)-([^;/]+) Build'
        device: '$1'
        brand: 'Skytex'
        model: '$1'
      - regex: '; {0,2}(IMAGINE [^;/]+) Build'
        device: '$1'
        brand: 'Skytex'
        model: '$1'

      #########
      # SmartQ
      # @ref: http://en.smartdevices.com.cn/Products/
      # @models: Z8, X7, U7H, U7, T30, T20, Ten3, V5-II, T7-3G, SmartQ5, K7, S7, Q8, T19, Ten2, Ten, R10, T7, R7, V5, V7, SmartQ7
      #########
      - regex: '; {0,2}(SmartQ) ?([^;/]+) Build/'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # Smartbitt
      # @ref: http://www.smartbitt.com/
      # @missing: SBT Useragents
      #########
      - regex: '; {0,2}(WF7C|WF10C|SBT[^;/]+) Build'
        device: '$1'
        brand: 'Smartbitt'
        model: '$1'

      #########
      # Softbank (Operator Branded Devices)
      # @ref: http://www.ipentec.com/document/document.aspx?page=android-useragent
      #########
      - regex: '; {0,2}(SBM(?:003SH|005SH|006SH|007SH|102SH)) Build'
        device: '$1'
        brand: 'Sharp'
        model: '$1'
      - regex: '; {0,2}(003P|101P|101P11C|102P) Build'
        device: '$1'
        brand: 'Panasonic'
        model: '$1'
      - regex: '; {0,2}(00\dZ) Build/'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; HTC(X06HT) Build'
        device: '$1'
        brand: 'HTC'
        model: '$1'
      - regex: '; {0,2}(001HT|X06HT) Build'
        device: '$1'
        brand: 'HTC'
        model: '$1'
      - regex: '; {0,2}(201M) Build'
        device: '$1'
        brand: 'Motorola'
        model: 'XT902'
      - regex: '; {0,2}([123]0\dF) Build'
        device: '$1'
        brand: 'Fujitsu'
        model: '$1'

      #########
      # Trekstor
      # @ref: http://www.trekstor.co.uk/surftabs-en.html
      # @note: Must come before SonyEricsson
      #########
      - regex: '; {0,2}(ST\d{4}.{0,300})Build/ST'
        device: 'Trekstor $1'
        brand: 'Trekstor'
        model: '$1'
      - regex: '; {0,2}(?:TrekStor |)(ST\d{4}.{0,300}?|VT10416-\d|SurfTab ST\d{4}.{0,300}?|SurfTab (?:breeze|xiron) .{1,300}?|SurfTab_7\.0|breeze .{1,300}?|Xintroni.{1,300}?)__BUILD__'
        device: 'Trekstor $1'
        brand: 'Trekstor'
        model: '$1'

      #########
      # Smartbook
      # @ref: http://www.smartbook.de/
      #########
      - regex: '; {0,2}Smartbook[^ ]? ([^;/]+) Build'
        regex_flag: 'i'
        device: 'Smartbook $1'
        brand: 'Smartbook'
        model: '$1'

      #########
      # SonyEricsson
      # @note: Must come before nokia since they also use symbian
      # @ref: http://www.android.com/devices/?country=all&m=sony-ericssons
      # @TODO: type!
      #########
      # android matchers
      - regex: '; {0,2}(Sony ?Ericsson ?)([^;/]+) Build'
        device: '$1$2'
        brand: 'SonyEricsson'
        model: '$2'
      - regex: '; {0,2}((?:SK|ST|LT|MK|MT|WT)\d{2}[a-z0-9]*(?:-o|)|E\d{2,3}[a-z]?|R800[ai]|U20i|X(?:10|15)(?:[a-z]?|mini|minipro)) Build'
        device: '$1'
        brand: 'SonyEricsson'
        model: '$1'
      # TODO X\d{1,10} is wrong
      - regex: '; {0,2}(Xperia (?:A8|Arc|Acro|Active|Live with Walkman|Mini|Neo|Play|Pro|Ray|X\d{1,10})[^;/]*) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'SonyEricsson'
        model: '$1'

      #########
      # Sony
      # @ref: http://www.sonymobile.co.jp/index.html
      # @ref: http://www.sonymobile.com/global-en/products/phones/
      # @ref: http://www.sony.jp/tablet/
      #########
      - regex: '; Sony (Tablet[^;/]+) Build'
        device: 'Sony $1'
        brand: 'Sony'
        model: '$1'
      - regex: '; Sony (.{1,300}?)__BUILD__'
        device: 'Sony $1'
        brand: 'Sony'
        model: '$1'
      - regex: '; {0,2}(Sony)([A-Za-z0-9\-]+) Build'
        device: '$1$2'
        brand: '$1'
        model: '$2'
      - regex: '; {0,2}(Xperia [^;/]+) Build'
        device: '$1'
        brand: 'Sony'
        model: '$1'
      - regex: '; {0,2}(A5000|C(?:1[5-9]|2[1-9]|53|55|6[0-9])[0-9]{2}|C200[1-9]|D[25]\d{3}|D6[567]\d{2}|E200[1-9]|E2[^0]\d{2}|E20[345]3|E5[356]\d{2}|E5823|E6[568]\d{2});?__BUILD__'
        device: '$1'
        brand: 'Sony'
        model: '$1'
      - regex: '; {0,2}(SGP\d{3}|SGPT\d{2}|S39h) Build'
        device: '$1'
        brand: 'Sony'
        model: '$1'
      - regex: '; {0,2}(NW-Z1000Series) Build'
        device: '$1'
        brand: 'Sony'
        model: '$1'

      #########
      # Spice
      # @ref: http://www.spicemobilephones.co.in/
      #########
      - regex: '; {0,2}((?:CSL_Spice|Spice|SPICE|CSL)[ _\-]?|)([Mm][Ii])([ _\-]|)(\d{3}[^;/]*) Build/'
        device: '$1$2$3$4'
        brand: 'Spice'
        model: 'Mi$4'

      #########
      # Sprint (Operator Branded Devices)
      # @ref:
      #########
      - regex: 'Sprint (ATP.{0,300}) Build'
        brand: 'HTC'
        type: 'tablet'
        model: '$1'
      - regex: 'Sprint (APA.{0,300}) Build'
        brand: 'HTC'
        model: '$1'
        type: 'smartphone'
      - regex: '; {0,2}(Sprint )(.{1,300}?) {0,2}(?:Build|[;/])'
        device: '$1$2'
        brand: 'Sprint'
        model: '$2'


      #########
      # Starway
      # @ref:
      #########
      - regex: '; {0,2}(STARWAY[ ])(.{1,300}?)__BUILD__'
        device: '$1'
        brand: 'Starway'
        model: '$2'

      #########
      # Sunstech
      # @ref:
      #########
      - regex: '; {0,2}(TAB785DUAL|TAB917QC-16GB|TAB917QC-8GB)__BUILD__'
        device: '$1'
        brand: 'Sunstech'
        model: '$1'

      #########
      # Sunup
      # @ref:
      #########
      - regex: '; {0,2}(OK999)__BUILD__'
        device: '$1'
        brand: 'Sunup'
        model: '$1'

      #########
      # Supra
      # @ref:
      #########
      - regex: '(SUPRA)[ _](.{0,300}?)(?: Build|[;)])'
        device: '$1 $2'
        brand: 'Supra'
        model: '$2'

      #########
      # Switel
      # @ref: http://www.switelmobile.com
      #########
      - regex: '; {0,2}(DRAGON S5000D|JAZZ S47D|S40D MAGIC|S50D SKY|S57D SAMBA|S4500D ROCK) Build/'
        device: '$1'
        brand: 'Switel'
        model: '$1'

      #########
      # Symphony
      # @ref: http://symphony-mobile.com/
      #########
      - regex: '; {0,2}(Symphony)[ _](.{1,300}?)(?: Build|[;\)/])'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: '; {0,2}([^;/]+) Build/(Symphony)'
        device: '$2 $1'
        brand: '$2'
        model: '$1'

      #########
      # Tagi
      # @ref: ??
      #########
      - regex: '; {0,2}(TAGI[ ]?)(MID) ?([^;/]+) Build/'
        device: '$1$2$3'
        brand: 'Tagi'
        model: '$2$3'

      #########
      # Tecmobile
      # @ref: http://www.tecmobile.com/
      #########
      - regex: '; {0,2}(Oyster500|Opal 800)__BUILD__'
        device: 'Tecmobile $1'
        brand: 'Tecmobile'
        model: '$1'

      #########
      # TechniSat
      # @ref:
      #########
      - regex: '; {0,2}(TechniPad[ _])(.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'TechniSat'
        model: '$1$2'

      #########
      # Tecno
      # @ref: www.tecno-mobile.com/‎
      #########
      - regex: '; {0,2}(TECNO[ _])([^;/]+) Build/'
        device: '$1$2'
        brand: 'Tecno'
        model: '$2'

      #########
      # Telechips, Techvision evaluation boards
      # @ref:
      #########
      - regex: '; {0,2}Android for (Telechips|Techvision) ([^ ]+) '
        regex_flag: 'i'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # Telefunken
      # @ref:
      #########
      - regex: '; {0,2}(TF-)(SP4502|.{1,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Telefunken'
        model: '$1$2'

      #########
      # Telstra
      # @ref: http://www.telstra.com.au/home-phone/thub-2/
      # @ref: https://support.google.com/googleplay/answer/1727131?hl=en
      #########
      - regex: '; {0,2}(T-Hub2) Build/'
        device: '$1'
        brand: 'Telstra'
        model: '$1'

      #########
      # Terra
      # @ref: http://www.wortmann.de/
      #########
      - regex: '; {0,2}(PAD) ?(100[12]) Build/'
        device: 'Terra $1$2'
        brand: 'Terra'
        model: '$1$2'

      #########
      # Texet
      # @ref: http://www.texet.ru/tablet/
      #########
      - regex: '; {0,2}((?:NaviPad |)T[BM]-\d{3}.{0,300}?|X-pad .{0,300}?|X Point)(?: Build/|\))'
        device: '$1'
        brand: 'Texet'
        model: '$1'
      - regex: '; {0,2}teXet[ _](.{0,300}?)(?: Build/|\))'
        device: '$1'
        brand: 'Texet'
        model: '$1'

      #########
      # TiPhone
      # @ref: ??
      #########
      - regex: '; {0,2}(TiPhone)[ \-]([^;/]+) Build/'
        device: '$1 $2'
        brand: 'TiPhone'
        model: '$2'
        type: 'smartphone'

      #########
      # Thalia
      # @ref: http://www.thalia.de/shop/tolino-shine-ereader/show/
      #########
      - regex: '; {0,2}(tolino [^;/]+) Build'
        device: '$1'
        brand: 'Thalia'
        model: '$1'
      - regex: '; {0,2}Build/.{0,300} (TOLINO_BROWSER)'
        device: '$1'
        brand: 'Thalia'
        model: 'Tolino Shine'

      #########
      # Thl
      # @ref: http://en.thl.com.cn/Mobile
      # @ref: http://thlmobilestore.com
      #########
      - regex: '; {0,2}(?:CJ[ -]|)(ThL|THL|thl)[ _\-]{1,2}([^;/]+) Build/'
        device: '$1 $2'
        brand: 'Thl'
        model: '$2'
      - regex: '; {0,2}(T100|T200C?|T5|W100|W200|W8s|W8_beyond)__BUILD__'
        device: '$1'
        brand: 'Thl'
        model: '$1'

      #########
      # T-Mobile (Operator Branded Devices)
      #########
      # @ref: https://en.wikipedia.org/wiki/HTC_Hero
      - regex: '; {0,2}(T-Mobile[ _]G2[ _]Touch) Build'
        device: '$1'
        brand: 'HTC'
        model: 'Hero'
      # @ref: https://en.wikipedia.org/wiki/HTC_Desire_Z
      - regex: '; {0,2}(T-Mobile[ _]G2) Build'
        device: '$1'
        brand: 'HTC'
        model: 'Desire Z'
      - regex: '; {0,2}(T-Mobile myTouch Q) Build'
        device: '$1'
        brand: 'Huawei'
        model: 'U8730'
      - regex: '; {0,2}(T-Mobile myTouch) Build'
        device: '$1'
        brand: 'Huawei'
        model: 'U8680'
      - regex: '; {0,2}(T-Mobile_Espresso) Build'
        device: '$1'
        brand: 'HTC'
        model: 'Espresso'
      - regex: '; {0,2}(T-Mobile G1) Build'
        device: '$1'
        brand: 'HTC'
        model: 'Dream'
      - regex: '\b(T-Mobile ?|)(myTouch)[ _]?([34]G)[ _]?([^\/]*) (?:Mozilla|Build)'
        device: '$1$2 $3 $4'
        brand: 'HTC'
        model: '$2 $3 $4'
      - regex: '\b(T-Mobile)_([^_]+)_(.{0,300}) Build'
        device: '$1 $2 $3'
        brand: 'Tmobile'
        model: '$2 $3'
      - regex: '\b(T-Mobile)[_ ]?(.{0,300}?)Build'
        device: '$1 $2'
        brand: 'Tmobile'
        model: '$2'

      #########
      # Tomtec
      # @ref: http://www.tom-tec.eu/pages/tablets.php
      #########
      - regex: ' (ATP[0-9]{4}) Build'
        device: '$1'
        brand: 'Tomtec'
        model: '$1'

      #########
      # Tooky
      # @ref: http://www.tookymobile.com/
      #########
      - regex: ' {0,2}(TOOKY)[ _\-]([^;/]+) ?(?:Build|;)'
        regex_flag: 'i'
        device: '$1 $2'
        brand: 'Tooky'
        model: '$2'

      #########
      # Toshiba
      # @ref: http://www.toshiba.co.jp/
      # @missing: LT170, Thrive 7, TOSHIBA STB10
      #########
      - regex: '\b(TOSHIBA_AC_AND_AZ|TOSHIBA_FOLIO_AND_A|FOLIO_AND_A)'
        device: '$1'
        brand: 'Toshiba'
        model: 'Folio 100'
      - regex: '; {0,2}([Ff]olio ?100) Build/'
        device: '$1'
        brand: 'Toshiba'
        model: 'Folio 100'
      - regex: '; {0,2}(AT[0-9]{2,3}(?:\-A|LE\-A|PE\-A|SE|a|)|AT7-[ABC]|AT1S0|Hikari-iFrame/WDPF-[^;/]+|THRiVE|Thrive) Build/'
        device: 'Toshiba $1'
        brand: 'Toshiba'
        model: '$1'

      #########
      # Touchmate
      # @ref: http://touchmatepc.com/new/
      #########
      - regex: '; {0,2}(TM-MID\d{1,10}[^;/]+|TOUCHMATE|MID-750) Build'
        device: '$1'
        brand: 'Touchmate'
        model: '$1'
      # @todo: needs verification user-agents missing
      - regex: '; {0,2}(TM-SM\d{1,10}[^;/]+) Build'
        device: '$1'
        brand: 'Touchmate'
        model: '$1'

      #########
      # Treq
      # @ref: http://www.treq.co.id/product
      #########
      - regex: '; {0,2}(A10 [Bb]asic2?) Build/'
        device: '$1'
        brand: 'Treq'
        model: '$1'
      - regex: '; {0,2}(TREQ[ _\-])([^;/]+) Build'
        regex_flag: 'i'
        device: '$1$2'
        brand: 'Treq'
        model: '$2'

      #########
      # TWM
      # @ref: http://www.taiwanmobile.com
      #########
      - regex: '; {0,2}(Amazing [^;/]+) Build'
        device: '$1'
        brand: 'TWM'
        model: '$1'

      #########
      # Umeox
      # @ref: http://umeox.com/
      # @models: A936|A603|X-5|X-3
      #########
      # @todo: guessed markers
      - regex: '; {0,2}(X-?5|X-?3) Build/'
        device: '$1'
        brand: 'Umeox'
        model: '$1'
      # @todo: guessed markers
      - regex: '; {0,2}(A502\+?|A936|A603|X1|X2) Build/'
        device: '$1'
        brand: 'Umeox'
        model: '$1'

      #########
      # Umi
      # @ref: http://www.91umi.com/
      #########
      - regex: '; (UMI)[ _](.{1,300}?) Build/'
        device: '$1 $2'
        brand: 'Umi'
        model: '$2'

      #########
      # Verico
      # @ref:
      #########
      - regex: '; {0,2}(KM-UQM11A|RP-UDM0[12]A|UQ785-M1BGV)(?: Build|\))'
        device: '$1'
        brand: 'Verico'
        model: '$1'

      #########
      # TurboPad
      # @ref:
      #########
      - regex: '; {0,2}(Turbo ?Pad.{0,300}?|Turbo X6)(?: Build|\))'
        device: '$1$2'
        brand: 'TurboPad'
        model: '$1$2'

      #########
      # Versus
      # @ref: http://versusuk.com/support.html
      #########
      - regex: '(?:CnM)[ \-](.{1,300}?) Build/'
        regex_flag: 'i'
        device: 'CnM $1'
        brand: 'CnM'
        model: '$1'
        type: 'tablet'
      - regex: '(?:VS|Versus)[ \-](.{1,300}?) Build/'
        regex_flag: 'i'
        device: 'Versus $1'
        brand: 'Versus'
        model: '$1'
        type: 'tablet'

      #########
      # Vertu
      # @ref: http://www.vertu.com/
      #########
      - regex: '(VERTU) ([^;/]+) Build/'
        device: '$1 $2'
        brand: 'Vertu'
        model: '$2'

      #########
      # Videocon
      # @ref: http://www.videoconmobiles.com
      #########
      - regex: '; {0,2}(Videocon)[ _\-]([^;/]+) {0,2}(?:Build|;)'
        device: '$1 $2'
        brand: 'Videocon'
        model: '$2'
      - regex: ' (VT\d{2}[A-Za-z]*|A55q?HD) Build'
        device: '$1'
        brand: 'Videocon'
        model: '$1'

      #########
      # Viewsonic
      # @ref: http://viewsonic.com
      #########
      - regex: '; {0,2}((?:ViewPad|ViewPhone|VSD).{1,300}?|N1010)__BUILD__'
        device: '$1'
        brand: 'Viewsonic'
        model: '$1'
      - regex: '; {0,2}(ViewSonic-)([^;/]+) Build/'
        device: '$1$2'
        brand: 'Viewsonic'
        model: '$2'
      - regex: '; {0,2}(GTablet.{0,300}) Build/'
        device: '$1'
        brand: 'Viewsonic'
        model: '$1'

      #########
      # vivo (BBK COMMUNICATION TECHNOLOGY CO.LTD)
      # @ref: http://www.vivo.com.cn/
      #########
      - regex: '; {0,2}([Vv]ivo)[ _]([^;/]+) Build'
        device: '$1 $2'
        brand: 'vivo'
        model: '$2'

      #########
      # Vodafone (Operator Branded Devices)
      # @ref: ??
      #########
      - regex: '(Vodafone) (.{0,300}) Build/'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

      #########
      # Vonino
      # @ref: http://www.vonino.eu/
      # TODO Vonino
      #########
      - regex: '; ((?:JAX|Xylo|Oxxo|Ego|Gyga)[ _](?:QS|S|Mini)).{0,300} Build'
        type: 'smartphone'
        device: '$1'
        brand: 'Vonino'
        model: '$1'
      - regex: '; (Argus[ _](QS|S)|Epic[ _]E7|Emerald[ _]78E|Diamond[ _]79HD|JetStar(?:[ _][^;/]+|)|Luna[ _]70C|Magnet_M9|(?:Onyx|Orin|Otis)[ _](?:QS|XS|S|Z|HD)|Primus (?:94HD.{0,300}|QS)|Sirius_(?:QS|Evo_QS)|SpeedStar S Pro|Spirit (QS|S)|Vario.{0,300}) Build'
        type: 'tablet'
        device: '$1'
        brand: 'Vonino'
        model: '$1'

      #########
      # Walton
      # @ref: http://www.waltonbd.com/
      #########
      - regex: '; {0,2}(?:Walton[ _\-]|)(Primo[ _\-][^;/]+) Build'
        regex_flag: 'i'
        device: 'Walton $1'
        brand: 'Walton'
        model: '$1'

      #########
      # Wiko
      # @ref: http://fr.wikomobile.com/collection.php?s=Smartphones
      #########
      - regex: '; {0,2}(?:WIKO[ \-]|)(CINK\+?|CINK [^;/]+|BARRY|BIRDY|BLOOM|DARKFULL|DARKMOON|DARKNIGHT|DARKSIDE|FIZZ|GETAWAY|GOA|HIGHWAY(?: PURE| SIGNS| STAR|)|IGGY|JIMMY|KITE|LENNY(?:2|)|OZZY|RAINBOW(?: JAM| LITE| UP|)|RIDGE(?: FAB|)|SLIDE|STAIRWAY|SUBLIM|SUNSET(?:2|)|WAX)( 4G|) Build/'
        regex_flag: 'i'
        device: 'Wiko $1$2'
        brand: 'Wiko'
        model: '$1$2'

      #########
      # WellcoM
      # @ref: ??
      #########
      - regex: '; {0,2}WellcoM-([^;/]+) Build'
        device: 'Wellcom $1'
        brand: 'Wellcom'
        model: '$1'

      ##########
      # WeTab
      # @ref: http://wetab.mobi/
      ##########
      - regex: '; ([Ww]e[Tt]ab[^;/]*?) {0,2}Build'
        device: '$1'
        brand: 'WeTab'
        model: '$1'

      ##########
      # Wexler
      # @ref:
      ##########
      - regex: '; (TAB A742|TAB7iD)__BUILD__'
        device: '$1'
        brand: 'Wexler'
        model: '$1'
      - regex: '; (WEXLER-)(.{0,300}?)__BUILD__'
        device: '$1$2'
        brand: 'Wexler'
        model: '$2'

      #########
      # Wolfgang
      # @ref: http://wolfgangmobile.com/
      #########
      - regex: '; {0,2}(AT-AS[^;/]+) Build'
        device: 'Wolfgang $1'
        brand: 'Wolfgang'
        model: '$1'

      #########
      # Woxter
      # @ref: http://www.woxter.es/es-es/categories/index
      #########
      - regex: '; {0,2}(?:Woxter|Wxt) ([^;/]+) Build'
        device: 'Woxter $1'
        brand: 'Woxter'
        model: '$1'

      #########
      # Yarvik Zania
      # @ref: http://yarvik.com
      #########
      - regex: '; {0,2}(?:Xenta |Luna |)(TAB[234][0-9]{2}|TAB0[78]-\d{3}|TAB0?9-\d{3}|TAB1[03]-\d{3}|SMP\d{2}-\d{3}) Build/'
        device: 'Yarvik $1'
        brand: 'Yarvik'
        model: '$1'

      #########
      # Yifang
      # @note: Needs to be at the very last as manufacturer builds for other brands.
      # @ref: http://www.yifangdigital.com/
      # @models: M1010, M1011, M1007, M1008, M1005, M899, M899LP, M909, M8000,
      #   M8001, M8002, M8003, M849, M815, M816, M819, M805, M878, M780LPW,
      #   M778, M7000, M7000AD, M7000NBD, M7001, M7002, M7002KBD, M777, M767,
      #   M789, M799, M769, M757, M755, M753, M752, M739, M729, M723, M712, M727
      #########
      - regex: '; {0,2}([A-Z]{2,4})(M\d{3,}[A-Z]{2})([^;\)\/]*)(?: Build|[;\)])'
        device: 'Yifang $1$2$3'
        brand: 'Yifang'
        model: '$2'

      #########
      # Yota Devices
      # @ref:
      #########
      - regex: '; {0,2}(YD\d{1,10})(?: Build/|\))'
        device: '$1'
        brand: 'Yota'
        model: '$1'

      #########
      # XiaoMi
      # @ref: http://www.xiaomi.com/event/buyphone
      # @ref: http://www.mi.com/en
      #########
      - regex: '; {0,2}((?:Mi|MI|MI2|Mi|HM|MI-ONE|MiPad|Redmi|2013022|HM_1SW)[ _][^;/]*)(?:Build|MIUI|[;)])'
        device: 'XiaoMi $1'
        brand: 'XiaoMi'
        model: '$1'

      #########
      # Xolo
      # @ref: http://www.xolo.in/
      #########
      - regex: '; {0,2}XOLO[ _]([^;/]*tab.{0,300}) Build'
        regex_flag: 'i'
        device: 'Xolo $1'
        brand: 'Xolo'
        model: '$1'
      - regex: '; {0,2}XOLO[ _]([^;/]+) Build'
        regex_flag: 'i'
        device: 'Xolo $1'
        brand: 'Xolo'
        model: '$1'
      - regex: '; {0,2}(q\d0{2,3}[a-z]?|8x-1000|A(?:500|550|1000)s(?:[ _]Lite|[ _]IPS|)|A500 Club|A500L|A600) Build'
        regex_flag: 'i'
        device: 'Xolo $1'
        brand: 'Xolo'
        model: '$1'

      #########
      # Xoro
      # @ref: http://www.xoro.de/produkte/
      #########
      - regex: '; {0,2}(PAD ?[79]\d{1,10}[^;/]*|TelePAD\d{1,10}[^;/]) Build'
        device: 'Xoro $1'
        brand: 'Xoro'
        model: '$1'
      - regex: '; {0,2}(?:XORO|Xoro) (PAD ?\d{1,10}[^;/]*|KIDS\d{1,10}|TelePAD\d{1,10}[^;/]) Build'
        device: 'Xoro $1'
        brand: 'Xoro'
        model: '$1'

      #########
      # Xtouch
      # @ref: http://xtouch.pk/
      #########
      - regex: '; {0,2}(?:Xtouch[ _]([^;/]+)|(X401|X403|X405|X406|X506[s]?|X507[QSsT]?|X508|X509|X601)) Build'
        device: 'Xtouch $1$2'
        brand: 'Xtouch'
        model: '$1$2'

      #########
      # Yezz
      # @ref:
      #########
      - regex: '\b(Andy|yezz(?:[ -]andy|))[ _-]([^;/]+) Build'
        regex_flag: 'i'
        device: 'Yezz Andy $2'
        brand: 'Yezz'
        model: 'Andy $2'

      #########
      # Zifro
      # @ref:
      #########
      - regex: '; {0,2}(ZS-\d{1,10})(?: Build|\))'
        device: '$1'
        brand: 'Zifro'
        model: '$1'

      #########
      # Zopo
      # @ref: http://www.zopomobiles.com/products.html
      #########
      - regex: '; {0,2}(?:(?:ZOPO|Zopo)[ _]([^;/]+)|(ZP ?(?:\d{2}[^;/]+|C2))|(C[2379])) Build'
        device: '$1$2$3'
        brand: 'Zopo'
        model: '$1$2$3'

      #########
      # ZiiLabs
      # @ref: http://www.ziilabs.com/products/platforms/androidreferencetablets.php
      #########
      - regex: '; {0,2}(ZiiLABS) (Zii[^;/]*) Build'
        device: '$1 $2'
        brand: 'ZiiLabs'
        model: '$2'
      - regex: '; {0,2}(Zii)_([^;/]*) Build'
        device: '$1 $2'
        brand: 'ZiiLabs'
        model: '$2'

      #########
      # ZTE
      # @ref: http://www.ztedevices.com/
      #########
      - regex: '; {0,2}(ARIZONA|(?:ATLAS|Atlas)[ _]W|D930|Grand (?:[SX].{0,300}?|Era|Memo.{0,300}?)|JOE|(?:Kis|KIS)\b.{0,300}?|Libra|Light.{0,300}?|N8[056][01]|N850L|N8000|N909|N9[15]\d{2}|N918St|N9810|NX402|NX501|Z818L|Z716BL|Optik|(?:Vip )Racer.{0,300}?|RacerII|RACERII|San Francisco.{0,300}?|V9[AC]|V55|V881|Z[679][0-9]{2}[A-z]?|Z81[0-9]|ZTE_BLADE_III)(?: Build|\))'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; {0,2}([A-Z]\d{1,10})_USA_[^;]* Build'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; {0,2}(SmartTab\d{1,10})[^;]* Build'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; {0,2}(?:Blade|BLADE|ZTE-BLADE)([^;/]*) Build'
        device: 'ZTE Blade$1'
        brand: 'ZTE'
        model: 'Blade$1'
      - regex: '; {0,2}(?:Skate|SKATE|ZTE-SKATE)([^;/]*) Build'
        device: 'ZTE Skate$1'
        brand: 'ZTE'
        model: 'Skate$1'
      - regex: '; {0,2}(Orange|Optimus)[ _](Boston|Monte Carlo|San Francisco) Build'
        device: '$1 $2'
        brand: 'ZTE'
        model: '$1 $2'
      - regex: '; {0,2}(?:ZXY-ZTE_|ZTE-U |ZTE[-_ ]|ZTE-C[_ ])(.{0,300}?)(?: Build|\))'
        device: 'ZTE $1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; {0,2}(Beeline \w+)(?: Build|\))'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      # operator specific
      - regex: '; (BASE) (lutea|Lutea 2|Tab[^;]*) Build'
        device: '$1 $2'
        brand: 'ZTE'
        model: '$1 $2'
      - regex: '; (Avea inTouch \d[^;/]*|soft stone|tmn smart a7|Movistar[ _]Link|KPN Smart 300|Orange Reyo|meo smart a12|MEO Smart A75|DIGICEL DL800|tmn smart a18|Turkcell Maxi Plus 5|TURKCELL T50|RACER III mini) Build'
        regex_flag: 'i'
        device: '$1'
        brand: 'ZTE'
        model: '$1'
      - regex: '; {0,2}(vp9plus)\)'
        device: '$1'
        brand: 'ZTE'
        model: '$1'

      ##########
      # Zync
      # @ref: http://www.zync.in/index.php/our-products/tablet-phablets
      ##########
      - regex: '; ?(Cloud[ _]Z5|z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900) Build/'
        device: '$1'
        brand: 'Zync'
        model: '$1'

      ##########
      # Kindle
      # @note: Needs to be after Sony Playstation Vita as this UA contains Silk/3.2
      # @ref: https://developer.amazon.com/appsandservices/solutions/devices/kindle-fire/specifications/01-device-and-feature-specifications
      # @ref: http://amazonsilk.wordpress.com/useful-bits/silk-user-agent/
      ##########
      - regex: '; ?(Kindle Fire) Build\b'
        device: 'Kindle Fire'
        brand: 'Amazon'
        model: 'Kindle Fire'
      - regex: '; ?(KFOT|KFOTE|Amazon Kindle Fire2) Build\b'
        device: 'Kindle Fire 2'
        brand: 'Amazon'
        model: 'Kindle Fire 2'
      - regex: '; ?(KFTT|Kindle Fire HD 7) Build\b'
        device: 'Kindle Fire HD'
        brand: 'Amazon'
        model: 'Kindle Fire HD 7"'
      - regex: '; ?(KFSAWA) Build\b'
        brand: 'Amazon'
        model: 'Fire HDX 8.9 (4th Gen) Wan'
        device: 'Fire HDX 8.9 (4th Gen) Wan'
      - regex: '; ?(KFSAWI) Build\b'
        brand: 'Amazon'
        model: 'Fire HDX 8.9 (4th Gen)'
        device: 'Fire HDX 8.9 (4th Gen)'
      - regex: '; ?(KFASWI) Build\b'
        brand: 'Amazon'
        model: 'Fire HD 7 (4th Gen)'
        device: 'Fire HD 7 (4th Gen)'
      - regex: '; ?(KFARWI) Build\b'
        brand: 'Amazon'
        model: 'Fire HD 6 (4th Gen)'
        device: 'Fire HD 6 (4th Gen)'
      - regex: '; ?(KFTHWA) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 7" (3rd Gen) Wan'
        device: 'Kindle Fire HDX 7" (3rd Gen) Wan'
      - regex: '; ?(KFTHWI) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 7" (3rd Gen)'
        device: 'Kindle Fire HDX 7" (3rd Gen)'
      - regex: '; ?(KFAPWA) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 8.9" (3rd Gen) Wan'
        device: 'Kindle Fire HDX 8.9" (3rd Gen) Wan'
      - regex: '; ?(KFAPWI) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 8.9" (3rd Gen)'
        device: 'Kindle Fire HDX 8.9" (3rd Gen)'
      - regex: '; ?(KFSOWI) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HD 7" (3rd Gen)'
        device: 'Kindle Fire HD 7" (3rd Gen)'
      - regex: '; ?(KFTHWI) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 7"'
        device: 'Kindle Fire HDX 7"'
      - regex: '; ?(KFTHWA) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HDX 7" Wan'
        device: 'Kindle Fire HDX 7" Wan'
      - regex: '; ?(KFJWA) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HD 8.9" (2nd Gen) Wan'
        device: 'Kindle Fire HD 8.9" (2nd Gen) Wan'
      - regex: '; ?(KFJWI) Build\b'
        brand: 'Amazon'
        model: 'Kindle Fire HD 8.9" (2nd Gen)'
        device: 'Kindle Fire HD 8.9" (2nd Gen)'
      - regex: '; ?(SD4930UR) Build\b'
        device: 'Fire Phone'
        brand: 'Amazon'
        model: 'Fire Phone'
      - regex: '; ?Amazon ([^;/]+) Build\b'
        device: '$1'
        brand: 'Amazon'
        model: '$1'
      - regex: '; ?(Kindle) Build\b'
        device: 'Kindle'
        brand: 'Amazon'
        model: 'Kindle'
      - regex: '; ?(Silk)/(\d{1,10})\.(\d{1,10})(?:\.([0-9\-]+)|) Build\b'
        device: 'Kindle Fire'
        brand: 'Amazon'
        model: 'Kindle Fire$2'
      - regex: ' (Kindle)/(\d{1,10}\.\d{1,10})'
        device: 'Kindle'
        brand: 'Amazon'
        model: '$1 $2'
      - regex: ' (Silk|Kindle)/(\d{1,10})\.'
        device: 'Kindle'
        brand: 'Amazon'
        model: 'Kindle'
      - regex: '; (AFT[BM]) Build'
        device: '$1'
        brand: 'Amazon'
        model: '$1'
      - regex: '; (KF[A-Z]{1,2}W[AI]) Build'
        device: '$1'
        brand: 'Amazon'
        model: '$1'

      #########
      # Devices from chinese manufacturer(s)
      # @note: identified by x-wap-profile http://218.249.47.94/Xianghe/.{0,300}
      #########
      - regex: '(sprd)\-([^/]+)/'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: '(GT-A7100)__BUILD__'
        device: '$1'
        brand: 'sprd'
        model: '$1'
      # @ref: http://eshinechina.en.alibaba.com/
      - regex: '; {0,2}(H\d{2}00\+?) Build'
        device: '$1'
        brand: 'Hero'
        model: '$1'
      - regex: '; {0,2}(iphone|iPhone5) Build/'
        device: 'Xianghe $1'
        brand: 'Xianghe'
        model: '$1'
      - regex: '; {0,2}([^;/]+(?:v\d{2}_[a-z]{2,4}|_jbla?))[^;/]+ Build/'
        device: 'Xianghe $1'
        brand: 'Xianghe'
        model: '$1'

      #########
      # Cellular
      # @ref:
      # @note: Operator branded devices
      #########
      - regex: '\bUSCCHTC[_\-]?([^ ;/\)]+)'
        device: '$1'
        brand: 'HTC'
        model: '$1'
      - regex: '\bUSCC[_\-]?([^ ;/\)]+)'
        device: '$1'
        brand: 'Cellular'
        model: '$1'

  ######################################################################
  # Windows Phone Parsers
  ######################################################################
  - regex: 'Windows Phone|WPDesktop'
    group:

      #########
      # Alcatel Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:ALCATEL)[^;]*; {0,2}([^;,\)]+)'
        device: 'Alcatel $1'
        brand: 'Alcatel'
        model: '$1'
        type: 'smartphone'

      #########
      # Asus Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?|)(?:ASUS|Asus)[^;]*; {0,2}([^;,\)]+)'
        device: 'Asus $1'
        brand: 'Asus'
        model: '$1'
        type: 'smartphone'

      #########
      # Dell Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:DELL|Dell)[^;]*; {0,2}([^;,\)]+)'
        device: 'Dell $1'
        brand: 'Dell'
        model: '$1'
        type: 'smartphone'

      #########
      # HTC Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?|)(?:HTC|Htc|HTC_blocked[^;]*)[^;]*; {0,2}(?:HTC|)([^;,\)]+)'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
        type: 'smartphone'
      - regex: 'WPDesktop; (Windows Phone 8[SX] by HTC)'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
        type: 'smartphone'
      - regex: '(LEO70)'
        device: 'HTC $1'
        brand: 'HTC'
        model: '$1'
        type: 'smartphone'

      #########
      # Huawei Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:HUAWEI)[^;]*; {0,2}(?:HUAWEI |)([^;,\)]+)'
        device: 'Huawei $1'
        brand: 'Huawei'
        model: '$1'
        type: 'smartphone'
      - regex: 'WPDesktop; (W1-U00)'
        device: 'Huawei $1'
        brand: 'Huawei'
        model: '$1'
        type: 'smartphone'

      #########
      # LG Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:LG|Lg)[^;]*; {0,2}(?:LG[ \-]|)([^;,\)]+)'
        device: 'LG $1'
        brand: 'LG'
        model: '$1'
        type: 'smartphone'

      #########
      # Noka Windows Phones
      #########
      - regex: 'Lumia; (2520)'
        device: 'Lumia $1'
        brand: 'Nokia'
        model: 'Lumia $1'
        type: 'tablet'
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:NOKIA|Nokia)[^;]*; {0,2}(?:NOKIA Lumia ?|NOKIA ?|Nokia ?|LUMIA ?|[Ll]umia ?|)(\d{3,10}[^;\)]*)'
        device: 'Lumia $1'
        brand: 'Nokia'
        model: 'Lumia $1'
        type: 'smartphone'
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:NOKIA|Nokia)[^;]*; {0,2}(RM-\d{3,})'
        device: 'Nokia $1'
        brand: 'Nokia'
        model: '$1'
        type: 'smartphone'
      - regex: '(?:Windows Phone Search.{0,300}|WPDesktop;) {0,2}(?:NOKIA|Nokia); {0,2}(Lumia[^;\)]+)'
        device: 'Nokia $1'
        brand: 'Nokia'
        model: '$1'
        type: 'smartphone'
      - regex: 'WPDesktop;(?: NOKIA; Nokia| NOKIA;| Nokia|) (\d{1,10}[^;\)]+)'
        device: 'Nokia Lumia $1'
        brand: 'Nokia'
        model: 'Lumia $1'
        type: 'smartphone'
      - regex: 'Windows Phone Search.{0,300}NOKIA;(?:Nokia |)(\d{1,10}[^;\)]+)'
        device: 'Nokia Lumia $1'
        brand: 'Nokia'
        model: 'Lumia $1'
        type: 'smartphone'

      #########
      # Microsoft Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|)(?:Microsoft(?: Corporation|))[^;]*; {0,2}([^;,\)]+)'
        device: 'Microsoft $1'
        brand: 'Microsoft'
        model: '$1'
      - regex: '(?:Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)]|WPDesktop;) ?(?:ARM; ?Touch; ?|Touch; ?|) {0,2}((?:LUMIA ?|[Ll]umia ?)[^;\)]+)'
        device: 'Microsoft $1'
        brand: 'Microsoft'
        model: '$1'

      #########
      # Prestigio Windows Phones
      #########
      - regex: 'WPDesktop; {0,2}(?:PRESTIGIO;|) (PSP[^;\)]+)'
        device: 'Prestigio $1'
        brand: 'Prestigio'
        model: '$1'

      #########
      # Samsung Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?|)(?:SAMSUNG)[^;]*; {0,2}(?:SAMSUNG |)([^;,\.\)]+)'
        device: 'Samsung $1'
        brand: 'Samsung'
        model: '$1'
      - regex: 'WPDesktop; {0,2}(?:SAMSUNG;|) ((?:GT-|SGH-)[^;\)]+)'
        device: 'Samsung $1'
        brand: 'Samsung'
        model: '$1'

      #########
      # Toshiba Windows Phones
      #########
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?|)(?:TOSHIBA|FujitsuToshibaMobileCommun)[^;]*; {0,2}([^;,\)]+)'
        device: 'Toshiba $1'
        brand: 'Toshiba'
        model: '$1'

      #########
      # Generic Windows Phones
      #########
      ## - regex: '\(compatible; MSIE [^;]+; Windows Phone [^;]+; Trident/[^;]+; ?(?:ARM; Touch; ?|)IEMobile/[^;]+; ?(?:ARM; ?Touch; ?|Touch; ?|WpsLondonTest; ?|)([^;]+); {0,2}([^;,\)]+)'
      - regex: 'Windows Phone [^;]+; .{0,100}?IEMobile/[^;\)]+[;\)] ?(?:ARM; ?Touch; ?(?:rv:\d{1,10}; |)|Touch; ?|WpsLondonTest; ?|)([^;]+); {0,2}([^;,\)]+)'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: 'WPDesktop; ([^;]+); {0,2}([^;,\)]+)'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      - regex: 'Windows Phone Search \(Windows Phone OS [^;]+;([^;]+);([^;]+);'
        device: '$1 $2'
        brand: '$1'
        model: '$2'

  ######################################################################
  # Other Devices Parser
  ######################################################################

  #########
  # Samsung Bada Phones
  #########
  - regex: '(?:^|; )SAMSUNG\-([A-Za-z0-9\-]{1,100}).{0,100} Bada/'
    device: 'Samsung $1'
    brand: 'Samsung'
    model: '$1'
    type: 'smartphone'

  #########
  # Firefox OS
  #########
  - regex: Firefox
    group:
      - regex: '\(Mobile; ALCATEL ?(One|ONE) ?(Touch|TOUCH) ?([^;/]+)(?:/[^;]+|); rv:[^\)]+\) Gecko/[^\/]+ Firefox/'
        device: 'Alcatel $1 $2 $3'
        brand: 'Alcatel'
        model: 'One Touch $3'
        type: 'smartphone'
      - regex: '\(Mobile; (?:ZTE([^;]+)|(Open[C2])|(Open) (C)); rv:[^\)]+\) Gecko/[^\/]+ Firefox/'
        regex_flag: 'i'
        device: 'ZTE $1$2$3$4'
        brand: 'ZTE'
        model: '$1$2$3$4'
        type: 'smartphone'

  #########
  # Jolla
  # @ref:
  #########
  - regex: '\b(Jolla);'
    brand: '$1'
    model: '$1'
    device: '$1'

  #########
  # Vertu
  # @ref: http://www.vertu.com/
  #########
  - regex: '(Vertu)([A-Za-z]+)/'
    device: '$1 $2'
    brand: 'Vertu'
    model: '$2'

  ##########
  # NOKIA
  # @note: NokiaN8-00 comes before iphone. Sometimes spoofs iphone
  ##########
  - regex: 'nokia|symbian|lumia'
    regex_flag: 'i'
    group:
      - regex: 'Nokia(N[0-9]+)([A-z_\-][A-z0-9_\-]*)'
        device: 'Nokia $1'
        brand: 'Nokia'
        model: '$1$2'
      - regex: '(?:Lumia|NOKIA; Nokia) ([A-Za-z0-9\-]+)'
        device: 'Lumia $1'
        brand: 'Nokia'
        model: 'Lumia $1'
      - regex: '(?:NOKIA|[Nn]okia)+(?:\-| {0,2}|; {0,2})(?:([A-Za-z0-9]+)\-[0-9a-f]{32}|([A-Za-z0-9\-]+)(?:UCBrowser)|([A-Za-z0-9\-]+))'
        device: 'Nokia $1$2$3'
        brand: 'Nokia'
        model: '$1$2$3'
      # UCWEB Browser on Symbian
      - regex: '\(Symbian; U; S60 V5; [A-z]{2}\-[A-z]{2}; (SonyEricsson|Samsung|Nokia|LG)([^;/]+)\)'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      # Nokia Symbian
      - regex: '\(Symbian(?:/3|); U; ([^;]+);'
        device: 'Nokia $1'
        brand: 'Nokia'
        model: '$1'

  ##########
  # BlackBerry
  # @ref: http://www.useragentstring.com/pages/BlackBerry/
  ##########
  - regex: 'blackberry|rim|bb10;'
    regex_flag: 'i'
    group:
      - regex: 'BB10; ([A-Za-z0-9\- ]+)\)'
        device: 'BlackBerry $1'
        brand: 'BlackBerry'
        model: '$1'
        type: 'smartphone'
      - regex: 'Play[Bb]ook.{1,300}RIM Tablet OS'
        device: 'BlackBerry Playbook'
        brand: 'BlackBerry'
        model: 'Playbook'
        type: 'tablet'
      - regex: 'Black[Bb]erry {0,2}?([a-z0-9]+)'
        device: 'BlackBerry $1'
        brand: 'BlackBerry'
        model: '$1'
      - regex: 'Black[Bb]erry'
        device: 'BlackBerry $1'
        brand: 'BlackBerry'
        model: '$1'

  ##########
  # PALM / HP
  # @note: some palm devices must come before iphone. sometimes spoofs iphone in ua
  ##########
  - regex: '\b(Pre|Pixi|webOS|hpwOS|Palm|iPAQ|Treo|Tungsten|TouchPad|Xiino)'
    group:
      - regex: '(Pre|Pixi)/\d{1,10}\.\d{1,10}'
        device: 'Palm $1'
        brand: 'Palm'
        model: '$1'
        type: 'smartphone'
      - regex: 'Palm([0-9]+)'
        device: 'Palm $1'
        brand: 'Palm'
        model: '$1'
      - regex: '\b(Tungsten)\b'
        device: 'Palm $1'
        brand: 'Palm'
      - regex: '(Xiino)'
        device: 'Palm'
        brand: 'Palm'
        model: ' '
      - regex: 'Treo([A-Za-z0-9]+)'
        device: 'Palm Treo $1'
        brand: 'Palm'
        model: 'Treo $1'
      - regex: 'webOS.{0,300}(P160U(?:NA|))/(\d{1,10}).(\d{1,10})'
        device: 'HP Veer'
        brand: 'HP'
        model: 'Veer'
        type: 'tablet'
      - regex: '(Touch[Pp]ad)/\d{1,10}\.\d{1,10}'
        device: 'HP TouchPad'
        brand: 'HP'
        model: 'TouchPad'
        type: 'tablet'
      - regex: 'HPiPAQ([A-Za-z0-9]+)/\d{1,10}\.\d{1,10}'
        device: 'HP iPAQ $1'
        brand: 'HP'
        model: 'iPAQ $1'
      - regex: 'PDA; (PalmOS)/sony/model ([a-z]+)/Revision'
        device: '$1'
        brand: 'Sony'
        model: '$1 $2'

  ##########
  # AppleTV
  # No built in browser that I can tell
  # Stack Overflow indicated iTunes-AppleTV/4.1 as a known UA for app available and I'm seeing it in live traffic
  ##########
  - regex: 'Apple\s?TV(\d,\d|)(?:.{0,300} \((\d)[;\)]|)'
    device: 'AppleTV'
    brand: 'Apple'
    model: 'AppleTV$1$2'
    type: 'tv'

  #########
  # Tesla Model S
  #########
  - regex: '(QtCarBrowser)'
    device: 'Tesla Model S'
    brand: 'Tesla'
    model: 'Model S'
    type: 'car'

  ##########
  # iSTUFF
  # @note: complete but probably catches spoofs
  #   ipad and ipod must be parsed before iphone
  #   cannot determine specific device type from ua string. (3g, 3gs, 4, etc)
  ##########
  - regex: 'iPhone|iPad|iPod|CFNetwork||iPh|iPd|watchOS'
    group:
      # @note: iPad needs to be before iPhone
      - regex: '(iPad)(\d{1,10},\d{1,10})|(iPad)(?:;| Simulator;)'
        device: '$1$3'
        brand: 'Apple'
        model: '$1$2$3'
        type: 'tablet'
      - regex: '(iPd)(\d{1,10},\d{1,10})'
        device: 'iPod'
        brand: 'Apple'
        model: 'iPod$2'
        type: 'player'
      - regex: '(Apple Watch)(?:;| Simulator;)'
        device: '$1'
        brand: 'Apple'
        model: '$1'
        type: 'watch'
      - regex: '(HomePod)(?:;| Simulator;)'
        device: '$1'
        brand: 'Apple'
        model: '$1'
        type: 'smartspeaker'
      - regex: '(iPod)(\d{1,10},\d{1,10}).{0,300}(iPod touch)'
        device: '$3'
        brand: 'Apple'
        model: '$1$2'
        type: 'player'
      - regex: '(iPod)(\d{1,10},\d{1,10})|(iPod|iPod touch)(?:;| Simulator;)'
        device: '$1$3'
        brand: 'Apple'
        model: '$1$2$3'
        type: 'player'
      - regex: '(iPh)(\d{1,10},\d{1,10})'
        device: 'iPhone'
        brand: 'Apple'
        model: 'iPhone$2'
        type: 'smartphone'
      - regex: '(iPhone)(\d{1,10},\d{1,10})|(iPhone)(?:;| Simulator;)'
        device: '$1$3'
        brand: 'Apple'
        model: '$1$2$3'
        type: 'smartphone'
      - regex: '(watchOS).{0,300}model/(Watch)(\d{1,10},\d{1,10})'
        device: '$2$3'
        brand: 'Apple'
        model: '$1 $2$3'
        type: 'watch'
      # @note: desktop applications show device info
      - regex: 'CFNetwork/.{0,100} Darwin/\d.{0,100}\(((?:Mac|iMac|PowerMac|PowerBook)[^\d]{0,100})(\d{1,10})(?:,|%2C)(\d{1,10})'
        device: '$1$2,$3'
        brand: 'Apple'
        model: '$1$2,$3'
      # @note: OSx applications do not show device info
      - regex: 'CFNetwork/.{0,100} Darwin/\d.{0,100}\((?:i386|x86_64)\)'
        device: 'iOS-Device'
        brand: 'Apple'
        model: 'Mac OS X-Device'
      # @note: iOS applications do not show device info
      - regex: 'CFNetwork/.{0,100} Darwin/\d'
        device: 'iOS-Device'
        brand: 'Apple'
        model: 'iOS-Device'

  ##########
  # Acer
  ##########
  - regex: 'acer_([A-Za-z0-9]+)_'
    device: 'Acer $1'
    brand: 'Acer'
    model: '$1'
    type: 'phone'

  ##########
  # Alcatel
  ##########
  - regex: 'alcatel'
    regex_flag: i
    group:
      - regex: '(?:alcatel[ _\-])(?:(?:one[ _\-]?touch[ _\-]|ot[ \-]))((?:(?!UNTRUSTED|Linux|Firmware|AppleWebKit|Build|UCWEB|[;/\(\)_\-]).)+)'
        regex_flag: 'i'
        device: 'Alcatel One Touch $1'
        brand: 'Alcatel'
        model: 'One Touch $1'
      - regex: '(?:ALCATEL|Alcatel)-([A-Za-z0-9\-]+)'
        device: 'Alcatel $1'
        brand: 'Alcatel'
        model: '$1'

  ##########
  # Amoi
  ##########
  - regex: '(?:Amoisonic|Amoi)[_\- /]?([a-z0-9]+)'
    regex_flag: 'i'
    device: 'Amoi $1'
    brand: 'Amoi'
    model: '$1'

  #########
  # Garmin-Asus
  #########
  - regex: 'garmin-asus-([^/]+)'
    regex_flag: 'i'
    device: 'Garmin $1'
    brand: 'Garmin-Asus'
    model: '$1'

  ##########
  # Asus
  ##########
  - regex: 'asus|transformer|padfone|nexus'
    regex_flag: i
    group:
      - regex: '(?:; |\/|^)((?:Transformer (?:Pad|Prime) |Transformer |PadFone[ _]?)[A-Za-z0-9]*)'
        device: 'Asus $1'
        brand: 'Asus'
        model: '$1'
      - regex: '(?:asus.{0,300}?ASUS|Asus|ASUS|asus)[\- ;]*((?:Transformer (?:Pad|Prime) |Transformer |Padfone |Nexus[ _]|)[A-Za-z0-9]+)'
        device: 'Asus $1'
        brand: 'Asus'
        model: '$1'

  ##########
  # Bird
  ##########
  - regex: '\bBIRD[ \-\.]([A-Za-z0-9]+)'
    device: 'Bird $1'
    brand: 'Bird'
    model: '$1'

  ##########
  # Commodore
  ##########
  - regex: '(Amiga)OS'
    device: 'Commodore $1'
    brand: 'Commodore'
    model: '$1'

  ##########
  # Dell
  ##########
  - regex: '\bDell ([A-Za-z0-9]+)'
    device: 'Dell $1'
    brand: 'Dell'
    model: '$1'

  ##########
  # D-Link
  ##########
  - regex: '\b(Boxee)/'
    device: 'D-Link $1'
    brand: 'D-Link'
    model: '$1'

  ##########
  # DoCoMo
  ##########
  - regex: 'DoCoMo|FOMA'
    group:
    - regex: 'DoCoMo/2\.0 ([A-Za-z0-9]+)'
      device: 'DoCoMo $1'
      brand: 'DoCoMo'
      model: '$1'
    - regex: '([A-Za-z0-9]{1,30})_W\;FOMA'
      device: 'DoCoMo $1'
      brand: 'DoCoMo'
      model: '$1'
    - regex: '([A-Za-z0-9]{1,30})\;FOMA'
      device: 'DoCoMo $1'
      brand: 'DoCoMo'
      model: '$1'

  ##########
  # Enseo
  # @ref http://www.enseo.com/
  ##########
  - regex: '(Enseo)/([A-Za-z0-9]+)'
    device: '$1'
    brand: '$1'
    model: '$2'
    type: 'tv'

  ##########
  # FREE SAS
  ##########
  - regex: '(Freebox); Linux i686'
    device: 'FREE SAS $1'
    brand: 'FREE SAS'
    model: '$1'

  #########
  # Google
  #########
  - regex: 'CrKey armv7l'
    device: 'Google Chromecast'
    brand: 'Google'
    model: 'Chromecast'

  ##########
  # htc
  ##########
  - regex: '\b(?:HTC/|HTC/[a-z0-9]+/|)HTC[ _\-;]? {0,2}(.{0,300}?)(?:-?Mozilla|fingerPrint|[;/\(\)]|$)'
    regex_flag: 'i'
    device: 'HTC $1'
    brand: 'HTC'
    model: '$1'

  ##########
  # Huawei
  ##########
  - regex: 'huawei|vodafone'
    regex_flag: 'i'
    group:
    - regex: 'Huawei([A-Za-z0-9]+)'
      device: 'Huawei $1'
      brand: 'Huawei'
      model: '$1'
    - regex: 'HUAWEI-([A-Za-z0-9]+)'
      device: 'Huawei $1'
      brand: 'Huawei'
      model: '$1'
    - regex: 'vodafone([A-Za-z0-9]+)'
      device: 'Huawei Vodafone $1'
      brand: 'Huawei'
      model: 'Vodafone $1'

  ##########
  # i-mate
  ##########
  - regex: 'i\-mate ([A-Za-z0-9]+)'
    device: 'i-mate $1'
    brand: 'i-mate'
    model: '$1'

  ##########
  # kyocera
  ##########
  - regex: 'Kyocera|KWC'
    group:
    - regex: 'Kyocera\-([A-Za-z0-9]+)'
      device: 'Kyocera $1'
      brand: 'Kyocera'
      model: '$1'
    - regex: 'KWC\-([A-Za-z0-9]+)'
      device: 'Kyocera $1'
      brand: 'Kyocera'
      model: '$1'

  ##########
  # lenovo
  ##########
  - regex: '\b(?:[Ll]enovo|LENOVO)+[ _\-]?([^,;:/ \)]+)'
    device: 'Lenovo $1'
    brand: 'Lenovo'
    model: '$1'

  ##########
  # HbbTV (European and Australian standard)
  # written before the LG regexes, as LG is making HbbTV too
  ##########
  - regex: 'HbbTV'
    group:
      - regex: '(HbbTV)/\d{1,10}\.\d{1,10}\.\d{1,10} \([^;]{0,30}; {0,2}(LG)E {0,2}; {0,2}([^;]{0,30}) {0,2};[^;]{0,30};[^;]{0,30};\)'
        device: '$1'
        brand: '$2'
        model: '$3'
        type: 'tv'
      - regex: '(HbbTV)/1\.1\.1.{0,30}CE-HTML/1\.\d;Vendor/([^;]{1,30});(?:.{0,30}SW-Version/.{0,30}(LF[^;]{1,30});|)'
        device: '$1'
        brand: '$2'
        model: '$3'
        type: 'tv'
      - regex: '(HbbTV)(?:/1\.1\.1|)(?: ?\(;;;;;\)|); {0,2}CE-HTML(?:/1\.\d|); {0,2}([^ ]+) ([^;]{1,30});'
        device: '$1'
        brand: '$2'
        model: '$3'
        type: 'tv'
      - regex: '(HbbTV)/1\.1\.1 \(;;;;;\) Maple_2011'
        device: '$1'
        brand: 'Samsung'
        type: 'tv'
      - regex: '(HbbTV)/\d{1,10}\.\d{1,10}\.\d{1,10} \([^;]{0,30}; {0,2}(?:CUS:([^;]{0,30})|([^;]{1,30})) {0,2}; {0,2}([^;]{0,30}) {0,2};.{0,30};'
        device: '$1'
        brand: '$2$3'
        model: '$4'
        type: 'tv'
      - regex: '(HbbTV)/[0-9]+\.[0-9]+\.[0-9]+'
        device: '$1'
        type: 'tv'

  ##########
  # LGE NetCast TV
  ##########
  - regex: 'NetCast'
    group:
      - regex: 'LGE; (?:Media\/|)([^;]*);[^;]*;[^;]*;?\); "?LG NetCast(\.TV|\.Media|)-\d{1,10}'
        device: 'NetCast$2'
        brand: 'LG'
        model: '$1'
        type: 'tv'
      - regex: 'LGE; ([^;]+).{0,300}LG NetCast\.TV-.{0,300}'
        device: 'NetCast.TV'
        brand: 'LG'
        model: '$1'
        type: 'tv'
      - regex: 'LG NetCast\.TV'
        device: 'NetCast.TV'
        brand: 'LG'
        type: 'tv'

  ##########
  # InettvBrowser, DirectFB, SmartTV
  ##########
  - regex: 'InettvBrowser|TSBNetTV|NETTV|HBBTV|DirectFB|SmartTV|SMART-TV'
    group:
      - regex: 'InettvBrowser/[0-9]+\.[0-9A-Z]+ \([^;]*;(Sony)([^;]*);[^;]*;[^\)]*\)'
        device: 'Inettv'
        brand: '$1'
        model: '$2'
        type: 'tv'
      - regex: 'InettvBrowser/[0-9]+\.[0-9A-Z]+ \([^;]*;([^;]*);[^;]*;[^\)]*\)'
        device: 'Inettv'
        brand: 'Generic_Inettv'
        model: '$1'
        type: 'tv'
      - regex: '(SMART-TV|SmartTV)'
        brand: 'Samsung'
        type: 'tv'
      - regex: '(InettvBrowser|TSBNetTV|NETTV|HBBTV|DirectFB)'
        device: 'Inettv'
        brand: 'Generic_Inettv'
        type: 'tv'

  ##########
  # lg
  ##########
  # LG Symbian Phones
  - regex: '\bLG'
    regex_flag: 'i'
    group:
      - regex: 'Series60/\d\.\d (LG)[\-]?([A-Za-z0-9 \-]+)'
        device: '$1 $2'
        brand: '$1'
        model: '$2'
      # other LG phones
      - regex: '; {0,2}(LG-)([A-Z]{1,2}\d{2,}[^,;/\)\(]*?)(?:Build| V\d{1,10}|[,;/\)\(]|$)'
        device: '$1$2'
        brand: 'LG'
        model: '$2'
      - regex: '\b(?:LGE[ \-]LG\-(?:AX|)|LGE |LGE?-LG|LGE?[ \-]|LG[ /\-]|lg[\-])([A-Za-z0-9]+)\b'
        device: 'LG $1'
        brand: 'LG'
        model: '$1'
      - regex: '(?:^LG[\-]?|^LGE[\-/]?)([A-Za-z]+[0-9]+[A-Za-z]*)'
        device: 'LG $1'
        brand: 'LG'
        model: '$1'
      - regex: '^LG([0-9]+[A-Za-z]*)'
        device: 'LG $1'
        brand: 'LG'
        model: '$1'

  ##########
  # microsoft
  ##########
  - regex: 'KIN\.|Xbox|Trident|Zune'
    group:
      - regex: '(KIN\.[^ ]+) (\d{1,10})\.(\d{1,10})'
        device: 'Microsoft $1'
        brand: 'Microsoft'
        model: '$1'
      - regex: '\b(Xbox One)\b'
        device: '$1'
        brand: 'Microsoft'
        model: '$1'
      - regex: '(?:MSIE|XBMC).{0,300}\b(Xbox)\b'
        device: '$1'
        brand: 'Microsoft'
        model: '$1'
      - regex: '; ARM; Trident/6\.0; Touch[\);]'
        device: 'Microsoft Surface RT'
        brand: 'Microsoft'
        model: 'Surface RT'
      - regex: '(Zune)\/'
        device: '$1'
        brand: 'Microsoft'
        model: '$1'
        type: 'player'

  ##########
  # motorola
  ##########
  - regex: 'mot[o-]'
    regex_flag: 'i'
    group:
    - regex: '[Mm]otorola[- ]([A-Za-z0-9]+)'
      device: 'Motorola $1'
      brand: 'Motorola'
      model: '$1'
    - regex: 'MOTO\-([A-Za-z0-9]+)'
      device: 'Motorola $1'
      brand: 'Motorola'
      model: '$1'
    - regex: 'MOT\-([A-z0-9][A-z0-9\-]*)'
      device: 'Motorola $1'
      brand: 'Motorola'
      model: '$1'

  ##########
  # nintendo
  ##########
  - regex: 'Nintendo'
    group:
    - regex: 'Nintendo WiiU'
      device: 'Nintendo Wii U'
      brand: 'Nintendo'
      model: 'Wii U'
    - regex: 'Nintendo (DS|3DS|DSi|Wii|Switch)'
      device: 'Nintendo $1'
      brand: 'Nintendo'
      model: '$1'

  ##########
  # pantech
  ##########
  - regex: '(?:Pantech|PANTECH)[ _-]?([A-Za-z0-9\-]+)'
    device: 'Pantech $1'
    brand: 'Pantech'
    model: '$1'

  ##########
  # philips
  ##########
  - regex: '(Philips) ?([A-Za-z0-9]+)'
    device: '$1 $2'
    brand: '$1'
    model: '$2'

  #########
  # Sprint (Operator Branded Devices)
  # @ref:http://www.sprint.com
  #########
  - regex: '\b(Sprint)[: ]([^;,/ ]+)'
    device: '$1$2'
    brand: 'Sprint'
    model: '$2'

  ##########
  # Samsung
  ##########
  - regex: 'samsung'
    regex_flag: 'i'
    group:
    # Samsung Symbian Devices
    - regex: 'SymbianOS/9\.\d.{0,300} Samsung[/\-]([A-Za-z0-9 \-]+)'
      device: 'Samsung $1'
      brand: 'Samsung'
      model: '$1'
    - regex: '(Samsung)(SGH)(i[0-9]+)'
      device: '$1 $2$3'
      brand: '$1'
      model: '$2-$3'
    - regex: 'SAMSUNG-ANDROID-MMS/([^;/]+)'
      device: '$1'
      brand: 'Samsung'
      model: '$1'
    # Other Samsung
    #- regex: 'SAMSUNG(?:; |-)([A-Za-z0-9\-]+)'
    - regex: 'SAMSUNG(?:; |[ -/])([A-Za-z0-9\-]+)'
      regex_flag: 'i'
      device: 'Samsung $1'
      brand: 'Samsung'
      model: '$1'

  ##########
  # Sega
  ##########
  - regex: '(Dreamcast)'
    device: 'Sega $1'
    brand: 'Sega'
    model: '$1'

  ##########
  # Siemens mobile
  ##########
  - regex: '^SIE-([A-Za-z0-9]+)'
    device: 'Siemens $1'
    brand: 'Siemens'
    model: '$1'

  ##########
  # snom
  ##########
  - regex: 'snom( m\d{1,10}|\d{1,10}-SIP)'
    device: 'snom $1'
    brand: 'snom'
    model: '$1'

  ##########
  # Softbank
  ##########
  - regex: 'Softbank/[12]\.0/([A-Za-z0-9]+)'
    device: 'Softbank $1'
    brand: 'Softbank'
    model: '$1'

  ##########
  # SonyEricsson
  ##########
  - regex: 'SonyEricsson([A-Za-z0-9]+)/'
    device: 'Ericsson $1'
    brand: 'SonyEricsson'
    model: '$1'

  ##########
  # Sony PlayStation
  # @ref: http://playstation.com
  # The Vita spoofs the Kindle
  ##########
  - regex: 'PlayStation|\bPS[34]\b'
    regex_flag: 'i'
    group:
      - regex: '\bPS([34])\b'
        device: 'PlayStation $1'
        brand: 'Sony'
        model: 'PlayStation $1'
        type: 'tv'
      - regex: 'PlayStation (\d{1,10})'
        regex_flag: 'i'
        device: 'PlayStation $1'
        brand: 'Sony'
        model: 'PlayStation $1'
        type: 'tv'
      - regex: '(PlayStation (?:Portable|Vita))'
        device: '$1'
        brand: 'Sony'
        model: '$1'
        type: 'console'

  ##########
  # Sony
  ##########
  - regex: 'Sony([^ ]+) '
    device: 'Sony $1'
    brand: 'Sony'
    model: '$1'

  ##########
  # Amazon
  ##########
  - regex: 'Kindle|Silk'
    group:
      - regex: ' (Kindle)/(\d{1,10}\.\d{1,10})'
        device: 'Kindle'
        brand: 'Amazon'
        model: '$1 $2'
      - regex: ' (Kindle|Silk)/(\d{1,10})\.'
        device: 'Kindle'
        brand: 'Amazon'
        model: 'Kindle'

  ##########
  # WeTab
  # @ref: http://wetab.mobi/
  ##########
  - regex: '(WeTab)-Browser'
    device: '$1'
    brand: 'WeTab'
    model: '$1'

  #########
  # Puffin Browser Device detect
  # A=Android, I=iOS, P=Phone, T=Tablet
  # AT=Android+Tablet
  #########
  - regex: 'Puffin'
    group:
      - regex: 'Puffin/[\d\.]+IT'
        device: 'iPad'
        brand: 'Apple'
        model: 'iPad'
      - regex: 'Puffin/[\d\.]+IP'
        device: 'iPhone'
        brand: 'Apple'
        model: 'iPhone'
      - regex: 'Puffin/[\d\.]+AT'
        device: 'Generic Tablet'
        brand: 'Generic'
        model: 'Tablet'
      - regex: 'Puffin/[\d\.]+AP'
        device: 'Generic Smartphone'
        brand: 'Generic'
        model: 'Smartphone'

  #########
  # Android General Device Matching (far from perfect)
  #########
  - regex: 'Android| Adr '
    group:
      - regex: 'Mozilla/5.0 \(Linux; Android [\d.]{1,10}; ([^)]{1,30})\) AppleWebKit/'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Mozilla/5.0 \(Linux; Android [\d.]{1,10}; (.{1,30}) Build'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Android[\- ][\d]+\.[\d]+; [A-Za-z]{2}\-[A-Za-z]{0,2}; WOWMobile (.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Android[\- ][\d]+\.[\d]+\-update1; [A-Za-z]{2}\-[A-Za-z]{0,2} {0,2}; {0,2}(.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|); {0,2}[A-Za-z]{2}[_\-][A-Za-z]{0,2}\-? {0,2}; {0,2}(.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|); {0,2}[A-Za-z]{0,2}\- {0,2}; {0,2}(.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      # No build info at all - "Build" follows locale immediately
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|); {0,2}__LOCALE__;?([)]| Build[ /]).{0,300} Mobile'
        device: 'Generic Smartphone'
        brand: 'Generic_Android'
        model: 'Smartphone'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|); {0,2}__LOCALE__;?([)]| Build[ /])'
        device: 'Generic Tablet'
        brand: 'Generic_Android'
        model: 'Tablet'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|); {0,2}\-?[A-Za-z]{2}; {0,2}(.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|)(?:;.{0,300}|); {0,2}(.{1,300}?) Build[ /]'
        brand: 'Generic_Android'
        model: '$1'
      - regex: '; Adr \d{1,10}\.\d{1,10}\.\d{1,10}; [^;]*?; ([^)]*?)\)'
        brand: 'Generic_Android'
        model: '$1'
      - regex: '(Opera Mobi|Mobile;)'
        brand: 'Generic_Android'
        model: 'Smartphone'
        device: 'Generic Smartphone'
      - regex: '(Opera Tablet|Tablet;|Android.{0,200}(?:Tab|Pad))'
        regex_flag: 'i'
        brand: 'Generic_Android'
        model: 'Tablet'
        device: 'Generic Tablet'
        type: 'tablet'
      - regex: 'Android[\- ]__VERSION_OS__; {0,2}__LOCALE__; {0,2}([^;]+); Android.{0,300}Mobile'
        brand: 'Generic_Android'
        model: '$5'
        device: 'Generic Smartphone'
      - regex: 'Android[\- ]__VERSION_OS__; {0,2}__LOCALE__; {0,2}([^;]+); Android'
        brand: 'Generic_Android'
        model: '$5'
        device: 'Generic Tablet'
      - regex: 'Android[\- ][\d]+(?:\.[\d]+)(?:\.[\d]+|)(?:;.{0,300}|); {0,2}([^)]+)'
        brand: 'Generic_Android'
        model: '$1'

  ##########
  # Google TV
  ##########
  - regex: '(GoogleTV)'
    brand: 'Generic_Inettv'
    model: '$1'
    type: 'tv'

  ##########
  # WebTV
  ##########
  - regex: '(WebTV)/\d{1,10}\.\d{1,10}'
    brand: 'Generic_Inettv'
    model: '$1'
    type: 'tv'

  - regex: '\b(iPad)\b'
    brand: 'Apple'
    model: '$1'
    device: '$1'
    type: 'tablet'
  - regex: '\b(iPod)\b'
    brand: 'Apple'
    model: '$1'
    device: '$1'
    type: 'player'
  - regex: '\b(iPhone)\b'
    brand: 'Apple'
    model: '$1'
    device: '$1'
    type: 'smartphone'
  - regex: '\b(iOS)\b'
    brand: 'Apple'
    model: 'iOS-Device'
    device: 'iOS-Device'
  - regex: '\b(tvOS)\b'
    brand: 'Apple'
    model: 'tvOS-Device'
    device: 'tvOS-Device'
    type: tv

  - regex: '(Mac OS X)'
    brand: 'Apple'
    model: 'Mac OS X-Device'
    device: 'Mac OS X-Device'
  - regex: '(Macintosh|Mac_PowerPC)'
    brand: 'Apple'
    model: 'Macintosh'
    device: 'Macintosh'

  ##########
  # Generic Tablet
  ##########
  - regex: '(Android 3\.\d|Opera Tablet|Tablet; .{1,200}Firefox/|Android.{0,200}(?:Tab|Pad))'
    regex_flag: 'i'
    device: 'Generic Tablet'
    brand: 'Generic'
    model: 'Tablet'
    type: 'tablet'

  ##########
  # Generic Smart Phone
  ##########
  - regex: '(Symbian|\bS60(Version|V\d)|\bS60\b|\((Series 60|Windows Mobile|Palm OS|Bada); Opera Mini|Windows CE|Opera Mobi|BREW|Brew|Mobile; .{1,300}Firefox/|iPhone OS|Android|MobileSafari|Windows {0,2}Phone|\(webOS/|PalmOS)'
    device: 'Generic Smartphone'
    brand: 'Generic'
    model: 'Smartphone'
  - regex: '(hiptop|avantgo|plucker|xiino|blazer|elaine)'
    regex_flag: 'i'
    device: 'Generic Smartphone'
    brand: 'Generic'
    model: 'Smartphone'

  ##########
  # Spiders (this is a hack...)
  # Sort by length
  ##########
  - regex: '(bot|insomia|zao|borg|khte|ktht|ktxn|oegp|silk|xenu|zeal|^ning|lycos|nutch|htdig|crawl|cibra|slurp|sogou|teoma|voila|yahoo|daumoa|genieo|ichiro|holmes|^jnlp/|^java/|larbin|pompos|reaper|scrapy|snappy|speedy|spider|vortex|favicon|monitor|riddler|scooter|scraper|scrubby|whatweb|winhttp|indexer|zooshot|archiver|^voyager|heritrix|icarus6j|mogimogi|netvibes|qwantify|retreiver|newsgator|findlinks|altavista|charlotte|synthetic|tlsprober|wordpress|wsr-agent|blogbridge|catchpoint|classifier|pagepeeker|gomezagent|squrl java|statuscake|bingpreview|netresearch|searchsight|webthumbnail|http%20client|python-urllib|dataparksearch|screaming frog|internetarchive|appengine-google|semanticdiscovery|google web preview|facebookexternalhit|iltrovatore-setaccio|google-http-java-client|google.{0,300}/\+/web/snippet|yeti|daum)'
    regex_flag: 'i'
    device: 'Spider'
    brand: 'Spider'
    model: 'Desktop'
    type: 'bot'

  ##########
  # Generic Feature Phone
  # take care to do case insensitive matching
  ##########
  - regex: '^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\-|airn|alav|asus|attw|au\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bmobile|bell|bird|bw\-n|bw\-u|beck|benq|bilb|blac|c55/|cdm\-|chtm|capi|comp|cond|dall|dbte|dc\-s|dica|ds\-d|ds12|dait|devi|dmob|doco|dopo|dorado|el(?:38|39|48|49|50|55|58|68)|el[3456]\d{2}dual|erk0|esl8|ex300|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\-|fly_|g\-mo|g1 u|g560|gf\-5|grun|gene|go\.w|good|grad|hcit|hd\-m|hd\-p|hd\-t|hei\-|hp i|hpip|hs\-c|htc |htc\-|htca|htcg|htcp|htcs|htct|htc_|haie|hita|huaw|hutc|i\-20|i\-go|i\-ma|i\-mobile|i230|iac|iac\-|iac/|ig01|im1k|inno|iris|jata|kddi|kgt|kgt/|kpt |kwc\-|klon|lexi|lg g|lg\-a|lg\-b|lg\-c|lg\-d|lg\-f|lg\-g|lg\-k|lg\-l|lg\-m|lg\-o|lg\-p|lg\-s|lg\-t|lg\-u|lg\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\-|lge/|leno|m1\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\-|nem\-|newg|neon|netf|noki|nzph|o2 x|o2\-x|opwv|owg1|opti|oran|ot\-s|p800|pand|pg\-1|pg\-2|pg\-3|pg\-6|pg\-8|pg\-c|pg13|phil|pn\-2|pt\-g|palm|pana|pire|pock|pose|psio|qa\-a|qc\-2|qc\-3|qc\-5|qc\-7|qc07|qc12|qc21|qc32|qc60|qci\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\-|scp\-|sdk/|se47|sec\-|sec0|sec1|semc|sgh\-|shar|sie\-|sk\-0|sl45|slid|smb3|smt5|sp01|sph\-|spv |spv\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\-mo|t218|t250|t600|t610|t618|tcl\-|tdg\-|telm|tim\-|ts70|tsm\-|tsm3|tsm5|tx\-9|tagt|talk|teli|topl|tosh|up\.b|upg1|utst|v400|v750|veri|vk\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vertu|vite|voda|vulc|w3c |w3c\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\-|your|zte\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|m\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\-|webc|whit|wmlb|xda\-|xda_)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
    type: 'phone'
  - regex: '^(Ice)$'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
    type: 'phone'
  - regex: '(wap[\-\ ]browser|maui|netfront|obigo|teleca|up\.browser|midp)'
    regex_flag: 'i'
    device: 'Generic Feature Phone'
    brand: 'Generic'
    model: 'Feature Phone'
    type: 'phone'
